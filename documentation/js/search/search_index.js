var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AddMembersDialogData.html",[0,0.634,1,3.148]],["body/interfaces/AddMembersDialogData.html",[0,0.95,1,4.715,2,1.261,3,0.119,4,0.119,5,0.119,6,2.605,7,1.442,8,3.406,9,1.766,10,0.98,11,2.093,12,2.47,13,3.258,14,1.526,15,3.039,16,0.139,17,0.617,18,0.606,19,1.991,20,3.464,21,4.352,22,0.612,23,0.277,24,0.02,25,0.643,26,0.341,27,3.175,28,3.258,29,3.258,30,1.441,31,1.48,32,0.441,33,1.371,34,0.765,35,2.19,36,1.328,37,3.046,38,2.177,39,2.635,40,2.47,41,1.766,42,1.48,43,3.643,44,2.605,45,3.643,46,2.387,47,1.766,48,3.039,49,1.884,50,0.888,51,1.605,52,2.923,53,2.605,54,2.848,55,1.884,56,0.194,57,3.406,58,3.643,59,0.863,60,0.811,61,3.406,62,4.764,63,6.662,64,2.825,65,0.804,66,0.727,67,1.297,68,0.804,69,0.824,70,0.804,71,0.804,72,1.766,73,1.03,74,1.766,75,0.222,76,0.933,77,1.03,78,0.727,79,0.313,80,3.512,81,3.311,82,2.367,83,3.046,84,1.884,85,2.923,86,3.406,87,3.406,88,1.182,89,2.605,90,2.605,91,1.182,92,1.405,93,3.406,94,4.136,95,2.367,96,4.764,97,2.367,98,2.605,99,1.505,100,3.053,101,3.406,102,2.019,103,1.48,104,0.81,105,2.605,106,0.943,107,0.78,108,3.406,109,1.747,110,1.66,111,2.605,112,1.766,113,2.605,114,1.766,115,2.825,116,1.401,117,1.884,118,1.03,119,1.884,120,3.046,121,2.177,122,4.764,123,2.923,124,3.046,125,2.635,126,3.643,127,4.963,128,4.202,129,1.27,130,2.605,131,4.202,132,2.605,133,5.494,134,3.406,135,3.406,136,2.923,137,3.406,138,4.202,139,3.406,140,2.605,141,2.605,142,2.923,143,3.406,144,6.262,145,4.764,146,3.406,147,3.406,148,4.764,149,3.643,150,3.643,151,2.177,152,3.512,153,2.605,154,2.605,155,2.605,156,2.605,157,5.494,158,1.242,159,3.406,160,3.406,161,4.764,162,4.764,163,6.489,164,2.605,165,4.764,166,2.367,167,3.406,168,2.605,169,2.605,170,4.202,171,2.605,172,3.406,173,2.019,174,3.406,175,2.605,176,1.766,177,2.605,178,2.605,179,2.605,180,1.145,181,2.605,182,2.605,183,3.406,184,3.406,185,3.406,186,2.923,187,1.114,188,3.406,189,2.923,190,2.605,191,2.019,192,3.406,193,2.605,194,1.884,195,3.406,196,2.605,197,3.819,198,2.605,199,2.367,200,2.367,201,2.605,202,1.083,203,2.19,204,1.48,205,2.367,206,3.311,207,2.605,208,2.605,209,2.605,210,2.605,211,3.311,212,2.605,213,3.406,214,3.406,215,2.177,216,3.406,217,2.605,218,3.406,219,3.406,220,2.367,221,3.406,222,3.406,223,3.046,224,2.605,225,2.019,226,1.766,227,4.764,228,1.884,229,4.202,230,2.47,231,4.202,232,2.923,233,2.605,234,3.406,235,3.406,236,4.764,237,3.406,238,3.406,239,3.406,240,3.406,241,2.019,242,0.012,243,0.012]],["title/components/AddMembersDialogMobileComponent.html",[26,0.263,244,0.957]],["body/components/AddMembersDialogMobileComponent.html",[0,0.577,3,0.074,4,0.074,5,0.074,6,5.327,7,1.476,10,0.608,11,2.077,12,1.095,14,1.7,16,0.086,17,0.432,18,0.574,19,1.492,21,3.775,22,0.38,23,0.295,24,0.02,25,0.558,26,0.296,27,2.615,30,1.25,31,0.917,32,0.273,33,1.19,34,0.474,35,1.9,36,0.823,37,2.641,38,1.35,39,2.596,42,0.917,43,3.908,44,1.615,45,4.508,46,2.36,47,1.095,48,3.146,49,1.168,50,0.551,51,1.392,56,0.136,58,4.154,59,0.535,60,0.763,64,1.977,65,1.734,66,1.568,67,1.433,68,0.787,69,0.715,70,0.787,71,0.787,73,1.009,75,0.137,76,0.578,77,1.009,78,0.712,79,0.47,80,3,84,2.286,88,1.268,89,3.16,90,3.589,91,1.165,92,1.522,94,3.552,95,2.317,97,2.317,98,4.349,99,1.286,100,2.773,103,1.795,104,0.57,106,0.89,107,0.768,109,1.727,111,3.908,113,2.55,115,2.783,116,1.371,117,1.844,118,1.42,119,1.168,120,1.35,121,1.35,124,1.35,125,1.168,126,1.615,127,3.908,128,2.55,129,1.467,130,1.615,138,2.55,149,4.154,150,4.154,151,3,152,3,153,3.589,154,1.615,155,1.615,156,2.55,158,0.869,164,1.615,166,2.317,169,3.589,170,3.16,171,2.55,173,1.252,175,3.589,176,1.095,177,1.615,178,2.55,179,3.589,180,0.642,181,3.16,182,1.615,187,1.285,190,1.615,193,1.615,194,1.844,197,1.467,198,1.615,200,2.317,201,2.55,203,1.533,204,2.22,205,3.262,206,1.467,207,1.615,208,1.615,209,3.589,210,1.615,224,2.55,226,1.728,228,2.596,242,0.008,243,0.008,244,1.224,245,0.869,246,0.608,247,0.781,248,0.608,249,0.608,250,5.977,251,1.812,252,3.684,253,3.262,254,2.317,255,2.861,256,0.608,257,3.546,258,2.861,259,0.642,260,2.55,261,2.861,262,1.812,263,3.908,264,1.011,265,3.334,266,2.317,267,2.861,268,0.838,269,2.317,270,2.111,271,2.861,272,2.55,273,2.861,274,2.317,275,2.861,276,1.168,277,2.111,278,1.844,279,2.111,280,2.55,281,2.111,282,2.111,283,2.111,284,1.844,285,2.861,286,2.111,287,2.861,288,2.861,289,2.111,290,2.317,291,2.55,292,2.55,293,2.55,294,2.111,295,3.552,296,1.558,297,1.483,298,2.111,299,2.131,300,2.317,301,2.861,302,1.728,303,2.111,304,2.111,305,2.55,306,2.55,307,2.111,308,2.111,309,2.111,310,2.861,311,2.861,312,2.111,313,2.111,314,2.111,315,1.844,316,1.812,317,1.812,318,1.812,319,1.812,320,1.615,321,3.22,322,1.812,323,2.861,324,1.812,325,0.428,326,1.812,327,1.812,328,2.45,329,1.812,330,1.812,331,1.812,332,1.812,333,3.334,334,3.589,335,3.334,336,3.334,337,2.861,338,2.783,339,2.861,340,2.861,341,2.861,342,2.288,343,3.334,344,3.334,345,3.334,346,1.471,347,3.334,348,3.334,349,0.823,350,2.45,351,2.641,352,2.317,353,2.218,354,1.728,355,2.611,356,1.812,357,1.9,358,2.134,359,2.55,360,1.931,361,1.83,362,1.83,363,1.449,364,0.869,365,1.168,366,1.252,367,1.931,368,2.55,369,2.637,370,2.234,371,2.349,372,0.917,373,1.844,374,2.71,375,2.286,376,2.423,377,2.299,378,1.993,379,1.095,380,1.611,381,1.371,382,1.252,383,1.795,384,2.234,385,2.102,386,2.76,387,2.651,388,1.931,389,2.039,390,2.158,391,2.102,392,1.611,393,0.971,394,0.971,395,1.168,396,1.168,397,1.168,398,0.971,399,1.168,400,0.971,401,1.168,402,2.423,403,1.9,404,3.135,405,2.615,406,2.014,407,1.7,408,1.7,409,2.433,410,2.861,411,2.827,412,2.45,413,0.917,414,1.3,415,3.16,416,2.641,417,2.111,418,2.339,419,1.812,420,1.812,421,1.812,422,2.861,423,1.812,424,2.131,425,1.252,426,1.35,427,1.533,428,0.742,429,2.36,430,2.36,431,2.317,432,1.467,433,1.626,434,2.158,435,1.533,436,2.111,437,1.533,438,1.35,439,2.142,440,2.861,441,1.252,442,1.35,443,1.35,444,1.35,445,1.35,446,2.55,447,2.349,448,1.728,449,2.014,450,1.467,451,1.812,452,1.095,453,1.168,454,1.812,455,1.812,456,2.111,457,1.35,458,1.615,459,1.467,460,1.812,461,2.111,462,2.317,463,1.467,464,2.039,465,1.812,466,1.095,467,1.467,468,1.095,469,1.168,470,1.168,471,1.467,472,2.142,473,0.917,474,2.111,475,2.111,476,2.111,477,2.111,478,2.111,479,2.111,480,1.168,481,2.039,482,1.977,483,2.111,484,2.111,485,1.168,486,0.608,487,0.914,488,0.96,489,0.608,490,1.351,491,0.608,492,1.697,493,0.608,494,0.578,495,0.608,496,0.578,497,0.551,498,0.608,499,0.608,500,0.608,501,0.578,502,0.608,503,0.608,504,0.608,505,0.524,506,0.96,507,0.608,508,0.608,509,0.578,510,0.578,511,0.96,512,0.608,513,0.578,514,0.578,515,0.608,516,0.578,517,0.608,518,0.578,519,0.578,520,0.608,521,0.578,522,0.578,523,0.96,524,0.578,525,0.608,526,0.608,527,0.608,528,0.551,529,0.608,530,0.578,531,0.578,532,0.578,533,0.578,534,0.608,535,0.578,536,0.551,537,0.608,538,0.578,539,0.608,540,0.608,541,0.551,542,0.551,543,0.608,544,0.608,545,0.608,546,0.608,547,0.608,548,0.428,549,0.608,550,0.608,551,0.578,552,0.578,553,0.608,554,0.578,555,0.578,556,0.608,557,0.608,558,0.608]],["title/interfaces/AddMembersMobileData.html",[0,0.634,263,2.805]],["body/interfaces/AddMembersMobileData.html",[0,1.024,2,1.454,3,0.137,4,0.137,5,0.137,6,3.005,7,1.46,10,1.131,11,2.201,12,2.723,14,1.578,16,0.16,17,0.68,18,0.588,19,2.094,21,4.709,22,0.544,23,0.276,24,0.02,25,0.646,26,0.376,27,2.721,30,1.589,31,1.707,32,0.509,33,1.512,34,0.882,35,2.415,36,1.532,37,3.358,38,2.512,39,2.906,42,1.707,43,4.018,44,3.005,45,4.832,46,2.571,47,2.037,48,3.274,49,2.173,51,1.397,56,0.214,58,4.526,59,0.509,60,0.766,64,2.33,65,0.928,66,0.839,67,1.397,68,0.928,69,0.909,70,0.928,71,0.928,73,1.189,75,0.256,77,1.189,78,0.839,80,3.358,88,1.304,89,3.005,90,4.018,91,0.975,92,1.555,94,3.651,95,2.731,97,2.731,98,3.005,99,1.622,100,3.08,103,1.707,104,0.719,106,0.922,107,0.86,109,1.67,111,3.005,113,3.005,115,3.115,117,2.173,118,1.189,119,2.173,120,2.512,121,2.512,124,2.512,125,2.173,126,3.005,127,5.036,128,4.018,129,1.263,130,3.005,138,4.018,149,5.182,150,4.526,151,3.358,152,3.358,153,3.005,154,3.005,155,3.005,156,4.018,158,1.37,164,3.005,166,2.731,169,3.005,170,4.526,171,3.005,175,3.005,176,2.037,177,3.005,178,3.005,179,3.005,180,1.011,181,4.018,182,3.005,187,1.065,190,3.005,193,3.005,194,2.173,197,2.731,198,3.005,200,2.731,201,3.005,203,1.806,205,2.731,206,2.731,207,3.005,208,3.005,209,4.832,210,3.005,224,3.005,226,2.037,228,2.173,242,0.013,243,0.013,244,1.025,250,3.372,251,3.372,252,3.509,253,3.651,254,2.731,255,3.372,257,3.372,258,3.372,263,4.526,266,2.731,267,3.372,271,3.372,272,3.005,273,3.372,274,2.731,275,3.372,278,2.173,280,3.005,284,2.173,285,3.372,287,3.372,288,3.372,290,2.731,291,3.005,292,3.005,293,3.005,295,3.651,299,2.512,300,2.731,301,3.372,305,3.005,306,3.005,310,3.372,311,3.372,315,2.173,316,3.372,317,4.508,318,3.372,319,3.372,320,3.005,321,4.017,322,3.372,323,4.508,324,3.372,325,0.797,326,3.372,327,3.372,328,3.509,329,3.372,330,3.372,331,3.372,332,3.372]],["title/components/AppComponent.html",[26,0.263,494,1.005]],["body/components/AppComponent.html",[3,0.151,4,0.151,5,0.151,7,1.194,14,0.971,16,0.176,17,0.724,22,0.397,23,0.289,24,0.02,25,0.696,26,0.444,31,1.879,32,0.56,33,1.786,34,0.971,35,2.852,36,1.686,50,1.128,51,1.021,56,0.176,59,0.724,60,0.724,65,1.827,66,1.652,67,1.321,68,1.321,69,0.968,70,1.321,71,1.321,73,1.693,75,0.282,76,1.185,79,0.514,88,1.073,92,1.021,104,0.526,107,1.015,180,0.832,187,1.134,202,2.212,242,0.014,243,0.014,244,1.128,245,1.459,246,1.245,247,1.601,248,1.245,249,1.245,256,1.245,264,0.958,296,1.533,297,1.459,361,2.558,486,1.245,487,1.533,488,1.611,489,1.245,490,1.888,491,1.245,492,2.066,493,1.245,494,1.797,495,1.245,496,1.185,497,1.128,498,1.245,499,1.611,500,1.245,501,1.185,502,1.611,503,1.245,504,1.245,505,1.073,506,1.611,507,1.245,508,1.245,509,1.185,510,1.185,511,1.611,512,1.245,513,1.185,514,1.185,515,1.245,516,1.533,517,1.245,518,1.533,519,1.533,520,1.245,521,1.185,522,1.185,523,1.611,524,1.533,525,1.245,526,1.611,527,1.245,528,1.128,529,1.245,530,1.185,531,1.185,532,1.185,533,1.533,534,1.245,535,1.533,536,1.459,537,1.245,538,1.533,539,1.245,540,1.245,541,1.128,542,1.128,543,1.245,544,1.245,545,1.611,546,1.245,547,1.245,548,0.877,549,1.245,550,1.245,551,1.185,552,1.185,553,1.245,554,1.185,555,1.185,556,1.245,557,1.245,558,1.245,559,4.324,560,2.431,561,6.203,562,5.323,563,4.802,564,5.323,565,5.595,566,5.595,567,4.311,568,4.324,569,3.317,570,4.324,571,2.431,572,4.324,573,4.324,574,2.392,575,2.392,576,4.324,577,4.324,578,4.324,579,4.324,580,4.324,581,3.711,582,2.108,583,3.005,584,1.879,585,2.564,586,3.711,587,4.324,588,3.711,589,4.324,590,4.324,591,2.108,592,4.324,593,4.324]],["title/injectables/AppStateService.html",[594,1.005,595,2.805]],["body/injectables/AppStateService.html",[3,0.194,4,0.194,5,0.194,16,0.226,17,0.846,18,0.473,23,0.305,24,0.02,25,0.511,32,0.72,56,0.226,69,1.131,75,0.362,79,0.511,104,0.844,106,0.846,242,0.017,243,0.017,259,1.258,264,1.014,268,1.128,276,1.258,296,1.524,297,1.451,325,1.128,560,2.417,594,1.791,595,5,596,2.417,597,7.164,598,4.775,599,5.309,600,7.164,601,6.537,602,5.564,603,2.375,604,6.537,605,5.564,606,5,607,5.564,608,2.558,609,6.537]],["title/components/AuthActionComponent.html",[26,0.263,496,1.005]],["body/components/AuthActionComponent.html",[3,0.188,4,0.115,5,0.115,7,1.036,10,1.336,14,0.737,16,0.134,17,0.601,18,0.457,22,0.638,23,0.288,24,0.02,25,0.629,26,0.385,30,1.629,32,0.425,33,1.55,34,0.737,35,2.475,36,1.279,46,2.925,47,1.701,50,0.856,51,0.775,56,0.134,59,0.8,60,0.601,65,1.798,66,1.625,67,1.095,68,1.095,69,1.012,70,1.095,71,1.095,73,1.404,75,0.214,76,0.899,77,1.404,79,0.568,83,4.214,88,0.814,91,1.591,92,0.775,99,0.899,102,2.751,104,0.751,106,0.601,107,0.76,118,1.771,129,0.7,158,1.21,180,0.893,187,0.941,202,1.475,225,2.751,232,3.982,242,0.012,243,0.012,244,0.856,245,1.21,246,0.944,247,1.214,248,0.944,249,0.944,256,0.944,259,0.893,264,0.963,268,1.252,276,1.036,278,2.567,280,3.549,296,1.475,297,1.404,325,0.941,349,1.279,353,2.408,354,1.701,355,2.408,359,1.279,362,1.279,368,1.279,369,1.81,376,1.279,377,2.5,378,2.408,380,1.279,381,1.349,386,2.283,392,1.279,402,2.408,404,1.508,407,1.349,408,1.349,414,1.279,418,1.349,429,2.925,437,1.508,441,3.47,453,1.815,464,2.543,481,2.543,485,1.815,486,0.944,487,1.271,488,1.336,489,0.944,490,1.685,491,0.944,492,1.938,493,0.944,494,0.899,495,0.944,496,1.604,497,1.916,498,0.944,499,0.944,500,0.944,501,0.899,502,0.944,503,0.944,504,0.944,505,0.814,506,1.336,507,0.944,508,0.944,509,0.899,510,0.899,511,1.336,512,0.944,513,0.899,514,0.899,515,0.944,516,1.604,517,0.944,518,1.604,519,0.899,520,0.944,521,0.899,522,0.899,523,1.336,524,0.899,525,0.944,526,0.944,527,0.944,528,0.856,529,0.944,530,0.899,531,0.899,532,0.899,533,0.899,534,0.944,535,0.899,536,1.526,537,0.944,538,0.899,539,0.944,540,0.944,541,0.856,542,0.856,543,0.944,544,0.944,545,0.944,546,0.944,547,0.944,548,0.665,549,0.944,550,0.944,551,0.899,552,1.475,553,0.944,554,0.899,555,0.899,556,0.944,557,0.944,558,0.944,571,1.425,574,1.815,575,1.815,610,6.733,611,6.733,612,3.281,613,3.47,614,3.982,615,5.023,616,4.64,617,3.742,618,4.068,619,3.324,620,3.549,621,5.384,622,4.64,623,5.384,624,6.176,625,1.94,626,4.64,627,4.64,628,3.281,629,5.023,630,3.49,631,4.64,632,4.62,633,4.64,634,2.691,635,2.567,636,3.225,637,4.64,638,4.64,639,3.982,640,3.549,641,4.64,642,1.545,643,3.281,644,4.64,645,4.476,646,2.966,647,4.476,648,4.64,649,1.861,650,4.64,651,3.281,652,4.64,653,2.751,654,3.281,655,4.64,656,3.982,657,4.64,658,4.64,659,3.281,660,3.281,661,2.509,662,3.281,663,3.281,664,2.28,665,2.691,666,3.281,667,5.384,668,3.281,669,2.815,670,2.815,671,2.815,672,3.281,673,3.281,674,3.281,675,1.81,676,1.861,677,3.281,678,2.815,679,3.281,680,3.281,681,5.023,682,2.815,683,3.281,684,2.509,685,3.281,686,2.815,687,3.281,688,3.281,689,3.982,690,3.982,691,2.406,692,2.751,693,3.225,694,4.64,695,1.815,696,2.097,697,2.815,698,2.28,699,3.416,700,1.815,701,3.281,702,5.023,703,3.47,704,2.28,705,2.28,706,2.097]],["title/classes/BaseChatComponent.html",[75,0.239,707,3.148]],["body/classes/BaseChatComponent.html",[3,0.098,4,0.098,5,0.098,7,1.049,10,0.811,16,0.115,17,0.538,18,0.463,22,0.696,23,0.357,24,0.02,25,0.534,34,0.632,56,0.115,59,0.538,60,0.538,75,0.183,78,0.601,79,0.382,91,1.031,99,2.006,103,2.146,106,0.788,109,2.49,129,1.163,242,0.011,243,0.011,264,1.118,296,2.094,297,1.993,346,1.196,428,1.917,466,2.56,585,1.67,599,3.777,603,2.327,642,1.621,707,3.566,708,1.67,709,7.662,710,2.816,711,2.732,712,2.408,713,6.085,714,3.157,715,4.938,716,2.928,717,2.408,718,3.432,719,4.938,720,3.157,721,3.157,722,4.938,723,6.085,724,6.085,725,6.085,726,4.938,727,4.938,728,2.928,729,4.938,730,3.157,731,2.27,732,3.157,733,4.938,734,3.157,735,3.432,736,3.432,737,2.56,738,2.56,739,1.57,740,1.926,741,4.938,742,3.432,743,4.938,744,4.238,745,2.928,746,3.432,747,4.938,748,3.157,749,3.157,750,3.157,751,3.157,752,3.432,753,4.238,754,3.432,755,4.238,756,4.938,757,4.938,758,3.432,759,3.432,760,3.157,761,2.816,762,2.816,763,1.828,764,2.816,765,2.816,766,3.566,767,2.807,768,3.566,769,3.566,770,2.816,771,4.155,772,2.816,773,2.816,774,2.816,775,2.126,776,2.816,777,2.816,778,2.816,779,2.816,780,2.816,781,2.816,782,2.816,783,2.816,784,2.816,785,2.299,786,3.157,787,2.816,788,2.816,789,2.816,790,2.816,791,2.816,792,2.816,793,2.816,794,2.816,795,2.816,796,2.816,797,2.816,798,2.816,799,2.816,800,1.805,801,2.816,802,2.816,803,2.816,804,2.816,805,2.816,806,2.816,807,2.816,808,2.816,809,2.816,810,2.816,811,2.56,812,2.816,813,2.816,814,2.816,815,2.816,816,2.816,817,2.816,818,2.816,819,5.815,820,2.816,821,2.816,822,2.816,823,2.816,824,4.238,825,2.816,826,2.417,827,4.155,828,2.816,829,1.558,830,1.558,831,1.8,832,1.67,833,1.67]],["title/interfaces/BroadcastContext.html",[0,0.634,834,3.148]],["body/interfaces/BroadcastContext.html",[0,0.759,2,1.625,3,0.153,4,0.153,5,0.153,15,3.931,16,0.179,17,0.732,19,1.396,22,0.674,23,0.336,24,0.02,25,0.519,34,0.986,54,3.732,55,2.428,56,0.293,59,0.854,60,0.568,91,1.402,99,1.548,100,3.216,104,0.534,106,0.854,180,1.411,242,0.014,243,0.014,320,4.321,325,1.145,364,1.473,603,2.097,625,1.995,642,1.457,649,2.097,676,2.17,712,2.754,717,3.216,728,3.911,731,3.033,766,4.848,767,3.036,768,4.848,769,4.848,826,3.767,834,6.242,835,2.806,836,2.806,837,4.39,838,5.661,839,6.596,840,5.661,841,2.733,842,6.178,843,6.596,844,4.39,845,3.767,846,5.65,847,5.65,848,5.65,849,4.39,850,4.39,851,4.778,852,4.39,853,4.39,854,4.39,855,4.39,856,2.572,857,5.65,858,2.872,859,5.65,860,6.987,861,4.39,862,3.357,863,3.125,864,5.361,865,3.35,866,5.65,867,4.848,868,3.125,869,5.65,870,3.35,871,2.754,872,2.806,873,4.39,874,4.39,875,4.39,876,4.39,877,4.39,878,4.39,879,4.848,880,4.39,881,5.65,882,4.39,883,4.39,884,4.39,885,4.39,886,2.455,887,3.125,888,2.603,889,4.39,890,4.39,891,5.65,892,5.65,893,5.65,894,5.65,895,4.39]],["title/components/ChannelDialogComponent.html",[26,0.263,501,1.005]],["body/components/ChannelDialogComponent.html",[3,0.084,4,0.084,5,0.084,7,1.147,9,1.241,10,1.913,11,2.152,13,2.18,14,1.663,16,0.097,17,0.476,18,0.506,20,2.779,22,0.498,23,0.267,24,0.02,25,0.602,26,0.427,27,3.127,30,1.354,31,1.04,32,0.31,33,1.289,34,0.538,35,2.058,36,0.934,39,2.779,40,2.81,41,1.241,42,1.598,48,3.561,49,1.324,50,0.624,51,0.565,53,1.831,56,0.097,59,0.848,60,0.969,65,1.755,66,1.586,67,0.868,68,0.868,69,0.937,70,0.868,71,0.868,72,1.906,73,1.112,74,2.321,75,0.156,76,0.656,77,1.112,79,0.662,84,1.324,85,3.156,88,0.594,91,0.913,92,0.565,99,1.485,100,1.793,102,2.978,104,0.544,106,0.796,107,0.602,109,1.819,110,2.643,112,1.906,114,2.321,116,1.842,118,1.52,123,3.156,129,1.418,152,3.211,173,2.978,180,0.862,186,3.156,187,1.018,203,1.691,204,2.183,205,3.491,206,2.556,215,2.351,226,1.906,230,1.906,242,0.009,243,0.009,244,0.624,245,0.959,246,0.689,247,0.886,248,0.689,249,0.689,252,1.42,256,0.689,259,0.708,264,0.957,266,2.556,268,0.746,274,1.664,276,0.967,284,2.034,296,1.376,297,1.492,302,1.241,315,2.034,325,0.908,338,1.42,342,2.643,349,0.934,350,3.392,351,2.351,352,4.552,353,2.114,354,1.241,355,2.51,357,2.058,358,1.574,359,2.231,360,1.513,361,1.434,362,1.434,363,2.183,364,1.603,365,1.324,366,1.42,367,2.354,368,2.51,369,2.77,370,2.529,371,2.492,372,1.598,373,1.324,374,2.631,375,1.324,376,2.324,377,2.739,378,2.459,379,1.906,380,2.324,381,2.066,383,1.598,384,2.354,385,2.23,386,2.797,387,2.594,388,1.513,389,2.183,390,1.691,391,2.066,392,1.746,393,1.101,394,1.101,395,1.324,396,1.324,397,1.324,398,1.101,399,1.324,400,1.101,401,1.324,402,2.653,403,2.31,404,1.691,405,2.058,406,1.793,409,1.906,410,2.055,411,2.779,412,2.978,413,1.945,414,2.324,415,1.831,416,2.351,418,2.23,419,2.055,420,2.055,421,2.055,423,2.055,424,4.541,426,1.531,427,2.31,428,1.293,429,2.486,430,1.04,431,2.556,434,2.058,435,1.101,437,2.631,438,1.531,439,1.906,441,2.655,442,2.862,443,2.351,444,1.531,445,1.531,446,2.812,447,1.691,448,1.241,452,1.906,464,2.355,466,1.906,469,2.034,473,1.945,480,2.034,481,1.04,486,0.689,487,1.008,488,1.059,489,0.689,490,1.446,491,0.689,492,1.77,493,0.689,494,0.656,495,0.689,496,0.656,497,0.624,498,0.689,499,0.689,500,0.689,501,1.376,502,0.689,503,0.689,504,0.689,505,0.594,506,1.059,507,0.689,508,0.689,509,0.656,510,0.656,511,1.059,512,0.689,513,0.656,514,0.656,515,0.689,516,0.656,517,0.689,518,0.656,519,0.656,520,0.689,521,0.656,522,0.656,523,1.059,524,0.656,525,0.689,526,0.689,527,0.689,528,0.624,529,1.446,530,0.656,531,0.656,532,0.656,533,0.656,534,0.689,535,0.656,536,0.624,537,0.689,538,0.656,539,0.689,540,0.689,541,0.624,542,0.624,543,0.689,544,0.689,545,0.689,546,0.689,547,0.689,548,0.485,549,0.689,550,0.689,551,0.656,552,0.656,553,0.689,554,0.656,555,0.656,556,0.689,557,0.689,558,0.689,564,3.156,615,3.842,635,2.477,639,3.842,653,3.646,665,2.492,699,1.324,703,1.42,711,1.324,712,1.793,739,0.761,811,1.241,842,2.055,856,1.434,896,4.248,897,5.703,898,3.156,899,3.677,900,2.034,901,3.156,902,3.677,903,3.842,904,3.842,905,3.842,906,3.842,907,3.842,908,4.477,909,3.491,910,3.677,911,1.664,912,3.156,913,2.321,914,4.477,915,2.351,916,2.812,917,2.394,918,3.677,919,2.394,920,2.034,921,2.034,922,2.812,923,2.351,924,2.556,925,3.156,926,3.156,927,3.677,928,2.394,929,2.351,930,2.978,931,4.145,932,3.677,933,3.677,934,2.394,935,3.156,936,3.677,937,1.831,938,2.812,939,2.394,940,3.156,941,3.156,942,2.812,943,2.394,944,2.055,945,2.055,946,3.677,947,3.677,948,2.394,949,3.465,950,2.394,951,2.394,952,2.394,953,3.677,954,2.394,955,2.394,956,3.677,957,2.394,958,2.394,959,2.394,960,2.394,961,3.156,962,2.394,963,2.394,964,2.394,965,2.394,966,2.394,967,2.055,968,2.394,969,3.842,970,3.677,971,3.677,972,3.677,973,3.156,974,3.677,975,3.677,976,3.677,977,2.351,978,3.677,979,3.677,980,2.351,981,3.156,982,3.677,983,3.156,984,3.677,985,3.677,986,3.677,987,3.677,988,2.862,989,2.394,990,2.394,991,1.831,992,2.055,993,2.394,994,2.604,995,2.394,996,2.055,997,4.477,998,4.477,999,2.394,1000,2.351,1001,1.101,1002,1.664,1003,2.394,1004,2.394,1005,2.394,1006,3.156,1007,3.156,1008,3.156,1009,3.156,1010,2.394,1011,2.394,1012,2.556,1013,2.394,1014,2.394,1015,5.024,1016,5.024,1017,3.677,1018,3.156,1019,3.677,1020,2.394,1021,2.394,1022,1.831,1023,2.394]],["title/injectables/ChannelEmojiService.html",[594,1.005,1024,3.148]],["body/injectables/ChannelEmojiService.html",[3,0.175,4,0.175,5,0.175,11,1.672,16,0.204,18,0.564,19,2.348,22,0.684,23,0.351,24,0.02,25,0.564,32,0.648,56,0.204,75,0.326,79,0.61,107,0.819,158,1.305,180,1.331,202,2.296,242,0.016,243,0.016,259,1.18,264,0.969,268,1.345,276,1.18,325,1.402,560,2.174,584,2.174,594,1.681,596,2.174,608,2.3,625,2.184,649,2.198,675,1.951,676,2.109,712,2.99,737,2.593,738,2.593,896,4.42,1001,2.3,1024,5.263,1025,5.003,1026,6.633,1027,6.633,1028,2.3,1029,5.003,1030,5.003,1031,5.648,1032,6.197,1033,5.003,1034,5.003,1035,7.095,1036,5.003,1037,2.767,1038,2.966,1039,2.966,1040,1.951,1041,5.263,1042,3.393,1043,5.263,1044,5.003,1045,4.293,1046,5.003,1047,5.003,1048,5.003,1049,5.003]],["title/injectables/ChannelMembershipService.html",[594,1.005,1050,3.148]],["body/injectables/ChannelMembershipService.html",[3,0.154,4,0.154,5,0.154,7,1.207,10,1.273,16,0.18,18,0.581,19,2.35,22,0.705,23,0.336,24,0.02,25,0.576,32,0.573,46,3.093,47,2.293,56,0.18,60,0.573,75,0.288,79,0.643,104,0.865,106,0.857,107,0.724,129,0.944,158,1.153,180,1.413,187,0.897,202,2.226,242,0.014,243,0.014,259,1.093,264,0.999,268,1.387,276,1.273,321,2.623,325,1.271,560,1.922,584,1.922,594,1.556,596,1.922,608,2.034,625,2.203,649,2.226,675,1.725,676,2.175,712,2.156,763,2.321,831,2.828,832,3.717,841,2.101,896,4.475,1001,2.61,1028,2.034,1037,2.447,1038,2.623,1039,2.623,1040,1.725,1041,5.871,1042,2.447,1043,3.796,1045,3.796,1050,4.872,1051,4.423,1052,5.677,1053,6.27,1054,6.27,1055,5.381,1056,4.423,1057,5.677,1058,4.423,1059,4.423,1060,4.429,1061,4.423,1062,6.841,1063,4.423,1064,7.119,1065,4.423,1066,3.796,1067,4.423,1068,3.796,1069,5.677,1070,3.383,1071,5.677,1072,4.423,1073,4.342,1074,4.423,1075,4.423,1076,3.383,1077,3.383,1078,4.423,1079,2.828,1080,3.074,1081,6.841,1082,6.841,1083,4.423,1084,4.423,1085,5.677,1086,4.423,1087,4.423,1088,4.423,1089,4.423,1090,4.423,1091,3.074,1092,4.423]],["title/interfaces/ChannelMessageData.html",[0,0.634,1093,2.345]],["body/interfaces/ChannelMessageData.html",[0,1.194,2,1.845,3,0.174,4,0.174,5,0.174,16,0.203,17,0.792,18,0.642,19,2.254,20,2.758,22,0.717,23,0.353,24,0.02,56,0.289,78,1.064,242,0.016,243,0.016,364,1.882,603,2.346,642,1.064,721,3.187,731,2.292,739,1.585,763,2.265,767,3.08,775,2.583,785,2.758,800,2.659,829,3.386,856,2.387,858,2.814,863,3.921,865,4.095,868,3.921,870,4.203,871,3.229,872,4.415,886,2.166,887,2.758,888,4.095,1093,3.913,1094,3.187,1095,3.465,1096,3.465,1097,2.956,1098,2.758,1099,2.758,1100,2.585,1101,3.465,1102,3.465,1103,3.465,1104,3.465,1105,2.585,1106,3.465,1107,3.465,1108,3.465,1109,4.254,1110,2.956,1111,2.956,1112,3.187]],["title/injectables/ChannelMsgService.html",[594,1.005,1113,3.148]],["body/injectables/ChannelMsgService.html",[3,0.176,4,0.176,5,0.176,16,0.205,18,0.566,19,2.204,22,0.692,23,0.331,24,0.02,25,0.637,32,0.653,56,0.205,69,0.872,75,0.328,78,1.076,79,0.612,107,0.825,109,2.3,180,1.334,202,2.3,242,0.016,243,0.016,259,1.186,264,0.972,268,1.349,276,1.186,325,1.022,364,1.315,560,2.191,567,4.819,582,2.458,583,3.504,584,2.678,585,2.989,591,2.458,594,1.689,596,2.191,603,2.116,608,2.318,625,2.013,634,2.833,642,1.076,649,1.959,676,1.603,740,2.403,763,2.281,856,1.966,858,2.318,871,2.458,896,4.432,1028,2.318,1037,2.789,1039,2.989,1040,1.966,1042,2.789,1113,5.289,1114,5.042,1115,6.163,1116,6.656,1117,5.042,1118,6.163,1119,5.042,1120,5.042,1121,5.302,1122,6.933,1123,6.933,1124,5.042,1125,4.713,1126,3.223,1127,4.713,1128,3.223,1129,3.856,1130,3.223,1131,3.223,1132,5.042,1133,3.856,1134,5.042,1135,6.163,1136,5.042,1137,5.042,1138,5.042]],["title/injectables/ChannelQueriesService.html",[594,1.005,1139,3.148]],["body/injectables/ChannelQueriesService.html",[3,0.17,4,0.17,5,0.17,16,0.198,18,0.598,20,3.621,22,0.692,23,0.328,24,0.02,25,0.602,32,0.629,46,3.158,47,2.518,56,0.198,75,0.316,78,1.285,79,0.647,100,2.368,104,0.871,107,0.795,158,1.57,180,1.38,202,2.279,242,0.015,243,0.015,259,1.159,264,1.028,268,1.426,276,1.317,325,1.453,560,2.11,582,2.368,584,2.11,591,2.936,594,1.65,596,2.11,608,2.233,625,2.222,634,3.009,649,2.237,675,1.894,676,1.915,712,2.368,896,4.583,1001,2.769,1028,2.233,1040,1.894,1060,3.881,1070,3.714,1079,3.104,1128,3.104,1139,5.168,1140,4.167,1141,6.022,1142,6.022,1143,6.022,1144,5.168,1145,4.856,1146,6.022,1147,4.856,1148,4.856,1149,4.856,1150,6.022,1151,4.856,1152,5.168,1153,4.856,1154,5.168,1155,2.879,1156,6.546,1157,4.605,1158,4.856,1159,4.856,1160,4.605,1161,5.873,1162,4.167,1163,4.167,1164,6.022,1165,2.518,1166,3.714,1167,3.375,1168,3.375]],["title/components/DirectMessagesComponent.html",[26,0.263,509,1.005]],["body/components/DirectMessagesComponent.html",[3,0.104,4,0.104,5,0.104,7,1.194,11,0.995,14,0.668,16,0.121,17,0.56,18,0.368,22,0.398,23,0.306,24,0.02,25,0.589,26,0.365,28,2.566,29,3.023,30,1.542,32,0.385,33,1.468,34,0.668,46,2.696,47,1.543,50,0.776,51,0.703,54,3.32,55,1.646,56,0.121,59,0.56,60,0.725,65,1.786,66,1.614,67,1.022,68,1.022,69,1.107,70,1.022,71,1.022,73,1.309,75,0.194,76,0.815,77,1.309,79,0.514,88,0.739,91,1.074,92,0.703,99,1.629,103,1.293,104,0.873,106,0.917,107,0.708,116,1.78,118,1.693,125,2.394,129,0.923,158,0.776,176,1.543,180,1.308,187,1.034,191,2.566,199,3.007,242,0.011,243,0.011,244,0.776,245,1.128,246,0.857,247,1.102,248,0.857,249,0.857,252,1.765,256,0.857,259,0.833,262,2.554,264,1.054,268,0.877,276,1.263,284,2.394,296,1.534,297,1.46,302,1.543,328,1.765,349,1.161,353,1.688,355,2.559,357,1.368,358,2.307,359,2.608,360,2.097,361,1.988,362,2.183,363,1.293,364,1.128,365,1.646,367,2.446,368,2.183,369,2.42,370,2.634,371,2.944,372,2.432,373,2.394,375,2.394,376,1.161,377,2.319,378,1.988,379,2.243,380,1.688,381,1.224,383,2.215,384,1.78,385,1.78,386,2.42,387,2.446,388,1.78,389,1.88,391,2.097,392,1.161,393,1.368,394,1.368,395,1.646,396,1.646,397,1.646,398,1.368,399,1.646,400,1.368,401,1.646,402,1.988,404,1.368,407,2.097,408,2.097,409,2.643,413,1.293,414,1.161,416,1.903,418,2.446,427,1.989,428,1.047,429,2.215,430,2.584,431,3.007,433,2.486,434,1.989,435,1.368,437,1.368,439,1.543,447,1.989,448,1.543,449,1.451,453,1.646,464,1.88,468,2.243,469,2.394,470,1.646,472,2.243,473,1.293,481,1.293,482,1.765,486,0.857,487,1.186,488,1.246,489,0.857,490,1.611,491,0.857,492,1.889,493,0.857,494,0.815,495,0.857,496,0.815,497,1.618,498,0.857,499,0.857,500,0.857,501,0.815,502,0.857,503,0.857,504,0.857,505,0.739,506,1.246,507,0.857,508,0.857,509,1.534,510,1.798,511,1.246,512,0.857,513,0.815,514,0.815,515,0.857,516,0.815,517,0.857,518,0.815,519,0.815,520,0.857,521,0.815,522,0.815,523,1.246,524,0.815,525,0.857,526,0.857,527,0.857,528,0.776,529,0.857,530,1.534,531,0.815,532,0.815,533,0.815,534,0.857,535,0.815,536,0.776,537,0.857,538,0.815,539,0.857,540,0.857,541,0.776,542,0.776,543,0.857,544,0.857,545,0.857,546,0.857,547,0.857,548,0.603,549,0.857,550,0.857,551,0.815,552,0.815,553,0.857,554,0.815,555,0.815,556,0.857,557,0.857,558,0.857,571,1.293,603,1.78,625,1.693,630,3.32,649,1.376,664,2.068,676,1.621,700,3.096,706,2.766,717,2.729,740,1.688,856,1.161,1022,2.276,1069,4.804,1169,7.254,1170,7.254,1171,2.976,1172,5.099,1173,4.327,1174,5.099,1175,5.099,1176,4.376,1177,5.099,1178,5.598,1179,5.598,1180,5.598,1181,4.327,1182,5.598,1183,5.598,1184,4.804,1185,3.007,1186,4.376,1187,4.327,1188,5.099,1189,5.099,1190,4.327,1191,2.976,1192,5.099,1193,2.976,1194,2.976,1195,2.976,1196,2.976,1197,4.327,1198,2.976,1199,2.976,1200,2.976,1201,2.976,1202,3.89,1203,2.976,1204,2.976,1205,2.976,1206,2.976,1207,2.976,1208,3.967,1209,2.554,1210,2.976,1211,2.976,1212,4.327,1213,4.327,1214,4.327,1215,4.327,1216,3.309,1217,4.327,1218,3.007,1219,2.976,1220,5.099,1221,2.976,1222,2.554,1223,2.976,1224,2.976,1225,2.976,1226,4.376,1227,5.598,1228,4.327,1229,4.327,1230,2.976,1231,2.976,1232,2.976,1233,2.554,1234,2.976,1235,2.976,1236,3.713,1237,2.976,1238,4.327,1239,1.522,1240,2.643,1241,2.566,1242,2.554,1243,2.554,1244,2.554,1245,2.554,1246,2.976,1247,2.976,1248,3.309,1249,3.309,1250,2.566,1251,2.976,1252,2.554,1253,2.554,1254,1.903]],["title/interfaces/EditState.html",[0,0.634,1255,3.148]],["body/interfaces/EditState.html",[0,0.902,2,1.93,3,0.182,4,0.182,5,0.182,16,0.212,17,0.814,22,0.66,23,0.315,24,0.02,56,0.292,69,1.168,99,1.723,242,0.016,243,0.016,325,1.478,603,2.23,642,1.615,716,4.324,745,4.324,835,3.333,836,3.333,841,2.596,1255,5.796,1256,5.214,1257,4.789,1258,5.214,1259,6.289,1260,6.754,1261,6.289,1262,5.214,1263,6.754,1264,5.489,1265,5.214,1266,5.214,1267,6.754,1268,6.754,1269,4.474,1270,5.214]],["title/interfaces/EmojiContext.html",[0,0.634,1271,3.148]],["body/interfaces/EmojiContext.html",[0,0.807,2,1.728,3,0.163,4,0.163,5,0.163,11,1.561,15,3.557,16,0.19,17,0.761,22,0.681,23,0.3,24,0.02,56,0.289,59,0.874,78,0.996,83,2.985,99,1.279,106,0.833,129,1.254,158,1.532,180,1.299,242,0.015,243,0.015,325,0.946,346,1.692,625,1.777,649,2.145,675,2.291,676,1.868,691,2.42,717,3.29,737,3.498,738,3.498,740,1.821,835,2.985,836,2.985,841,2.574,864,5.042,886,2.932,1001,2.701,1012,3.245,1264,4.493,1271,6.092,1272,4.669,1273,4.669,1274,3.245,1275,4.007,1276,5.876,1277,4.669,1278,4.669,1279,7.099,1280,7.099,1281,5.876,1282,5.042,1283,5.876,1284,5.876,1285,6.748,1286,5.968,1287,5.876,1288,5.876,1289,5.16,1290,5.876,1291,6.748,1292,4.669,1293,2.985,1294,6.43,1295,5.968,1296,4.669,1297,5.876,1298,4.669,1299,4.669,1300,4.669,1301,3.245,1302,4.669,1303,4.669,1304,4.669,1305,4.493,1306,4.669,1307,4.669,1308,4.669,1309,4.669,1310,4.669,1311,4.007,1312,4.669,1313,4.669]],["title/interfaces/FirestoreMessageData.html",[0,0.634,1110,2.175]],["body/interfaces/FirestoreMessageData.html",[0,1.218,2,1.953,3,0.184,4,0.184,5,0.184,16,0.215,17,0.82,18,0.538,19,2.014,20,2.918,22,0.714,23,0.336,24,0.02,56,0.293,78,1.126,242,0.016,243,0.016,364,1.907,603,2.371,642,1.126,721,3.373,731,2.425,739,1.677,763,2.344,767,2.752,775,2.647,785,2.918,800,2.752,829,3.504,856,2.47,858,2.912,863,3.504,865,3.128,868,3.504,870,3.755,871,3.309,872,3.373,886,2.292,887,2.918,888,3.128,1093,3.373,1094,3.373,1095,3.666,1096,3.666,1097,3.128,1098,2.918,1099,2.918,1100,2.735,1101,3.666,1102,3.666,1103,3.666,1104,3.666,1105,2.735,1106,3.666,1107,3.666,1108,3.666,1109,4.402,1110,3.755,1111,3.128,1112,3.373]],["title/components/FooterComponent.html",[26,0.263,516,1.005]],["body/components/FooterComponent.html",[3,0.17,4,0.17,5,0.17,7,1.26,14,1.091,24,0.019,25,0.554,26,0.469,32,0.629,50,1.267,51,1.147,56,0.198,59,0.629,60,0.78,65,1.838,66,1.661,67,1.422,68,1.422,69,1.042,70,1.422,71,1.422,75,0.317,76,1.332,79,0.554,88,1.206,92,1.147,104,0.591,187,1.221,242,0.015,243,0.015,244,1.267,245,1.571,246,1.399,248,1.399,249,1.399,256,1.399,486,1.399,487,1.651,488,1.735,489,1.399,490,1.971,491,1.399,492,2.115,493,1.399,494,1.332,495,1.399,496,1.332,497,1.267,498,1.399,499,1.399,500,1.399,501,1.332,502,1.399,503,1.399,504,1.399,505,1.206,506,1.735,507,1.399,508,1.399,509,1.332,510,1.332,511,1.735,512,1.399,513,1.332,514,1.332,515,1.399,516,1.876,517,1.399,518,1.332,519,1.332,520,1.399,521,1.332,522,1.332,523,1.735,524,1.332,525,1.399,526,1.399,527,1.399,528,1.267,529,1.399,530,1.332,531,1.332,532,1.332,533,1.332,534,1.399,535,1.332,536,1.267,537,1.399,538,1.332,539,1.399,540,1.399,541,1.267,542,1.267,543,1.399,544,1.399,545,1.399,546,1.399,547,1.399,548,0.985,549,1.399,550,1.399,551,1.332,552,1.332,553,1.399,554,1.332,555,1.332,556,1.399,557,1.399,558,1.399,571,2.112,581,5.619,1314,4.86,1315,5.171,1316,6.025,1317,3.852,1318,6.025,1319,4.608,1320,5.171]],["title/components/HeaderComponent.html",[26,0.263,518,1.005]],["body/components/HeaderComponent.html",[3,0.131,4,0.131,5,0.131,7,1.112,14,0.842,16,0.153,17,0.659,18,0.319,23,0.237,24,0.02,25,0.57,26,0.414,27,2.34,30,1.748,32,0.485,33,1.664,34,0.842,50,0.978,51,0.885,56,0.153,59,0.485,60,0.659,65,1.813,66,1.639,67,1.202,68,1.202,69,1.072,70,1.202,71,1.202,73,1.54,75,0.244,76,1.027,77,1.54,79,0.531,88,0.93,92,0.885,99,1.395,104,0.456,106,0.748,107,0.614,118,1.875,129,1.426,168,4.419,187,1.032,204,2.212,242,0.013,243,0.013,244,0.978,245,1.327,246,1.079,247,1.388,248,1.079,249,1.079,256,1.079,259,0.98,264,0.947,268,0.76,276,0.98,296,1.395,297,1.327,342,1.828,346,1.664,349,1.462,353,2.666,355,2.527,358,1.79,359,2.606,360,2.094,361,1.985,362,2.417,363,1.629,364,1.507,367,2.094,368,1.462,369,2.606,370,2.094,371,2.657,372,2.904,373,2.074,374,2.85,376,1.462,377,2.666,378,2.254,380,2.254,381,1.542,383,2.212,384,1.542,385,1.542,386,2.527,387,1.542,388,2.094,389,1.629,390,1.724,391,1.542,392,1.462,402,2.527,405,2.34,406,1.828,407,2.377,408,2.377,411,2.816,412,2.223,413,1.629,414,1.985,429,2.511,433,1.828,434,2.34,435,1.724,439,1.944,446,2.867,447,2.34,448,1.944,449,1.828,452,1.944,464,2.511,472,1.944,473,2.212,480,2.816,481,1.629,486,1.079,487,1.395,488,1.465,489,1.079,490,1.784,491,1.079,492,2.002,493,1.079,494,1.027,495,1.079,496,1.027,497,0.978,498,1.079,499,1.079,500,1.079,501,1.027,502,1.079,503,1.079,504,1.079,505,0.93,506,1.465,507,1.079,508,1.079,509,1.027,510,1.027,511,1.465,512,1.079,513,1.027,514,1.027,515,1.079,516,1.027,517,1.079,518,1.698,519,1.027,520,1.079,521,1.027,522,1.027,523,1.465,524,1.027,525,1.079,526,1.079,527,1.079,528,0.978,529,1.079,530,1.027,531,1.027,532,1.027,533,1.027,534,1.079,535,1.027,536,0.978,537,1.079,538,1.027,539,1.079,540,1.079,541,0.978,542,0.978,543,1.079,544,1.079,545,1.079,546,1.079,547,1.079,548,0.76,549,1.079,550,1.079,551,1.027,552,1.027,553,1.079,554,1.027,555,1.027,556,1.079,557,1.079,558,1.079,569,3.675,571,1.629,603,1.192,630,3.465,642,1.383,695,3.585,696,2.397,703,3.426,969,3.893,994,2.639,996,3.217,1006,3.217,1007,3.217,1008,3.217,1009,3.217,1040,1.462,1321,3.749,1322,5.09,1323,5.779,1324,5.09,1325,5.779,1326,6.198,1327,4.368,1328,5.779,1329,2.867,1330,5.09,1331,3.749,1332,3.749,1333,3.749,1334,3.749,1335,5.09,1336,3.749,1337,3.749,1338,5.09,1339,3.254,1340,3.537,1341,3.217,1342,4.368,1343,3.962,1344,6.198,1345,3.749,1346,2.606,1347,3.749,1348,2.223,1349,2.867,1350,5.562,1351,5.09,1352,3.749,1353,5.09,1354,3.749,1355,5.09,1356,5.09,1357,3.749,1358,3.749,1359,3.749,1360,3.749,1361,3.749,1362,3.749,1363,3.749]],["title/components/ImprintComponent.html",[26,0.263,519,1.005]],["body/components/ImprintComponent.html",[3,0.157,4,0.157,5,0.157,7,1.215,14,1.008,16,0.183,18,0.382,23,0.209,24,0.02,25,0.611,26,0.452,30,1.91,32,0.582,34,1.008,50,1.171,51,1.06,56,0.183,59,0.582,60,0.742,65,1.831,66,1.655,67,1.354,68,1.354,69,0.992,70,1.354,71,1.354,75,0.293,76,1.231,77,1.734,79,0.58,88,1.115,92,1.06,104,0.546,106,0.818,107,0.735,118,2.013,187,1.162,242,0.015,243,0.015,244,1.171,245,1.495,246,1.293,248,1.293,249,1.293,256,1.293,259,1.103,264,0.922,268,0.911,276,1.103,486,1.293,487,1.571,488,1.651,489,1.293,490,1.915,491,1.293,492,2.082,493,1.293,494,1.231,495,1.293,496,1.231,497,1.171,498,1.293,499,1.293,500,1.293,501,1.231,502,1.293,503,1.293,504,1.293,505,1.115,506,1.651,507,1.293,508,1.293,509,1.231,510,1.231,511,1.651,512,1.293,513,1.231,514,1.231,515,1.293,516,1.73,517,1.293,518,1.73,519,1.823,520,1.293,521,1.231,522,1.231,523,1.651,524,1.231,525,1.293,526,1.293,527,1.293,528,1.171,529,1.293,530,1.231,531,1.231,532,1.231,533,1.231,534,1.293,535,1.231,536,1.171,537,1.293,538,1.231,539,1.293,540,1.293,541,1.171,542,1.171,543,1.293,544,1.293,545,1.293,546,1.293,547,1.293,548,0.911,549,1.293,550,1.293,551,1.231,552,1.231,553,1.293,554,1.231,555,1.231,556,1.293,557,1.293,558,1.293,574,2.485,575,2.485,691,2.972,692,3.399,1040,1.752,1289,4.385,1317,3.665,1319,4.385,1364,4.492,1365,5.733,1366,5.733,1367,5.733,1368,5.71,1369,3.855,1370,6.032,1371,4.492,1372,4.492,1373,4.492,1374,3.855,1375,3.855,1376,4.92,1377,4.92,1378,5.733,1379,5.733,1380,4.92,1381,4.92,1382,4.92,1383,4.92,1384,4.92,1385,4.92,1386,4.92,1387,4.92,1388,5.733,1389,4.492,1390,5.733,1391,5.733,1392,5.733,1393,4.492]],["title/components/InnerChannelComponent.html",[26,0.263,521,1.005]],["body/components/InnerChannelComponent.html",[3,0.078,4,0.078,5,0.078,7,1.354,10,0.647,11,1.864,14,1.389,16,0.091,17,0.453,18,0.495,19,1.113,22,0.65,23,0.316,24,0.02,25,0.553,26,0.308,28,2.076,29,2.55,30,1.301,32,0.291,33,1.238,34,0.504,39,2.912,42,0.976,46,2.53,47,1.165,48,3.423,49,1.243,50,0.586,51,1.422,53,1.718,56,0.091,59,0.78,60,0.975,65,1.745,66,1.577,67,1.316,68,0.827,69,0.91,70,0.827,71,0.827,73,1.059,75,0.146,76,0.616,77,1.059,78,1.036,79,0.659,81,2.433,84,1.937,88,0.558,91,1.624,92,1.243,97,2.433,99,1.442,104,0.832,106,0.801,107,0.795,109,1.368,110,1.095,115,2.076,116,2.602,118,1.469,129,1.397,151,2.238,152,3.105,158,0.586,180,1.12,187,0.985,200,2.433,202,1.544,211,2.433,215,2.238,223,1.436,233,2.677,241,2.879,242,0.009,243,0.009,244,0.586,245,1.266,246,0.647,247,0.832,248,0.647,249,0.647,256,0.647,259,0.674,264,1.028,268,1.18,274,2.433,276,1.26,278,1.937,284,3.621,290,2.433,291,2.677,293,2.677,296,1.528,297,1.454,299,2.238,302,1.165,321,1.332,325,1.13,334,2.677,346,1.008,349,0.876,353,1.365,355,2.348,357,1.61,358,2.176,359,2.553,360,2.294,361,2.175,362,2.348,363,1.869,364,1.122,365,1.243,366,1.332,367,2.477,368,2.053,369,2.413,370,2.729,371,3.05,372,2.423,373,2.686,374,2.233,376,0.876,377,2.175,378,2.053,379,3.208,380,0.876,381,0.924,383,2.688,384,2.294,385,2.294,386,1.365,387,1.44,388,0.924,389,1.869,390,1.033,391,2.294,392,1.677,393,2.42,394,2.42,395,2.912,396,2.912,397,2.912,398,2.42,399,2.912,400,2.42,401,2.912,402,1.365,403,2.233,407,1.769,408,1.769,413,0.976,414,1.365,416,2.238,418,2.602,427,1.033,428,0.79,429,2.423,430,2.53,431,1.562,433,1.095,437,1.033,447,2.233,453,2.379,454,1.928,455,1.928,464,2.423,481,0.976,486,0.647,487,0.959,488,1.008,489,0.647,490,1.398,491,0.647,492,1.734,493,0.647,494,0.616,495,0.647,496,0.616,497,0.586,498,0.647,499,0.647,500,0.647,501,1.331,502,0.647,503,0.647,504,0.647,505,0.558,506,1.008,507,0.647,508,0.647,509,0.616,510,0.616,511,1.008,512,0.647,513,0.959,514,1.695,515,0.647,516,0.616,517,0.647,518,0.616,519,0.616,520,0.647,521,1.331,522,1.65,523,1.008,524,0.616,525,0.647,526,0.647,527,0.647,528,0.586,529,0.647,530,0.616,531,0.616,532,0.616,533,0.616,534,0.647,535,0.616,536,0.586,537,0.647,538,0.616,539,0.647,540,0.647,541,0.586,542,0.586,543,0.647,544,0.647,545,0.647,546,0.647,547,0.647,548,0.456,549,0.647,550,0.647,551,0.616,552,0.616,553,0.647,554,0.616,555,1.179,556,1.238,557,0.647,558,0.647,599,3.29,603,1.113,625,1.687,635,1.937,640,2.677,642,1.036,649,1.544,656,3.005,675,0.876,676,1.368,695,1.937,699,2.912,711,1.243,712,2.719,763,1.592,800,2.617,831,2.238,832,2.879,851,2.677,862,1.718,867,3.005,897,1.928,906,3.691,907,3.691,913,1.815,929,3.105,930,2.879,935,3.005,942,3.714,961,3.005,967,1.928,1022,1.718,1055,3.005,1060,2.879,1066,3.005,1070,2.677,1073,4.453,1176,3.691,1184,4.168,1185,2.433,1236,3.005,1239,1.851,1240,2.23,1241,2.55,1242,1.928,1243,1.928,1244,1.928,1245,1.928,1254,1.436,1293,3.105,1341,1.928,1350,4.168,1394,7.073,1395,7.073,1396,2.247,1397,4.301,1398,4.301,1399,3.501,1400,4.301,1401,3.691,1402,4.301,1403,4.301,1404,4.856,1405,3.501,1406,4.301,1407,4.856,1408,3.501,1409,4.301,1410,2.247,1411,4.301,1412,4.856,1413,3.501,1414,1.937,1415,2.433,1416,3.501,1417,3.005,1418,3.501,1419,2.247,1420,3.501,1421,2.247,1422,4.856,1423,2.247,1424,3.501,1425,3.501,1426,3.501,1427,2.247,1428,2.076,1429,3.501,1430,4.856,1431,3.501,1432,3.501,1433,2.247,1434,2.247,1435,2.247,1436,2.247,1437,3.005,1438,4.856,1439,3.005,1440,2.247,1441,2.247,1442,3.501,1443,3.501,1444,3.501,1445,2.247,1446,3.501,1447,3.501,1448,3.501,1449,2.247,1450,2.677,1451,3.501,1452,2.433,1453,3.501,1454,2.247,1455,3.501,1456,2.247,1457,3.501,1458,3.501,1459,2.247,1460,3.501,1461,2.247,1462,4.301,1463,3.501,1464,2.247,1465,3.501,1466,2.247,1467,3.501,1468,3.501,1469,2.247,1470,3.005,1471,2.677,1472,2.247,1473,3.501,1474,2.247,1475,3.501,1476,2.247,1477,3.501,1478,2.247,1479,2.247,1480,2.247,1481,2.247,1482,2.247,1483,2.247,1484,2.247,1485,1.928,1486,2.247,1487,2.247,1488,2.247,1489,2.247,1490,2.247,1491,2.247,1492,3.501,1493,2.247,1494,2.247,1495,2.247,1496,1.928,1497,2.247,1498,2.247,1499,2.247,1500,2.247,1501,2.247,1502,2.247,1503,2.247,1504,2.247,1505,2.247,1506,3.501,1507,5.264,1508,2.247,1509,2.247,1510,2.433,1511,3.501,1512,3.501,1513,3.501,1514,3.501,1515,2.247]],["title/components/IntroComponent.html",[26,0.263,524,1.005]],["body/components/IntroComponent.html",[3,0.164,4,0.164,5,0.164,7,1.239,14,1.052,16,0.191,18,0.398,23,0.218,24,0.02,25,0.592,26,0.461,30,1.948,32,0.606,33,1.854,34,1.052,50,1.221,51,1.106,56,0.191,59,0.606,60,0.762,65,1.834,66,1.658,67,1.39,68,1.39,69,1.018,70,1.39,71,1.39,75,0.305,76,1.283,77,1.781,79,0.592,88,1.162,92,1.106,104,0.569,106,0.762,107,0.767,118,2.044,176,2.428,187,1.194,242,0.015,243,0.015,244,1.221,245,1.535,246,1.348,248,1.348,249,1.348,256,1.348,259,1.133,264,0.86,268,0.95,276,0.901,486,1.348,487,1.613,488,1.695,489,1.348,490,1.945,491,1.348,492,2.1,493,1.348,494,1.283,495,1.348,496,1.283,497,1.221,498,1.348,499,1.348,500,1.348,501,1.283,502,1.348,503,1.348,504,1.348,505,1.162,506,1.695,507,1.348,508,1.348,509,1.283,510,1.283,511,1.695,512,1.348,513,1.283,514,1.283,515,1.348,516,1.283,517,1.348,518,1.283,519,1.283,520,1.348,521,1.283,522,1.283,523,1.695,524,1.851,525,1.348,526,1.348,527,1.348,528,1.221,529,1.348,530,1.283,531,1.283,532,1.283,533,1.283,534,1.348,535,1.283,536,1.221,537,1.348,538,1.283,539,1.348,540,1.348,541,1.221,542,1.221,543,1.348,544,1.348,545,1.348,546,1.348,547,1.348,548,0.95,549,1.348,550,1.348,551,1.283,552,1.283,553,1.348,554,1.283,555,1.283,556,1.348,557,1.348,558,1.348,569,3.491,571,2.035,630,3.683,1040,1.827,1317,3.764,1329,3.582,1516,4.684,1517,5.888,1518,5.888,1519,5.888,1520,4.684,1521,4.684,1522,3.582,1523,4.684]],["title/interfaces/Member.html",[0,0.634,187,0.744]],["body/interfaces/Member.html",[0,0.994,2,2.127,3,0.201,4,0.201,5,0.201,16,0.234,17,0.863,18,0.566,22,0.706,23,0.337,24,0.019,56,0.234,78,1.545,79,0.665,187,1.35,242,0.017,243,0.017,619,3.752,858,3.328,1524,5.746]],["title/components/MemberListDialogComponent.html",[26,0.263,528,0.957]],["body/components/MemberListDialogComponent.html",[0,0.601,3,0.078,4,0.078,5,0.078,7,1.289,9,1.153,10,1.391,11,2.319,12,3.198,13,4.05,14,1.635,15,3.32,16,0.091,17,0.45,18,0.597,19,1.536,22,0.393,23,0.312,24,0.02,25,0.533,26,0.375,27,1.965,28,3.106,29,3.657,30,1.293,31,0.967,32,0.288,33,1.23,34,0.499,37,2.732,38,1.422,40,2.879,41,2.879,42,0.967,48,3.612,49,1.231,50,0.58,51,1.009,54,3.007,55,1.231,56,0.141,59,0.751,60,0.857,64,2.06,65,1.743,66,1.576,67,1.14,68,0.82,69,0.739,70,0.82,71,0.82,72,1.801,73,1.051,74,2.216,75,0.145,76,0.61,77,1.051,78,1.118,79,0.533,81,4.171,82,2.414,84,3.32,88,0.552,92,1.778,102,2.06,103,1.509,104,0.767,105,3.269,106,0.867,107,0.791,109,1.765,110,2.707,112,1.153,114,2.879,115,2.06,116,1.987,117,1.922,118,1.461,119,1.231,120,2.221,121,2.221,124,2.221,125,2.898,129,1.281,131,3.269,132,1.701,141,1.701,158,0.58,180,0.428,187,1.512,191,2.534,194,1.922,196,2.657,199,1.546,202,1.536,203,2.553,204,0.967,212,1.701,215,2.221,228,2.672,229,3.694,230,2.504,231,3.269,241,2.864,242,0.009,243,0.009,244,0.58,245,0.906,246,0.64,247,0.823,248,0.64,249,0.64,252,1.319,256,0.64,259,0.669,260,2.657,264,1.013,268,0.979,269,2.414,276,1.155,295,4.976,296,0.61,297,0.58,302,1.801,321,1.319,325,0.451,328,1.319,334,2.657,338,2.06,346,1,349,0.868,350,2.06,351,2.221,352,1.546,353,2.262,354,1.153,355,2.664,357,1.597,358,2.169,359,2.46,360,1.987,361,1.884,362,2.043,363,1.509,364,1.26,365,1.922,366,1.319,367,2.469,368,2.506,369,2.723,370,2.723,371,3.043,372,1.509,373,1.922,374,1.597,375,1.922,376,2.043,377,2.341,378,2.043,379,2.216,380,1.667,381,0.915,382,1.319,383,2.608,384,1.429,385,1.429,386,2.581,387,2.644,388,1.987,389,0.967,390,1.023,391,1.758,392,1.884,393,1.597,394,1.597,395,1.922,396,1.922,397,1.922,398,1.597,399,1.922,400,1.597,401,1.922,402,2.043,403,1.023,404,2.955,405,2.221,406,1.085,407,1.429,408,1.429,409,2.504,413,2.099,414,1.667,415,2.657,418,2.284,424,2.221,425,1.319,426,1.422,427,2.667,428,1.698,429,2.099,430,2.413,432,2.414,433,1.694,434,1.597,435,1.023,437,1.023,439,1.153,447,1.023,448,1.153,449,1.694,450,2.414,452,1.153,453,1.922,462,1.546,463,1.546,464,2.276,466,1.801,467,1.546,468,1.801,469,1.231,470,1.231,471,1.546,472,1.801,473,1.509,481,1.509,482,1.319,485,1.231,486,0.64,487,0.952,488,1,489,0.64,490,1.391,491,0.64,492,1.728,493,0.64,494,0.61,495,0.64,496,0.61,497,0.58,498,0.64,499,0.64,500,0.64,501,0.61,502,0.64,503,0.64,504,0.64,505,1.44,506,1,507,0.64,508,0.64,509,0.61,510,0.61,511,1,512,0.64,513,0.61,514,0.61,515,0.64,516,0.61,517,0.64,518,0.61,519,0.61,520,0.64,521,0.61,522,0.61,523,1,524,0.61,525,0.64,526,0.64,527,0.64,528,1.26,529,0.64,530,1.521,531,0.61,532,0.61,533,0.61,534,0.64,535,0.61,536,0.58,537,0.64,538,0.61,539,0.64,540,0.64,541,0.58,542,0.58,543,0.64,544,0.64,545,0.64,546,0.64,547,0.64,548,0.451,549,0.64,550,0.64,551,0.61,552,0.61,553,0.64,554,0.61,555,0.61,556,0.64,557,0.64,558,0.64,646,3.088,665,2.553,700,1.922,800,1.509,811,1.801,841,0.823,856,1.355,900,3.209,913,2.216,916,2.657,920,1.922,921,1.922,922,2.657,923,2.221,930,2.06,938,2.657,944,1.909,945,2.981,994,1.153,1091,1.546,1185,2.414,1239,1.953,1240,1.801,1248,1.701,1249,1.701,1250,2.534,1252,1.909,1253,1.909,1254,1.422,1293,3.55,1327,2.981,1348,2.06,1414,1.922,1415,2.414,1428,2.06,1452,3.859,1525,5.34,1526,5.34,1527,4.145,1528,3.474,1529,3.474,1530,4.145,1531,3.668,1532,3.668,1533,3.668,1534,2.225,1535,4.247,1536,2.414,1537,2.981,1538,2.225,1539,2.981,1540,2.225,1541,2.981,1542,2.981,1543,2.225,1544,4.765,1545,2.225,1546,2.981,1547,2.981,1548,3.694,1549,2.225,1550,2.657,1551,2.225,1552,3.357,1553,3.55,1554,2.981,1555,2.225,1556,2.225,1557,2.657,1558,2.225,1559,2.225,1560,2.657,1561,2.981,1562,2.981,1563,2.981,1564,2.225,1565,2.225,1566,2.981,1567,2.225,1568,2.981,1569,2.225,1570,2.414,1571,2.225,1572,1.909,1573,1.546,1574,1.909,1575,1.153,1576,1.909,1577,1.701,1578,1.909,1579,1.909,1580,1.909,1581,1.422,1582,1.701,1583,1.909,1584,1.909,1585,1.909,1586,1.909,1587,1.909,1588,2.657,1589,1.546,1590,1.909,1591,1.909,1592,1.909,1593,1.909,1594,1.909,1595,2.225,1596,2.225,1597,2.225,1598,2.225,1599,2.225,1600,1.909,1601,2.225,1602,2.225,1603,2.225,1604,2.225]],["title/interfaces/MemberListDialogData.html",[0,0.634,1535,2.805]],["body/interfaces/MemberListDialogData.html",[0,1.014,2,1.427,3,0.135,4,0.135,5,0.135,7,1.365,9,1.999,10,1.11,11,2.371,12,3.392,13,4.205,14,1.646,15,3.469,16,0.157,17,0.672,18,0.614,19,2.08,22,0.576,23,0.242,24,0.02,25,0.619,26,0.42,27,2.695,28,3.88,29,3.88,30,1.569,31,1.675,32,0.499,33,1.493,34,0.866,37,3.316,38,2.465,40,3.039,41,3.039,42,1.675,48,3.809,49,2.133,51,0.91,54,3.039,55,2.133,56,0.211,59,0.847,60,0.873,64,2.286,65,0.91,66,0.823,67,0.91,68,0.91,69,0.897,70,0.91,71,0.91,72,1.999,73,1.166,74,1.999,75,0.251,77,1.166,78,1.251,79,0.354,81,4.358,82,2.68,84,2.87,92,1.591,102,2.286,103,2.254,104,0.795,105,2.949,106,0.873,107,0.849,109,1.649,110,2.529,112,1.999,114,3.251,115,2.286,117,2.133,118,1.166,119,2.133,120,3.316,121,3.316,124,3.316,125,3.62,131,4.483,132,2.949,141,2.949,158,1.006,180,0.742,187,1.517,191,2.286,194,2.133,196,2.949,199,2.68,202,1.649,203,2.695,212,2.949,215,2.465,228,2.133,229,4.795,230,3.251,231,4.483,241,2.286,242,0.013,243,0.013,295,5.025,321,2.286,325,0.782,328,2.286,338,2.286,358,1.356,432,2.68,450,2.68,468,1.999,505,1.455,528,1.006,530,1.057,646,3.316,665,3.098,800,1.675,900,3.243,913,1.999,916,2.949,920,2.133,921,2.133,922,2.949,923,2.465,930,2.286,938,2.949,1091,2.68,1239,2.061,1293,3.748,1414,2.133,1415,2.68,1428,2.286,1452,4.074,1525,2.949,1526,2.949,1527,3.309,1530,3.309,1531,3.309,1532,3.309,1533,3.309,1535,4.795,1536,2.68,1537,3.309,1539,3.309,1541,3.309,1542,3.309,1544,5.031,1546,3.309,1547,3.309,1548,3.967,1550,2.949,1552,3.605,1553,3.748,1554,3.309,1557,2.949,1560,2.949,1561,3.309,1562,3.309,1563,3.309,1566,3.309,1568,3.309,1570,2.68,1573,2.68,1574,3.309,1575,1.999,1576,3.309,1577,2.949,1578,3.309,1579,3.309,1580,3.309,1581,2.465,1582,2.949,1583,3.309,1584,3.309,1585,3.309,1586,3.309,1587,3.309,1588,3.967,1589,2.68,1590,3.309,1591,3.309,1592,3.309,1593,3.309,1594,3.309]],["title/components/MemberSectionDialogComponent.html",[26,0.263,531,1.005]],["body/components/MemberSectionDialogComponent.html",[3,0.119,4,0.119,5,0.119,7,1.408,9,1.765,10,1.581,11,2.419,14,1.686,16,0.139,17,0.617,18,0.405,23,0.31,24,0.02,25,0.575,26,0.393,28,2.823,29,3.257,31,1.479,32,0.441,33,1.581,34,0.764,35,2.525,36,1.327,40,3.364,41,1.765,42,1.479,50,0.888,51,1.478,56,0.139,59,0.617,60,0.617,65,1.802,66,1.629,67,1.124,68,1.124,69,0.824,70,1.124,71,1.124,72,2.469,73,1.441,74,2.847,75,0.222,76,0.933,79,0.612,82,3.31,88,0.845,91,1.182,92,1.532,104,0.414,106,0.77,107,0.974,109,2.063,110,3.053,112,2.469,117,2.634,125,1.883,129,1.016,187,1.515,189,4.087,191,3.527,203,2.735,204,1.479,226,2.469,228,3.291,230,2.469,242,0.012,243,0.012,244,0.888,245,1.242,246,0.98,247,1.26,248,0.98,249,0.98,256,0.98,259,0.916,261,4.087,264,0.973,268,0.965,276,0.916,284,3.291,290,3.31,296,0.933,297,0.888,302,1.765,349,1.327,350,2.823,351,3.044,352,2.366,353,2.142,355,1.857,357,2.189,358,1.931,359,2.442,360,1.4,361,1.327,362,1.327,364,0.888,367,1.959,368,1.857,369,2.442,370,2.259,371,2.525,376,2.142,377,1.857,378,1.327,380,1.327,384,1.4,385,1.4,386,2.597,387,2.669,388,1.4,391,1.4,392,1.327,402,2.142,403,2.189,404,2.983,405,3.124,406,1.659,407,1.959,408,1.959,413,2.069,414,1.327,418,1.4,424,3.044,426,2.176,427,1.565,428,1.197,430,2.585,433,1.659,434,1.565,435,1.565,449,2.322,462,2.366,463,2.366,467,2.366,471,2.366,473,1.479,486,0.98,487,1.305,488,1.371,489,0.98,490,1.713,491,0.98,492,1.956,493,0.98,494,0.933,495,0.98,496,0.933,497,0.888,498,0.98,499,0.98,500,0.98,501,0.933,502,0.98,503,0.98,504,0.98,505,0.845,506,1.371,507,0.98,508,0.98,509,0.933,510,0.933,511,1.371,512,0.98,513,0.933,514,0.933,515,0.98,516,0.933,517,0.98,518,0.933,519,0.933,520,0.98,521,0.933,522,0.933,523,1.371,524,0.933,525,0.98,526,0.98,527,0.98,528,0.888,529,0.98,530,0.933,531,1.778,532,2.057,533,0.933,534,0.98,535,0.933,536,0.888,537,0.98,538,0.933,539,0.98,540,0.98,541,0.888,542,0.888,543,0.98,544,0.98,545,0.98,546,0.98,547,0.98,548,0.69,549,0.98,550,0.98,551,0.933,552,0.933,553,0.98,554,0.933,555,0.933,556,0.98,557,0.98,558,0.98,653,2.823,665,2.525,700,2.634,800,2.069,832,3.257,901,5.105,911,2.366,913,3.084,994,1.765,1091,3.31,1185,3.31,1186,5.373,1239,1.674,1240,1.765,1254,2.176,1293,3.044,1437,4.087,1439,4.087,1452,4.135,1525,5.197,1526,5.197,1557,4.55,1605,3.31,1606,4.762,1607,4.762,1608,3.642,1609,4.762,1610,4.762,1611,4.55,1612,5.105,1613,3.404,1614,3.044,1615,4.762,1616,3.404,1617,4.762,1618,3.404,1619,3.404,1620,2.921,1621,2.921,1622,3.404]],["title/interfaces/Message.html",[0,0.634,739,1.166]],["body/interfaces/Message.html",[0,1.143,2,1.633,3,0.154,4,0.154,5,0.154,16,0.18,17,0.734,18,0.661,19,2.173,20,3.656,22,0.718,23,0.361,24,0.02,56,0.278,78,1.411,242,0.014,243,0.014,364,1.824,603,2.431,642,0.942,721,4.225,731,3.039,739,1.802,763,2.098,767,2.97,775,2.666,785,2.441,800,2.463,829,3.656,856,2.211,858,2.606,863,3.782,865,2.617,868,3.782,870,4.053,871,3.054,872,2.821,886,2.872,887,3.656,888,2.617,1093,2.821,1094,2.821,1095,3.067,1096,3.067,1097,3.919,1098,3.656,1099,3.656,1100,3.426,1101,4.594,1102,4.594,1103,4.594,1104,4.594,1105,3.426,1106,4.594,1107,4.594,1108,4.594,1109,4.751,1110,2.617,1111,2.617,1112,2.821]],["title/interfaces/MessageContent.html",[0,0.634,829,2.029]],["body/interfaces/MessageContent.html",[0,1.206,2,1.896,3,0.179,4,0.179,5,0.179,16,0.208,17,0.806,18,0.63,19,1.978,20,2.833,22,0.715,23,0.338,24,0.02,56,0.291,78,1.093,242,0.016,243,0.016,364,1.748,603,2.389,642,1.43,721,3.274,731,2.355,739,1.628,767,2.703,775,2.614,785,3.707,800,3.029,829,3.707,856,2.785,858,3.284,863,3.442,865,3.037,868,3.442,870,3.689,871,3.54,872,3.274,886,2.225,887,2.833,888,3.037,1093,3.274,1094,3.274,1095,3.56,1096,3.56,1097,3.037,1098,2.833,1099,2.833,1100,2.655,1101,3.56,1102,3.56,1103,3.56,1104,3.56,1105,2.655,1106,3.56,1107,3.56,1108,3.56,1109,4.964,1110,3.037,1111,3.037,1112,3.274]],["title/injectables/MessageCrudService.html",[594,1.005,1623,3.148]],["body/injectables/MessageCrudService.html",[3,0.127,4,0.127,5,0.127,11,2.307,16,0.148,18,0.608,19,1.943,22,0.693,23,0.353,24,0.02,25,0.608,32,0.469,56,0.148,59,0.469,60,0.966,75,0.236,78,1.539,79,0.657,104,0.929,106,0.644,107,0.593,158,0.945,180,1.388,202,2.103,242,0.013,243,0.013,259,0.957,264,1.045,268,1.45,269,3.457,276,1.363,325,1.462,364,0.945,548,1.543,560,1.575,567,4.248,582,1.767,583,2.519,584,2.161,585,2.149,591,2.98,594,1.363,596,1.575,608,1.667,625,2.181,634,2.945,642,1.412,649,2.194,675,1.414,676,1.943,739,1.806,740,2.498,763,1.841,829,2.752,830,2.005,863,2.005,865,2.149,868,2.005,870,2.949,886,2.161,887,2.005,888,2.149,1028,1.667,1037,2.005,1038,2.149,1040,1.414,1042,2.005,1076,2.772,1077,2.772,1079,3.18,1080,2.519,1099,3.873,1100,1.879,1105,1.879,1121,4.674,1125,3.804,1126,2.317,1127,4.898,1129,2.772,1130,3.907,1131,3.907,1133,2.772,1155,2.149,1157,4.343,1165,2.579,1167,2.519,1168,3.457,1274,3.947,1588,3.804,1623,4.269,1624,6.189,1625,3.625,1626,4.974,1627,4.269,1628,4.874,1629,4.974,1630,5.679,1631,3.804,1632,4.269,1633,3.804,1634,4.974,1635,3.625,1636,4.974,1637,3.625,1638,4.269,1639,3.625,1640,3.111,1641,3.625,1642,4.974,1643,3.625,1644,3.625,1645,3.625,1646,4.269,1647,3.625,1648,3.111,1649,3.625,1650,4.269,1651,3.625,1652,4.974,1653,3.625,1654,4.974,1655,3.625,1656,3.625,1657,3.111,1658,3.625,1659,3.625,1660,3.625,1661,3.625,1662,4.874,1663,4.269,1664,3.111,1665,2.772,1666,3.111,1667,3.111,1668,3.111,1669,3.111,1670,4.269,1671,3.625,1672,3.625,1673,3.625,1674,4.974,1675,3.625,1676,4.974,1677,3.625,1678,3.625,1679,4.674,1680,3.804,1681,3.111]],["title/injectables/MessageQueriesService.html",[594,1.005,1682,3.148]],["body/injectables/MessageQueriesService.html",[3,0.112,4,0.112,5,0.112,16,0.13,18,0.613,19,1.687,22,0.697,23,0.355,24,0.02,25,0.562,32,0.414,56,0.13,60,0.969,75,0.208,78,1.622,79,0.663,104,0.937,106,0.866,107,0.523,109,2.243,180,1.344,202,2.021,220,2.22,242,0.012,243,0.012,259,0.876,264,1.053,268,1.462,269,3.164,276,1.379,325,1.484,548,1.558,560,1.388,567,4.019,582,1.557,583,2.22,584,2.305,585,1.894,591,2.981,594,1.247,596,1.388,608,1.468,625,1.605,634,3.074,642,0.972,649,1.447,676,1.015,740,2.654,841,1.685,886,1.388,1028,1.468,1040,1.246,1079,3.392,1099,3.516,1100,3.528,1105,1.656,1126,2.042,1127,5.341,1129,2.443,1130,4.274,1131,4.274,1133,2.443,1140,2.741,1155,1.894,1157,4.057,1165,3.169,1167,3.687,1168,3.687,1274,3.687,1624,6.224,1627,3.907,1628,4.553,1631,4.057,1632,3.907,1638,3.907,1640,2.741,1646,2.741,1648,2.741,1650,3.907,1662,4.553,1663,4.963,1664,2.741,1665,4.675,1666,2.741,1667,2.741,1668,2.741,1669,2.741,1679,4.423,1680,4.86,1681,2.741,1682,3.907,1683,5.305,1684,5.305,1685,4.553,1686,4.553,1687,4.553,1688,5.305,1689,5.305,1690,4.553,1691,4.553,1692,3.194,1693,3.194,1694,3.194,1695,3.194,1696,3.194,1697,4.553,1698,3.194,1699,3.194,1700,3.194,1701,4.553,1702,3.194,1703,4.553,1704,3.194,1705,3.194,1706,3.194,1707,3.194,1708,4.86,1709,3.194,1710,3.194,1711,3.194,1712,4.553,1713,3.194,1714,3.194,1715,4.553,1716,3.194,1717,3.164,1718,5.305,1719,3.194,1720,5.305,1721,3.194,1722,3.194,1723,3.697,1724,3.194,1725,3.194,1726,3.194,1727,3.194,1728,3.194,1729,2.741,1730,3.194,1731,3.194,1732,2.443,1733,3.194]],["title/interfaces/MyState.html",[0,0.634,1734,3.148]],["body/interfaces/MyState.html",[0,0.825,2,1.766,3,0.167,4,0.167,5,0.167,7,1.146,10,1.374,19,1.517,22,0.597,24,0.02,25,0.439,56,0.3,59,0.618,60,0.618,78,1.018,79,0.547,104,0.58,106,0.938,129,1.271,158,1.245,176,2.474,180,1.25,242,0.015,243,0.015,325,1.419,346,1.87,364,1.245,514,1.779,548,0.967,642,1.018,691,3.526,739,2.302,775,2.323,786,3.808,811,3.088,831,3.051,841,2.709,851,4.556,862,4.967,1098,3.592,1301,4.514,1734,6.379,1735,4.772,1736,4.772,1737,5.957,1738,4.772,1739,4.772,1740,5.957,1741,4.772,1742,5.957,1743,4.772,1744,4.772,1745,5.957,1746,5.957,1747,5.957,1748,4.772,1749,4.772,1750,4.772,1751,4.772,1752,4.772,1753,5.957,1754,4.772,1755,4.772,1756,5.957,1757,4.772,1758,4.772,1759,4.772,1760,4.772,1761,4.772,1762,4.772,1763,4.772,1764,4.096,1765,4.772,1766,5.957,1767,4.772,1768,4.772,1769,4.772,1770,4.772,1771,4.772,1772,4.772,1773,4.772,1774,6.494,1775,4.772,1776,4.772,1777,5.957,1778,4.772,1779,4.772,1780,4.772,1781,5.957,1782,4.772,1783,5.957,1784,4.772,1785,6.494,1786,4.772,1787,4.772,1788,4.772,1789,4.772]],["title/components/NewPasswortComponent.html",[26,0.263,533,1.005]],["body/components/NewPasswortComponent.html",[3,0.077,4,0.077,5,0.077,7,0.816,10,0.991,12,2.489,14,0.494,16,0.14,17,0.446,18,0.293,22,0.565,23,0.269,24,0.02,25,0.578,26,0.373,27,2.656,30,1.283,32,0.285,33,1.221,34,0.494,36,1.343,50,0.574,51,0.519,56,0.09,59,0.774,60,0.446,65,1.741,66,1.574,67,0.813,68,0.813,69,0.901,70,0.813,71,0.813,73,1.041,75,0.143,76,0.603,77,1.041,79,0.441,88,0.546,91,1.191,92,0.519,95,2.393,99,1.428,104,0.727,106,0.446,107,0.564,114,1.785,116,1.416,118,1.452,129,1.179,158,0.574,168,2.633,173,2.041,176,1.14,180,0.816,187,0.698,204,1.496,217,2.633,225,2.041,242,0.009,243,0.009,244,0.574,245,0.898,246,0.633,247,0.814,248,0.633,249,0.633,254,2.393,256,0.633,259,0.663,264,0.918,268,1.212,276,1.064,292,2.633,296,1.428,297,1.559,325,1.056,342,2.694,346,1.221,349,0.858,353,2.914,354,1.14,355,2.887,357,1.011,358,2.031,359,2.658,360,2.528,361,1.872,362,2.539,363,1.843,364,1.252,367,1.975,368,2.155,369,2.658,370,2.273,372,0.956,374,2.656,376,2.155,377,2.7,378,2.499,380,2.253,381,0.905,382,1.304,383,1.496,384,1.416,385,1.416,386,2.575,387,2.144,388,1.416,389,1.843,390,1.011,391,1.745,392,1.655,393,1.011,394,1.011,398,1.011,400,1.011,402,2.452,403,2.749,404,2.207,405,1.583,406,1.072,407,2.459,408,2.376,409,1.14,411,3.195,412,2.515,413,1.496,414,1.655,418,2.459,425,3.425,427,1.011,428,0.773,429,2.784,430,2.401,434,1.583,435,1.011,437,2.891,438,1.406,439,1.14,441,2.515,442,2.201,443,1.406,444,1.406,445,1.406,447,2.396,448,1.14,452,1.14,457,1.406,464,3.008,470,1.217,472,1.14,473,1.843,480,1.905,481,2.264,482,1.304,485,1.217,486,0.633,487,0.943,488,0.991,489,0.633,490,1.382,491,0.633,492,1.721,493,0.633,494,0.603,495,0.633,496,0.603,497,1.722,498,0.633,499,0.633,500,0.633,501,0.603,502,0.633,503,0.633,504,0.633,505,0.546,506,0.991,507,0.633,508,0.633,509,0.603,510,0.603,511,0.991,512,0.633,513,0.603,514,0.603,515,0.633,516,1.315,517,0.633,518,1.315,519,0.603,520,0.633,521,0.603,522,0.603,523,0.991,524,0.603,525,0.633,526,0.633,527,0.633,528,0.574,529,0.633,530,0.603,531,0.603,532,0.603,533,1.315,534,0.633,535,0.603,536,1.559,537,0.633,538,0.603,539,0.633,540,0.633,541,0.574,542,0.574,543,0.633,544,0.633,545,0.633,546,0.633,547,0.633,548,0.446,549,0.633,550,0.633,551,0.603,552,0.603,553,0.633,554,0.603,555,0.603,556,0.633,557,0.633,558,0.633,571,1.496,574,1.217,575,1.217,588,5.499,603,1.657,613,2.846,617,4.271,618,4.37,624,4.957,625,1.283,629,4.472,630,3.322,632,4.119,634,2.541,635,1.905,636,2.393,642,1.367,645,3.671,653,2.041,664,1.528,665,2.396,669,3.641,670,1.887,675,0.858,676,0.699,695,2.883,696,1.406,698,1.528,699,3.057,703,1.304,704,2.393,705,1.528,706,2.712,739,2.07,856,2.032,858,2.396,898,2.955,915,2.201,920,1.905,921,1.905,929,2.201,930,2.041,940,2.955,941,2.955,980,1.406,988,4.393,994,1.14,1000,1.406,1001,3.183,1002,1.528,1239,1.492,1240,1.14,1241,1.304,1250,2.846,1340,2.393,1343,2.712,1346,1.528,1348,1.304,1510,2.949,1522,1.682,1570,2.393,1575,1.14,1581,2.712,1605,3.336,1608,2.633,1612,2.955,1614,2.201,1790,6.408,1791,2.199,1792,3.245,1793,3.245,1794,4.243,1795,3.443,1796,4.417,1797,4.243,1798,5.211,1799,3.985,1800,2.955,1801,3.671,1802,4.8,1803,2.199,1804,4.119,1805,4.472,1806,3.443,1807,2.955,1808,3.443,1809,3.443,1810,2.955,1811,2.199,1812,3.443,1813,2.633,1814,3.443,1815,2.955,1816,2.955,1817,4.119,1818,3.443,1819,2.199,1820,3.443,1821,3.443,1822,2.633,1823,2.199,1824,3.443,1825,2.955,1826,2.955,1827,4.119,1828,2.955,1829,3.443,1830,2.199,1831,5.776,1832,5.776,1833,4.743,1834,3.443,1835,2.955,1836,2.199,1837,3.443,1838,2.955,1839,3.641,1840,2.199,1841,2.955,1842,3.443,1843,2.199,1844,3.443,1845,2.199,1846,3.245,1847,2.955,1848,1.887,1849,2.199,1850,2.199,1851,2.199,1852,3.443,1853,3.443,1854,2.199,1855,2.199,1856,4.243,1857,3.671,1858,2.199,1859,2.199,1860,2.199,1861,1.528,1862,2.199,1863,2.199,1864,2.199,1865,2.199,1866,2.633,1867,1.887,1868,2.199,1869,2.199,1870,3.443,1871,1.887,1872,2.199,1873,2.199,1874,2.199,1875,1.887,1876,1.887,1877,2.955,1878,1.887,1879,2.633,1880,2.633,1881,1.887,1882,1.682,1883,3.443,1884,2.199,1885,1.406,1886,1.887,1887,1.887,1888,1.887,1889,2.955,1890,2.955,1891,1.682,1892,5.235,1893,1.682,1894,2.199,1895,1.682,1896,1.682,1897,1.682,1898,1.528,1899,1.682,1900,1.682,1901,1.682,1902,1.682,1903,1.682,1904,1.682,1905,1.682,1906,1.682,1907,3.245,1908,1.682,1909,1.682,1910,1.682,1911,2.633,1912,1.682,1913,1.682,1914,1.528,1915,1.682,1916,3.245,1917,1.887,1918,2.393,1919,2.199,1920,2.393,1921,2.633,1922,1.682,1923,1.887,1924,1.682,1925,1.682,1926,1.682,1927,1.682,1928,2.633,1929,1.682,1930,3.245,1931,2.633]],["title/components/PasswortResetComponent.html",[26,0.263,535,1.005]],["body/components/PasswortResetComponent.html",[3,0.067,4,0.067,5,0.067,7,0.747,10,1.577,14,0.431,16,0.126,17,0.401,18,0.466,22,0.65,23,0.298,24,0.02,25,0.555,26,0.278,27,2.62,30,1.174,32,0.249,33,1.118,34,0.431,36,0.749,50,0.501,51,0.454,56,0.078,59,0.576,60,0.401,65,1.717,66,1.553,67,0.73,68,0.73,69,0.901,70,0.73,71,0.73,73,0.936,75,0.125,76,0.527,77,0.936,79,0.587,88,0.477,91,0.768,92,0.454,99,0.848,100,1.508,102,1.834,104,0.234,106,0.503,107,0.315,116,1.272,118,1.174,129,1.112,158,0.807,173,1.834,176,0.996,180,1.003,187,0.627,202,1.657,204,1.344,242,0.008,243,0.008,244,0.501,245,0.807,246,0.553,247,0.711,248,0.553,249,0.553,253,2.15,254,2.15,256,0.553,259,0.595,264,0.958,268,1.111,272,2.366,276,1.132,278,1.711,296,1.428,297,1.429,315,1.711,325,1.056,342,2.779,346,1.118,349,0.749,353,2.885,354,0.996,355,2.894,357,1.422,358,1.832,359,2.611,360,2.484,361,1.902,362,2.558,363,1.687,364,1.16,367,1.83,368,2.032,369,2.611,370,2.144,372,0.835,374,2.705,376,2.223,377,2.69,378,2.492,379,1.604,380,2.223,381,0.791,382,1.139,383,1.344,384,1.272,385,1.272,386,2.558,387,2.144,388,1.272,389,2.264,390,0.884,391,1.597,392,1.514,393,0.884,394,0.884,398,0.884,400,0.884,402,2.355,403,2.62,404,2.046,405,1.422,406,1.508,407,2.344,408,2.254,409,0.996,411,3.153,412,2.302,413,1.687,414,1.514,418,2.484,425,3.09,427,0.884,428,0.676,429,2.776,430,2.264,433,0.937,434,2.046,435,1.422,437,2.979,438,1.229,439,1.604,440,1.649,441,2.302,442,2.482,443,1.229,444,1.229,445,1.229,447,2.046,448,1.604,452,0.996,457,1.229,458,1.47,459,1.336,464,2.978,469,1.711,470,1.063,472,0.996,473,1.933,480,1.711,481,1.933,482,1.139,485,1.063,486,0.553,487,0.848,488,0.891,489,0.553,490,1.281,491,0.553,492,1.641,493,0.553,494,0.527,495,0.553,496,0.527,497,1.534,498,0.553,499,0.553,500,0.553,501,0.527,502,0.553,503,0.553,504,0.553,505,0.477,506,0.891,507,0.553,508,0.553,509,0.527,510,0.527,511,0.891,512,0.553,513,0.527,514,0.527,515,0.553,516,1.219,517,0.553,518,1.219,519,0.527,520,0.553,521,0.527,522,0.527,523,0.891,524,0.527,525,0.553,526,0.553,527,0.553,528,0.501,529,0.553,530,0.527,531,0.527,532,0.527,533,0.527,534,0.553,535,1.219,536,1.729,537,0.553,538,0.527,539,0.553,540,0.553,541,0.501,542,0.501,543,0.553,544,0.553,545,0.553,546,0.553,547,0.553,548,0.39,549,0.553,550,0.553,551,0.527,552,0.527,553,0.553,554,0.527,555,0.527,556,1.118,557,0.553,558,0.553,571,1.344,574,1.063,575,1.063,582,1.508,584,0.835,586,5.69,591,0.937,603,1.657,613,2.892,617,2.482,618,4.558,619,3.696,625,1.78,630,2.702,634,0.884,636,1.336,642,1.216,647,2.366,649,1.415,653,2.302,664,1.336,665,2.242,671,2.655,675,1.206,676,1.415,678,1.649,691,3.359,692,3.841,693,3.39,695,3.031,696,1.978,698,1.336,699,3.153,700,1.711,703,1.139,704,2.698,705,1.336,706,2.845,739,1.812,740,2.032,763,0.711,856,1.902,858,2.242,915,1.229,920,1.063,921,1.063,924,2.698,925,1.649,929,2.845,930,1.834,942,2.969,949,4.193,977,3.332,980,1.229,988,4.436,991,1.47,992,2.655,994,0.996,1000,1.229,1001,3.151,1002,1.336,1028,0.884,1031,2.366,1080,1.336,1128,1.229,1155,1.139,1160,1.47,1166,1.47,1239,1.565,1240,0.996,1241,1.139,1250,2.638,1340,2.15,1343,2.845,1346,1.336,1348,1.139,1349,1.47,1428,1.139,1450,3.403,1471,1.47,1510,2.698,1560,1.47,1575,2.013,1581,3.118,1605,2.15,1608,2.366,1614,1.978,1792,2.969,1793,2.969,1796,3.73,1799,3.73,1800,2.655,1801,3.403,1804,2.655,1805,3.332,1807,1.649,1810,2.655,1813,2.366,1815,2.655,1816,2.655,1817,2.655,1825,2.655,1826,1.649,1833,2.655,1835,2.655,1838,2.655,1839,3.332,1841,3.332,1846,3.73,1848,1.649,1857,3.403,1861,1.336,1866,3.403,1871,1.649,1875,1.649,1876,1.649,1877,3.332,1878,1.649,1881,3.332,1885,2.482,1886,1.649,1887,1.649,1888,1.649,1889,2.655,1890,2.655,1891,1.47,1892,5.195,1893,1.47,1895,1.47,1896,1.47,1897,1.47,1898,1.336,1899,1.47,1900,1.47,1901,1.47,1902,1.47,1903,1.47,1904,1.47,1905,1.47,1906,1.47,1907,2.969,1908,1.47,1909,1.47,1910,1.47,1911,2.366,1912,1.47,1913,1.47,1914,1.336,1915,1.47,1916,2.969,1917,1.649,1918,2.15,1920,2.698,1921,2.969,1922,1.47,1923,1.649,1924,1.47,1925,1.47,1926,1.47,1927,1.47,1928,2.366,1929,1.47,1930,2.969,1931,2.366,1932,6.63,1933,1.922,1934,3.882,1935,3.093,1936,3.882,1937,3.882,1938,3.882,1939,3.882,1940,3.093,1941,3.093,1942,3.093,1943,3.093,1944,3.093,1945,1.649,1946,1.922,1947,3.093,1948,1.922,1949,1.649,1950,1.922,1951,3.332,1952,1.922,1953,3.882,1954,1.922,1955,3.332,1956,3.882,1957,3.882,1958,1.922,1959,3.093,1960,1.649,1961,1.922,1962,3.093,1963,3.093,1964,1.922,1965,3.093,1966,1.922,1967,4.45,1968,4.891,1969,3.093,1970,3.093,1971,3.093,1972,1.922,1973,3.093,1974,3.093,1975,1.922,1976,4.45,1977,3.093,1978,3.093,1979,4.702,1980,1.922,1981,2.655,1982,2.655,1983,5.211,1984,4.45,1985,3.093,1986,3.093,1987,3.093,1988,1.922,1989,3.093,1990,3.093,1991,1.922,1992,4.45,1993,3.093,1994,1.922,1995,3.093,1996,4.45,1997,3.093,1998,3.093,1999,3.093,2000,2.655,2001,1.922,2002,1.922,2003,1.922,2004,1.47,2005,1.922,2006,1.922,2007,1.649,2008,1.922,2009,3.093,2010,1.922,2011,1.922,2012,1.922,2013,1.922,2014,1.922,2015,3.093,2016,1.922,2017,3.332,2018,4.19,2019,1.922,2020,1.229,2021,1.922,2022,1.649,2023,1.922,2024,1.922,2025,1.922,2026,1.922,2027,1.922,2028,3.093,2029,1.922,2030,1.922,2031,1.649,2032,1.47,2033,1.649,2034,1.922,2035,1.922,2036,1.649,2037,1.922,2038,1.922,2039,1.922,2040,1.922,2041,1.922,2042,1.47,2043,1.922,2044,2.366,2045,3.403,2046,3.093,2047,2.655,2048,3.093,2049,3.093,2050,3.093,2051,2.15,2052,4.45,2053,2.655,2054,2.655,2055,2.655,2056,2.15,2057,1.922,2058,2.15,2059,1.649,2060,1.649,2061,1.649,2062,1.922,2063,1.922]],["title/components/PrivacyComponent.html",[26,0.263,538,1.005]],["body/components/PrivacyComponent.html",[3,0.081,4,0.081,5,0.081,7,0.842,14,0.518,16,0.094,18,0.196,23,0.108,24,0.019,25,0.453,26,0.313,30,1.324,32,0.299,34,0.518,50,0.602,51,0.545,56,0.094,59,0.299,60,0.463,65,1.749,66,1.581,67,0.844,68,0.844,69,0.618,70,0.844,71,0.844,75,0.15,76,0.633,77,1.082,79,0.402,88,0.573,92,0.545,104,0.281,106,0.638,107,0.378,118,1.491,136,3.068,140,5.542,142,4.839,187,0.725,242,0.009,243,0.009,244,0.602,245,0.932,246,0.665,248,0.665,249,0.665,256,0.665,259,0.688,264,0.639,268,0.468,276,0.688,346,1.749,486,0.665,487,0.98,488,1.029,489,0.665,490,1.419,491,0.665,492,1.749,493,0.665,494,0.633,495,0.665,496,0.633,497,0.602,498,0.665,499,0.665,500,0.665,501,0.633,502,0.665,503,0.665,504,0.665,505,0.573,506,1.029,507,0.665,508,0.665,509,0.633,510,0.633,511,1.029,512,0.665,513,0.633,514,0.633,515,0.665,516,1.199,517,0.665,518,1.199,519,0.633,520,0.665,521,0.633,522,0.633,523,1.029,524,0.633,525,0.665,526,0.665,527,0.665,528,0.602,529,0.665,530,0.633,531,0.633,532,0.633,533,0.633,534,0.665,535,0.633,536,0.602,537,0.665,538,1.35,539,0.665,540,0.665,541,0.602,542,0.602,543,0.665,544,0.665,545,0.665,546,0.665,547,0.665,548,0.468,549,0.665,550,0.665,551,0.633,552,0.633,553,0.665,554,0.633,555,0.633,556,0.665,557,0.665,558,0.665,574,1.277,575,1.277,691,1.854,692,2.922,931,2.734,973,5.47,977,4.463,981,3.068,983,4.229,988,2.286,1040,0.9,1317,2.286,1320,3.068,1339,3.15,1368,4.229,1369,1.981,1370,4.839,1374,1.981,1375,1.981,1376,3.068,1377,4.229,1380,5.215,1381,3.068,1382,3.068,1384,3.068,1385,3.068,1386,3.068,1387,3.068,1496,3.068,1573,5.036,1575,3.902,1577,3.768,1581,4.463,1582,2.734,1861,3.425,1879,5.831,1882,5.606,1885,3.15,2017,5.215,2032,5.163,2033,3.068,2036,4.839,2045,4.874,2047,5.903,2051,4.223,2053,4.229,2054,4.229,2055,5.991,2056,2.485,2058,2.485,2064,2.309,2065,3.575,2066,3.575,2067,2.309,2068,2.309,2069,2.309,2070,6.077,2071,3.575,2072,7.509,2073,6.374,2074,3.575,2075,5.638,2076,4.928,2077,6.878,2078,6.751,2079,6.374,2080,4.839,2081,3.575,2082,3.575,2083,5.638,2084,5.638,2085,5.638,2086,3.575,2087,3.575,2088,3.575,2089,5.638,2090,3.575,2091,3.575,2092,3.575,2093,3.575,2094,3.575,2095,3.575,2096,6.077,2097,7.195,2098,3.068,2099,3.575,2100,3.575,2101,3.575,2102,3.575,2103,3.575,2104,7.195,2105,3.575,2106,5.638,2107,6.878,2108,3.575,2109,4.928,2110,3.575,2111,3.575,2112,3.575,2113,3.575,2114,3.575,2115,3.575,2116,3.575,2117,3.575,2118,3.575,2119,3.575,2120,3.575,2121,3.575,2122,3.575,2123,3.575,2124,4.928,2125,3.575,2126,3.575,2127,3.575,2128,3.575,2129,3.575,2130,3.575,2131,4.928,2132,3.575,2133,4.928,2134,5.215,2135,3.575,2136,3.575,2137,5.638,2138,3.575,2139,3.575,2140,3.575,2141,4.928,2142,4.928,2143,3.575,2144,4.928,2145,3.575,2146,4.928,2147,3.575,2148,6.077,2149,3.575,2150,3.575,2151,3.575,2152,3.575,2153,3.575,2154,3.575,2155,3.575,2156,3.575,2157,3.575,2158,3.575,2159,3.575,2160,3.575,2161,3.575,2162,3.575,2163,3.575,2164,3.575,2165,3.575,2166,3.575,2167,3.575,2168,3.575,2169,3.575,2170,6.374,2171,4.928,2172,4.928,2173,4.928,2174,6.374,2175,6.077,2176,4.928,2177,6.374,2178,3.575,2179,6.374,2180,3.575,2181,3.575,2182,3.575,2183,3.575,2184,3.575,2185,2.309,2186,3.575,2187,3.575,2188,3.575,2189,3.575,2190,4.928,2191,5.638,2192,3.575,2193,3.575,2194,3.575,2195,4.928,2196,4.928,2197,4.928,2198,3.575,2199,6.374,2200,6.374,2201,4.928,2202,3.575,2203,3.575,2204,3.575,2205,3.575,2206,4.229,2207,3.575,2208,6.077,2209,6.077,2210,5.638,2211,3.575,2212,6.077,2213,4.229,2214,5.638,2215,4.928,2216,4.928,2217,3.575,2218,3.575,2219,3.575,2220,3.575,2221,3.575,2222,4.928,2223,3.575,2224,6.077,2225,3.575,2226,3.575,2227,3.575,2228,3.575,2229,5.638,2230,3.575,2231,3.575,2232,3.575,2233,3.575,2234,3.575,2235,3.575,2236,3.575,2237,4.928,2238,3.575,2239,3.575,2240,4.928,2241,3.575,2242,3.575,2243,3.575,2244,3.575,2245,3.575,2246,3.575,2247,3.575,2248,3.575,2249,3.575,2250,3.575,2251,3.575,2252,3.575,2253,3.575,2254,3.575,2255,3.575,2256,3.575,2257,3.575,2258,3.575,2259,3.575,2260,4.928,2261,3.575,2262,4.928,2263,4.928,2264,3.575,2265,3.575,2266,3.575,2267,3.575,2268,3.575,2269,4.928,2270,3.575,2271,3.575,2272,3.575,2273,5.638,2274,4.928,2275,4.928,2276,4.928,2277,3.575,2278,3.575,2279,3.575,2280,3.575,2281,3.575,2282,3.575,2283,3.575,2284,3.575,2285,3.575,2286,3.575,2287,3.575,2288,3.575,2289,4.928,2290,3.575,2291,6.077,2292,3.575,2293,3.575,2294,3.575,2295,3.575,2296,3.575,2297,3.575,2298,2.734,2299,3.575,2300,3.575,2301,3.575,2302,3.575,2303,3.575,2304,3.575,2305,3.575,2306,3.575,2307,3.575,2308,3.575,2309,3.575,2310,3.575,2311,2.309]],["title/classes/PrivateMessagesBase.html",[75,0.239,2312,3.148]],["body/classes/PrivateMessagesBase.html",[3,0.107,4,0.107,5,0.107,16,0.124,17,0.571,18,0.482,22,0.686,23,0.356,24,0.02,25,0.281,56,0.124,59,0.811,60,0.571,75,0.199,79,0.281,91,1.095,99,2.011,103,2.25,106,0.856,109,2.403,129,1.21,242,0.011,243,0.011,264,1.119,296,2.094,297,1.993,346,1.27,428,1.993,466,2.288,603,2.224,642,1.637,708,1.813,711,2.864,714,3.31,716,3.07,717,2.524,718,3.598,720,3.31,728,3.07,730,3.31,731,2.38,732,3.31,734,3.31,735,3.598,736,3.598,737,2.684,738,2.684,739,1.991,740,2.991,742,3.598,744,4.443,745,3.07,746,3.598,748,3.31,749,3.31,750,3.31,751,3.31,752,3.598,753,4.443,754,3.598,755,4.443,758,3.598,759,3.598,760,3.31,763,1.132,767,2.97,775,1.192,785,2.441,786,3.31,811,2.288,830,1.691,832,1.813,833,1.813,841,1.633,886,2.25,1239,1.075,1257,3.31,2312,3.787,2313,7.67,2314,7.67,2315,2.125,2316,5.177,2317,5.177,2318,5.177,2319,5.177,2320,4.443,2321,4.443,2322,4.443,2323,5.177,2324,5.177,2325,5.177,2326,4.443,2327,5.177,2328,3.96,2329,2.338,2330,2.125,2331,2.338,2332,2.125,2333,2.125,2334,2.338,2335,3.058,2336,2.624,2337,2.624,2338,2.338,2339,2.624,2340,2.624,2341,2.125,2342,2.125,2343,2.125,2344,2.125,2345,2.624,2346,2.125,2347,2.125,2348,2.125,2349,2.125,2350,2.125,2351,2.338,2352,2.338,2353,2.125,2354,2.125,2355,2.338,2356,4.865,2357,3.058,2358,2.125,2359,2.125,2360,2.125,2361,2.338,2362,2.125,2363,2.125,2364,2.125,2365,2.125,2366,2.125,2367,2.338,2368,2.624,2369,2.624,2370,2.624,2371,2.624,2372,2.624,2373,2.338,2374,2.624,2375,3.058,2376,2.125]],["title/components/ProfilDialogComponent.html",[26,0.263,541,0.957]],["body/components/ProfilDialogComponent.html",[0,0.439,3,0.204,4,0.089,5,0.089,7,0.894,9,1.317,10,1.107,11,2.339,12,1.994,13,3.071,14,1.6,16,0.157,17,0.498,18,0.395,22,0.626,23,0.292,24,0.02,25,0.538,26,0.332,30,1.405,31,1.104,32,0.329,33,1.337,34,0.57,35,2.135,36,0.991,39,1.405,40,3.036,41,1.317,42,1.104,50,0.662,51,0.6,54,3.153,55,1.405,56,0.157,59,0.329,60,0.498,65,1.764,66,1.594,67,0.908,68,0.908,69,0.665,70,0.908,71,0.908,72,1.994,73,1.164,74,2.407,75,0.165,76,0.696,77,1.164,78,0.821,79,0.511,88,0.63,91,1.381,92,0.6,104,0.739,106,0.83,107,0.848,109,1.862,110,2.713,112,1.994,114,2.407,116,2.13,118,1.567,119,1.405,129,1.298,187,0.78,203,2.381,204,1.104,223,1.624,225,2.281,226,1.994,230,1.994,241,3.071,242,0.01,243,0.01,244,0.662,245,1.003,246,0.731,247,0.94,248,0.731,249,0.731,256,0.731,259,0.74,264,0.984,268,0.515,276,0.997,296,1.419,297,1.351,299,4.18,300,4.354,302,1.317,315,3.617,342,1.238,349,0.991,350,1.506,351,1.624,353,2.443,354,1.994,355,2.78,356,2.18,357,3.054,358,2.299,359,2.443,360,1.582,361,1.5,362,2.501,363,2.017,364,1.211,365,1.405,366,3.071,367,2.289,368,2.02,369,2.283,370,2.409,371,2.692,372,2.017,374,2.135,375,2.128,376,2.283,377,2.657,378,2.501,380,2.02,381,1.582,383,2.722,384,1.91,385,1.91,386,2.372,387,2.502,388,2.289,389,1.671,390,1.168,391,1.91,392,1.5,393,1.769,394,1.769,395,2.128,396,2.128,397,2.128,398,1.769,399,2.128,400,1.769,401,2.128,402,1.811,403,2.558,404,3.006,405,1.769,407,1.91,408,1.91,409,1.317,411,2.128,414,2.02,416,1.624,418,2.638,424,1.624,425,2.281,426,1.624,427,1.168,428,0.893,429,2.418,430,2.25,433,1.875,434,1.168,435,1.168,437,2.135,447,1.769,449,2.713,453,1.405,457,1.624,459,1.765,460,2.18,464,2.017,465,3.301,468,2.685,470,1.405,472,2.407,473,1.104,481,2.017,482,2.281,485,1.405,486,0.731,487,1.054,488,1.107,489,0.731,490,1.491,491,0.731,492,1.803,493,0.731,494,0.696,495,0.731,496,0.696,497,0.662,498,0.731,499,0.731,500,0.731,501,0.696,502,0.731,503,0.731,504,0.731,505,1.152,506,1.107,507,0.731,508,0.731,509,0.696,510,0.696,511,1.107,512,0.731,513,0.696,514,0.696,515,0.731,516,0.696,517,0.731,518,0.696,519,0.696,520,0.731,521,0.696,522,0.696,523,1.107,524,0.696,525,0.731,526,0.731,527,0.731,528,0.662,529,0.731,530,0.696,531,0.696,532,0.696,533,0.696,534,0.731,535,0.696,536,0.662,537,0.731,538,0.696,539,0.731,540,0.731,541,1.586,542,1.885,543,0.731,544,0.731,545,0.731,546,0.731,547,0.731,548,0.515,549,0.731,550,0.731,551,0.696,552,0.696,553,0.731,554,0.696,555,0.696,556,0.731,557,0.731,558,0.731,606,3.551,619,3.247,635,2.568,642,0.542,665,1.769,691,1.994,692,2.281,695,3.239,699,3.239,700,1.405,841,0.94,856,1.5,900,1.405,909,3.6,911,1.765,912,2.18,913,2.407,920,2.128,921,2.128,923,2.459,924,2.673,937,1.942,980,1.624,991,1.942,1060,1.506,1165,1.994,1202,3.227,1216,4.478,1218,4.227,1239,1.633,1240,2.407,1241,2.753,1248,1.942,1249,2.942,1250,1.506,1339,2.459,1343,2.968,1348,1.506,1414,2.128,1428,2.281,1536,2.673,1552,3.6,1553,4.473,1572,2.18,1575,1.994,1589,1.765,1611,1.942,1620,2.18,1633,3.961,1723,2.459,1898,3.227,1914,1.765,1918,2.673,1981,4.776,2018,2.942,2020,2.459,2042,2.942,2051,3.6,2056,2.673,2328,3.551,2377,5.847,2378,5.847,2379,2.942,2380,2.942,2381,4.445,2382,4.445,2383,4.445,2384,4.478,2385,3.847,2386,3.301,2387,2.54,2388,3.301,2389,2.54,2390,3.301,2391,3.301,2392,2.673,2393,2.54,2394,3.301,2395,3.301,2396,3.301,2397,2.54,2398,3.301,2399,3.301,2400,3.301,2401,3.301,2402,3.301,2403,3.301,2404,3.301,2405,3.301,2406,3.301,2407,3.301,2408,2.54,2409,2.673,2410,2.54,2411,2.942,2412,1.942,2413,3.301,2414,2.18,2415,3.301,2416,2.18,2417,3.301,2418,2.18,2419,3.301,2420,2.18,2421,3.985,2422,3.985,2423,2.18,2424,2.18,2425,2.18,2426,2.18,2427,2.18,2428,3.847,2429,3.847,2430,3.847,2431,5.855,2432,2.54,2433,2.54,2434,4.643,2435,3.847,2436,2.54,2437,3.847,2438,3.847,2439,2.54,2440,3.301,2441,3.847,2442,2.54,2443,2.54,2444,2.54]],["title/interfaces/ProfileData.html",[0,0.634,2384,2.805]],["body/interfaces/ProfileData.html",[0,0.756,2,1.617,3,0.197,4,0.153,5,0.153,9,2.265,10,1.258,11,2.404,12,2.265,13,3.34,14,1.615,16,0.178,17,0.729,22,0.698,23,0.318,24,0.02,25,0.626,26,0.403,30,1.704,31,1.899,32,0.566,33,1.622,34,0.981,35,2.59,36,1.704,39,3.116,40,3.232,41,2.265,42,1.899,54,3.232,55,2.417,56,0.229,65,1.032,66,0.933,68,1.032,69,0.756,70,1.032,71,1.032,72,2.265,73,1.322,74,2.265,75,0.285,77,1.322,78,0.933,79,0.402,91,1.398,104,0.758,106,0.882,107,0.922,109,1.791,110,2.746,112,2.265,114,2.265,118,1.322,119,2.417,203,2.59,223,2.794,225,2.591,226,2.265,230,2.92,241,2.591,242,0.014,243,0.014,299,4.357,300,4.577,315,3.77,358,1.537,449,2.746,468,2.92,505,1.084,541,1.717,542,1.626,606,3.342,619,2.92,635,2.417,665,2.59,900,3.116,909,3.037,913,2.265,920,2.417,921,2.417,923,2.794,924,3.037,1060,3.904,1165,2.265,1202,3.915,1216,5.212,1218,4.333,1339,2.794,1414,2.417,1428,2.591,1536,3.037,1552,4.333,1553,3.985,1575,2.265,1589,3.037,1611,4.308,1633,3.342,1723,2.794,2020,2.794,2042,3.342,2051,3.915,2056,3.037,2328,3.342,2377,3.75,2378,3.75,2379,3.342,2380,3.342,2381,5.849,2382,5.849,2383,5.849,2384,5.036,2386,3.75,2388,3.75,2390,3.75,2391,3.75,2392,3.037,2394,3.75,2395,3.75,2396,3.75,2398,3.75,2399,3.75,2400,3.75,2401,3.75,2402,3.75,2403,3.75,2404,3.75,2405,3.75,2406,3.75,2407,3.75,2409,3.037,2411,3.342,2412,4.308,2413,4.834,2414,3.75,2415,4.834,2416,3.75,2417,4.834,2418,3.75,2419,4.834,2420,3.75,2421,5.35,2422,5.35,2423,3.75,2424,3.75,2425,3.75,2426,3.75,2427,3.75]],["title/injectables/ReplyCountService.html",[594,1.005,2445,3.148]],["body/injectables/ReplyCountService.html",[3,0.112,4,0.112,5,0.112,16,0.131,18,0.605,22,0.694,23,0.355,24,0.02,25,0.489,32,0.416,56,0.131,60,0.967,75,0.209,78,0.685,79,0.654,104,0.935,106,0.867,107,0.525,116,1.32,129,1.135,158,0.837,180,1.443,202,2.024,220,3.697,242,0.012,243,0.012,259,0.879,264,1.04,268,1.443,276,1.359,325,1.431,346,1.315,548,1.556,560,1.395,582,1.565,584,1.395,591,2.594,594,1.252,596,1.395,608,1.476,625,2.216,634,2.665,642,1.359,649,2.245,675,1.252,676,2.129,740,2.26,763,1.188,767,2.311,775,2.26,800,2.311,830,1.776,841,1.691,949,3.705,1028,1.476,1037,1.776,1038,1.903,1039,1.903,1040,1.252,1042,1.776,1097,3.436,1098,3.768,1099,2.943,1100,3.396,1111,4.097,1121,4.433,1126,2.052,1128,3.401,1130,3.401,1131,3.401,1155,1.903,1165,2.758,1166,3.494,1301,4.735,1679,4.433,1717,2.231,1732,3.494,2445,3.921,2446,7.172,2447,3.21,2448,5.32,2449,5.32,2450,5.32,2451,5.32,2452,4.569,2453,5.32,2454,5.32,2455,5.32,2456,4.569,2457,5.32,2458,5.32,2459,5.32,2460,3.21,2461,3.21,2462,3.21,2463,3.21,2464,3.21,2465,3.21,2466,3.21,2467,3.21,2468,3.21,2469,4.569,2470,3.21,2471,3.21,2472,3.21,2473,5.32,2474,3.21,2475,3.21,2476,3.21,2477,6.695,2478,5.796,2479,3.21,2480,5.796,2481,4.569,2482,3.21,2483,3.21,2484,6.366,2485,3.21,2486,3.21,2487,3.21,2488,5.796,2489,3.21,2490,3.21,2491,3.21,2492,4.569,2493,3.21,2494,3.21,2495,3.21,2496,3.21,2497,4.569,2498,3.21,2499,3.21,2500,2.755,2501,3.21,2502,3.21,2503,4.569,2504,3.21,2505,2.755,2506,4.569,2507,3.21,2508,4.569,2509,3.21,2510,3.21,2511,4.569,2512,4.569,2513,4.569,2514,3.921,2515,4.569,2516,4.569,2517,4.569,2518,3.21,2519,4.569,2520,3.21,2521,3.21,2522,3.21,2523,4.569,2524,3.21,2525,3.21,2526,3.21,2527,3.21,2528,3.21,2529,3.21,2530,3.21]],["title/classes/SearchFieldBase.html",[75,0.239,2531,3.148]],["body/classes/SearchFieldBase.html",[3,0.128,4,0.128,5,0.128,16,0.149,17,0.648,18,0.425,21,3.966,22,0.684,23,0.353,24,0.02,56,0.149,59,0.739,60,0.795,75,0.238,91,1.242,99,2.024,103,2.48,129,1.309,180,0.704,242,0.013,243,0.013,259,0.963,264,1.12,276,0.704,296,2.097,297,1.996,325,0.742,346,1.053,428,2.158,466,2.595,642,1.541,708,2.17,711,3.157,714,3.648,716,3.384,717,2.782,720,3.648,728,3.384,730,3.648,731,2.624,732,3.648,734,3.648,737,2.959,738,2.959,742,3.966,745,3.384,748,3.648,749,3.648,750,3.648,751,3.648,760,3.648,767,3.048,785,2.769,811,2.595,824,5.266,835,4.907,836,4.907,838,4.898,845,4.898,886,2.48,949,4.907,1239,1.287,1257,3.648,1882,3.829,2315,2.543,2320,4.898,2321,4.898,2322,4.898,2329,2.798,2330,2.543,2331,2.798,2332,2.543,2333,2.543,2334,2.798,2338,2.798,2341,2.543,2342,2.543,2343,2.543,2344,2.543,2346,2.543,2347,2.543,2348,2.543,2349,2.543,2350,2.543,2351,2.798,2352,2.798,2353,2.543,2354,2.543,2355,2.798,2358,2.543,2359,2.543,2360,2.543,2361,2.798,2362,2.543,2363,2.543,2364,2.543,2365,2.543,2366,2.543,2376,2.543,2531,4.296,2532,5.707,2533,5.707,2534,5.707,2535,5.707,2536,5.707,2537,5.707,2538,3.659,2539,2.798,2540,5.006,2541,2.798,2542,3.659,2543,5.006,2544,5.006,2545,3.659]],["title/components/SelectedMembersDialogComponent.html",[26,0.263,50,0.957]],["body/components/SelectedMembersDialogComponent.html",[3,0.118,4,0.118,5,0.118,7,1.469,9,1.752,10,1.575,11,2.431,14,1.655,15,2.621,16,0.271,17,0.614,18,0.403,23,0.302,24,0.02,25,0.545,26,0.392,31,1.469,32,0.438,33,1.575,34,0.759,40,3.356,41,2.837,42,1.469,50,1.769,51,1.682,52,5.822,56,0.138,59,0.438,60,0.614,65,1.802,66,1.628,67,1.119,68,1.119,69,0.82,70,1.119,71,1.119,72,2.457,73,1.433,74,2.837,75,0.22,76,0.926,79,0.545,84,1.87,88,0.839,92,1.4,94,4.34,104,0.411,106,0.838,107,0.971,109,2.058,110,3.045,112,2.457,114,3.446,116,1.949,129,1.011,187,1.312,191,2.81,194,2.621,197,2.349,203,2.727,204,2.059,211,3.293,225,2.81,226,2.457,228,3.281,230,2.457,242,0.012,243,0.012,244,0.881,245,1.236,246,0.973,247,1.251,248,0.973,249,0.973,256,0.973,259,0.912,260,3.624,264,0.971,266,3.293,268,0.961,276,1.053,278,2.621,302,1.752,346,1.364,349,1.318,353,1.318,355,1.318,358,2.085,359,2.592,360,1.949,361,1.848,362,1.848,363,1.469,364,0.881,365,1.87,366,2.004,367,2.251,368,2.435,369,2.724,370,2.663,371,2.976,372,1.469,373,1.87,374,2.516,375,1.87,376,2.435,377,2.525,378,2.313,379,1.752,380,1.848,381,1.39,382,2.004,383,2.059,384,2.251,385,2.251,386,2.525,387,2.44,388,1.949,389,2.059,390,2.179,391,2.251,392,1.848,393,1.554,394,1.554,395,1.87,396,1.87,397,1.87,398,1.554,399,1.87,400,1.554,401,1.87,402,2.134,403,2.179,405,2.976,406,1.648,407,1.949,408,1.949,413,1.469,414,1.318,418,1.39,422,2.901,430,2.378,449,1.648,450,3.803,451,2.901,452,1.752,453,1.87,462,2.349,463,2.349,467,2.349,471,2.349,473,1.469,486,0.973,487,1.298,488,1.364,489,0.973,490,1.707,491,0.973,492,1.953,493,0.973,494,0.926,495,0.973,496,0.926,497,0.881,498,0.973,499,0.973,500,0.973,501,0.926,502,0.973,503,0.973,504,0.973,505,0.839,506,1.364,507,0.973,508,0.973,509,0.926,510,0.926,511,1.364,512,0.973,513,0.926,514,0.926,515,0.973,516,0.926,517,0.973,518,0.926,519,0.926,520,0.973,521,0.926,522,0.926,523,1.364,524,0.926,525,0.973,526,0.973,527,0.973,528,0.881,529,0.973,530,1.499,531,0.926,532,0.926,533,0.926,534,0.973,535,0.926,536,0.881,537,0.973,538,0.926,539,0.973,540,0.973,541,0.881,542,0.881,543,0.973,544,0.973,545,0.973,546,0.973,547,0.973,548,0.685,549,0.973,550,0.973,551,0.926,552,0.926,553,0.973,554,0.926,555,0.926,556,0.973,557,0.973,558,0.973,635,3.027,665,2.516,700,2.621,775,2.313,800,2.577,900,2.621,909,4.122,911,2.349,913,3.237,937,2.585,994,2.457,1239,1.924,1254,2.161,1414,2.621,1450,3.624,1471,3.624,1570,3.293,1605,3.293,1614,3.498,1621,2.901,1822,3.624,2546,6.784,2547,4.739,2548,4.739,2549,3.38,2550,4.739,2551,4.739,2552,3.38,2553,3.38,2554,3.38,2555,3.38,2556,4.739]],["title/classes/ThreadChannelBase.html",[75,0.239,2557,3.148]],["body/classes/ThreadChannelBase.html",[3,0.122,4,0.122,5,0.122,7,0.67,10,1.002,16,0.142,17,0.626,18,0.555,22,0.692,23,0.356,24,0.02,25,0.445,56,0.142,59,0.626,60,0.993,75,0.227,78,0.743,79,0.445,91,1.2,99,1.99,103,2.415,106,0.817,109,2.322,129,1.282,242,0.012,243,0.012,264,1.117,296,2.085,297,1.985,346,1.393,428,2.112,466,2.508,548,0.706,603,2.234,642,1.617,708,2.064,711,3.075,714,3.554,716,3.296,717,2.71,718,3.864,720,3.554,728,3.296,730,3.554,731,2.556,732,3.554,734,3.554,735,3.864,736,3.864,737,2.882,738,2.882,739,1.767,740,2.168,745,3.296,746,3.864,748,3.554,749,3.554,750,3.554,751,3.554,752,3.864,754,3.864,758,3.864,759,3.864,760,3.554,763,1.791,767,2.839,775,1.358,786,2.226,811,2.508,830,1.926,831,2.226,833,2.064,841,2.058,1239,1.224,1257,3.554,1401,4.771,2004,2.662,2315,2.42,2329,2.662,2330,2.42,2332,2.42,2333,2.42,2336,2.988,2337,2.988,2339,2.988,2340,2.988,2341,2.42,2342,2.42,2343,2.42,2344,2.42,2345,2.988,2346,2.42,2347,2.42,2348,2.42,2349,2.42,2350,2.42,2353,2.42,2354,2.42,2358,2.42,2359,2.42,2360,2.42,2361,2.662,2362,2.42,2363,2.42,2364,2.42,2365,2.42,2366,2.42,2367,2.662,2373,2.662,2374,2.988,2376,2.42,2539,2.662,2541,2.662,2557,4.151,2558,7.653,2559,7.653,2560,5.559,2561,5.559,2562,4.771,2563,5.559,2564,4.771,2565,5.559,2566,3.481,2567,3.481]],["title/classes/ThreadMessagesBase.html",[75,0.239,2568,3.148]],["body/classes/ThreadMessagesBase.html",[3,0.12,4,0.12,5,0.12,16,0.14,17,0.622,18,0.508,22,0.694,23,0.357,24,0.02,25,0.442,56,0.14,59,0.775,60,0.622,75,0.225,79,0.317,91,1.192,99,1.987,103,2.403,106,0.844,109,2.373,129,1.39,242,0.012,243,0.012,264,1.119,296,2.091,297,1.99,346,1.383,428,2.104,466,2.491,603,2.23,642,1.621,708,2.044,711,3.06,714,3.536,716,3.279,717,2.697,718,3.844,720,3.536,728,3.279,730,3.536,731,2.543,732,3.536,734,3.536,735,3.844,736,3.844,737,2.867,738,2.867,739,1.758,740,2.991,742,3.844,745,3.279,746,3.844,748,3.536,749,3.536,750,3.536,751,3.536,752,3.844,754,3.844,758,3.844,759,3.844,760,3.536,763,1.276,767,2.831,775,2.157,786,2.204,811,2.491,830,1.907,833,2.044,841,1.779,1097,3.279,1105,2.867,1239,1.213,1257,3.536,2004,2.637,2315,2.397,2326,4.747,2330,2.397,2331,2.637,2332,2.397,2333,2.397,2334,2.637,2338,2.637,2341,2.397,2342,2.397,2343,2.397,2344,2.397,2346,2.397,2347,2.397,2348,2.397,2349,2.397,2350,2.397,2351,2.637,2352,2.637,2353,2.397,2354,2.397,2355,2.637,2356,5.134,2358,2.397,2359,2.397,2360,2.397,2362,2.397,2363,2.397,2364,2.397,2365,2.397,2366,2.397,2367,2.637,2368,2.959,2369,2.959,2370,2.959,2371,2.959,2372,2.959,2373,2.637,2376,2.397,2539,2.637,2541,2.637,2562,4.747,2564,4.747,2568,4.124,2569,7.669,2570,5.531,2571,5.531,2572,5.531,2573,5.531,2574,5.531,2575,3.448]],["title/injectables/ThreadService.html",[594,1.005,2576,3.148]],["body/injectables/ThreadService.html",[3,0.104,4,0.104,5,0.104,11,2.194,16,0.121,18,0.617,22,0.712,23,0.354,24,0.02,25,0.571,32,0.386,56,0.121,59,0.386,69,0.516,75,0.194,78,0.636,79,0.667,80,4.096,104,0.913,106,0.917,107,0.488,158,0.778,180,1.44,202,1.974,211,3.012,220,4.453,242,0.011,243,0.011,259,0.834,264,1.06,268,1.471,276,1.389,325,1.484,346,1.248,548,0.605,560,1.296,582,1.454,584,1.883,591,1.454,594,1.187,596,1.296,608,1.371,625,2.242,634,1.992,642,0.636,649,2.283,675,1.163,676,2.189,737,2.247,738,2.247,740,2.686,763,2.074,775,1.69,830,1.65,841,1.889,863,3.099,871,3.427,949,4.403,1001,1.992,1012,4.562,1028,1.371,1031,5.457,1032,6.032,1037,1.65,1038,1.768,1039,1.768,1040,1.163,1042,3.631,1076,2.281,1077,2.281,1079,1.907,1098,1.65,1100,1.546,1105,3.922,1110,2.569,1125,3.314,1126,1.907,1130,1.907,1131,1.907,1165,1.546,1167,2.073,1168,2.073,1208,1.907,1286,2.559,1295,5.108,1301,3.548,1305,4.285,1311,2.559,1657,2.559,1665,3.314,1670,2.559,1680,2.281,1708,5.118,1717,3.548,1723,2.77,1729,2.559,1732,4.285,2500,4.381,2505,2.559,2576,3.719,2577,2.982,2578,5.105,2579,4.334,2580,4.334,2581,5.105,2582,5.105,2583,5.105,2584,5.105,2585,5.105,2586,5.105,2587,5.105,2588,4.334,2589,5.105,2590,4.334,2591,5.105,2592,5.105,2593,5.105,2594,4.334,2595,2.982,2596,2.982,2597,2.982,2598,4.334,2599,2.982,2600,4.334,2601,2.982,2602,2.982,2603,2.982,2604,2.982,2605,2.982,2606,2.982,2607,2.982,2608,2.982,2609,2.982,2610,2.982,2611,2.982,2612,2.982,2613,2.982,2614,2.982,2615,4.334,2616,2.982,2617,2.982,2618,4.334,2619,2.982,2620,2.982,2621,2.982,2622,5.952,2623,4.334,2624,2.982,2625,2.982,2626,2.982,2627,2.982,2628,2.982,2629,2.982,2630,2.982,2631,4.334,2632,2.982,2633,2.982,2634,2.281,2635,4.334,2636,2.982,2637,2.982,2638,2.982,2639,2.982,2640,2.982,2641,2.982,2642,2.982,2643,2.982,2644,5.105,2645,4.334,2646,2.982,2647,2.982,2648,2.982,2649,2.982,2650,2.982,2651,2.982,2652,4.334,2653,2.982,2654,2.982,2655,2.982,2656,2.982,2657,2.982,2658,4.334,2659,2.982,2660,2.982,2661,2.982,2662,2.982,2663,2.982,2664,2.982,2665,2.982,2666,2.982,2667,2.982,2668,2.982,2669,2.982,2670,2.982,2671,2.982,2672,4.334,2673,2.982,2674,2.982]],["title/injectables/UserService.html",[46,1.594,594,1.005]],["body/injectables/UserService.html",[3,0.101,4,0.101,5,0.101,16,0.118,18,0.603,22,0.683,23,0.331,24,0.02,25,0.565,32,0.374,46,1.841,56,0.118,59,0.843,66,0.617,69,0.733,75,0.188,78,1.178,79,0.657,91,1.888,99,1.161,100,3.554,104,0.893,106,0.913,107,0.694,158,1.533,180,1.455,202,1.953,242,0.011,243,0.011,259,0.815,264,1.06,268,1.439,276,1.39,297,1.105,325,1.346,328,4.056,497,1.655,536,1.105,560,1.256,571,1.256,582,1.41,584,1.256,591,2.692,594,1.161,595,4.853,596,1.256,608,1.329,617,3.206,619,2.197,625,2.31,630,3.29,634,1.948,642,1.311,649,2.381,661,2.211,675,2.292,676,2.342,681,5.939,684,2.211,693,2.945,832,2.512,833,1.714,841,2.176,977,2.709,1001,2.992,1028,1.329,1037,1.6,1038,1.714,1039,1.714,1042,3.511,1060,2.512,1068,2.482,1073,2.211,1080,4.523,1128,1.849,1144,3.636,1152,3.636,1154,3.636,1155,1.714,1160,4.495,1161,3.636,1162,4.304,1163,4.304,1165,2.197,1208,4.161,1209,2.482,1222,4.739,1226,5.045,1233,2.482,1485,2.482,1522,2.211,1575,1.499,1708,3.24,1717,2.01,1723,2.709,1861,2.01,1867,3.636,1885,1.849,1951,2.482,1979,3.636,2007,2.482,2020,1.849,2022,2.482,2031,3.636,2044,2.211,2213,2.482,2298,2.211,2634,2.211,2675,2.892,2676,4.237,2677,4.237,2678,4.739,2679,5.522,2680,3.636,2681,4.237,2682,5.015,2683,5.015,2684,5.522,2685,5.015,2686,4.237,2687,4.237,2688,4.237,2689,4.237,2690,4.237,2691,4.237,2692,5.446,2693,2.892,2694,2.892,2695,4.237,2696,2.892,2697,4.237,2698,2.892,2699,2.892,2700,2.892,2701,4.237,2702,2.892,2703,2.892,2704,4.237,2705,2.892,2706,2.892,2707,6.64,2708,5.522,2709,2.892,2710,2.892,2711,5.878,2712,2.892,2713,2.892,2714,2.892,2715,2.892,2716,4.237,2717,2.892,2718,4.237,2719,2.892,2720,4.237,2721,2.892,2722,4.237,2723,2.892,2724,4.237,2725,4.237,2726,2.892,2727,4.237,2728,2.892,2729,4.237,2730,2.892,2731,2.892,2732,2.892,2733,2.892,2734,2.892,2735,2.892,2736,2.892,2737,2.892,2738,2.892,2739,6.142,2740,5.015,2741,5.015,2742,5.015,2743,4.237,2744,2.892,2745,5.878,2746,5.015,2747,5.015,2748,2.892,2749,2.892,2750,2.892,2751,2.892,2752,4.237,2753,4.237,2754,2.892,2755,2.892,2756,2.892,2757,2.892,2758,2.892,2759,2.892,2760,2.892,2761,2.892,2762,2.892,2763,2.892,2764,2.482,2765,2.892,2766,4.237,2767,2.892,2768,2.892,2769,4.237,2770,2.892,2771,2.892,2772,2.892,2773,4.237,2774,4.237,2775,2.892,2776,2.892,2777,2.892,2778,2.892,2779,2.892,2780,2.892,2781,4.237,2782,4.237,2783,4.237,2784,2.892,2785,2.892,2786,4.237,2787,2.892,2788,2.892]],["title/components/VerifyEmailComponent.html",[26,0.263,551,1.005]],["body/components/VerifyEmailComponent.html",[3,0.076,4,0.076,5,0.076,7,0.812,10,0.627,14,0.489,16,0.139,17,0.443,18,0.358,22,0.613,23,0.268,24,0.02,25,0.563,26,0.371,27,2.646,30,1.569,32,0.282,33,1.214,34,0.489,35,1.939,36,0.85,50,0.568,51,0.514,56,0.089,59,0.282,60,0.443,65,1.74,66,1.573,67,0.807,68,0.807,69,0.591,70,0.807,71,0.807,73,1.034,75,0.142,76,0.597,77,1.034,79,0.477,80,2.185,88,0.541,91,1.366,92,0.514,104,0.7,107,0.357,116,1.406,117,1.891,118,1.445,129,1.019,158,0.891,173,2.026,180,0.998,187,0.693,194,2.642,204,1.485,233,3.652,242,0.009,243,0.009,244,0.568,245,0.891,246,0.627,247,0.806,248,0.627,249,0.627,256,0.627,259,0.658,264,0.895,268,0.855,276,0.919,278,1.891,284,1.891,296,1.308,297,1.245,306,2.614,315,3.045,325,1.052,342,2.905,346,0.984,349,0.85,353,2.912,354,1.129,355,2.899,357,1.002,358,1.824,359,2.6,360,2.579,361,2.023,362,2.653,363,1.832,364,1.245,367,2.134,368,2.533,369,2.695,370,2.368,371,1.002,372,0.947,374,2.818,376,2.324,377,2.745,378,2.6,379,1.772,380,2.324,381,0.896,382,1.292,383,0.947,384,1.406,385,1.406,386,2.533,387,2.134,388,1.406,389,2.075,390,1.002,391,1.735,392,1.645,393,1.002,394,1.002,398,1.002,400,1.002,402,2.39,403,2.74,404,2.196,405,1.571,406,1.062,407,2.368,408,2.264,409,1.129,411,3.184,412,2.5,413,1.485,414,1.333,418,2.451,425,3.264,427,1.939,428,1.483,429,2.777,430,2.254,433,1.062,434,1.939,435,1.002,437,3.029,438,1.393,439,1.129,441,2.026,442,2.696,443,1.393,444,1.393,445,1.393,447,2.196,448,1.129,452,1.129,457,1.393,458,1.666,459,1.514,464,3.003,469,1.891,470,1.205,472,1.129,473,2.075,480,1.891,481,1.832,485,1.205,486,0.627,487,0.936,488,0.984,489,0.627,490,1.375,491,0.627,492,1.716,493,0.627,494,0.597,495,0.627,496,0.597,497,1.1,498,0.627,499,0.627,500,0.627,501,0.597,502,0.627,503,0.627,504,0.627,505,1.428,506,0.984,507,0.627,508,0.627,509,0.597,510,0.597,511,0.984,512,0.627,513,0.597,514,0.597,515,0.627,516,1.308,517,0.627,518,1.308,519,0.597,520,0.627,521,0.597,522,0.597,523,0.984,524,0.597,525,0.627,526,0.627,527,0.627,528,0.568,529,0.627,530,0.597,531,0.597,532,0.597,533,0.597,534,0.627,535,0.597,536,0.568,537,0.627,538,0.597,539,0.627,540,0.627,541,0.568,542,0.568,543,0.627,544,0.627,545,0.627,546,0.627,547,0.627,548,0.442,549,0.627,550,0.627,551,1.508,552,1.827,553,0.627,554,0.597,555,0.597,556,0.627,557,0.627,558,0.627,571,1.485,574,1.205,575,1.205,613,3.718,619,3.871,620,4.402,625,1.965,630,3.09,636,2.375,640,2.614,642,1.338,646,3.81,647,3.652,649,1.518,653,2.026,661,1.666,675,1.333,676,1.75,682,1.87,684,2.614,686,2.933,689,2.933,691,3.314,692,3.79,693,2.375,695,3.184,696,2.185,697,1.87,698,1.514,699,3.297,702,1.87,703,1.292,704,1.514,705,1.514,706,3.053,739,2.065,856,2.023,858,2.74,929,2.185,977,2.185,980,1.393,988,4.153,994,1.772,1000,1.393,1001,2.818,1002,1.514,1040,0.85,1208,2.696,1239,0.766,1240,1.129,1241,1.292,1250,2.831,1329,1.666,1340,2.375,1343,3.053,1346,1.514,1348,1.292,1349,1.666,1414,1.891,1470,2.933,1510,2.931,1793,3.225,1796,4.21,1799,3.967,1801,4.21,1846,4.402,1847,2.933,1857,3.225,1866,2.614,1879,2.614,1880,4.402,1885,2.185,1891,3.652,1892,5.241,1893,1.666,1895,1.666,1896,1.666,1897,1.666,1898,1.514,1899,1.666,1900,1.666,1901,1.666,1902,1.666,1903,1.666,1904,1.666,1905,1.666,1906,1.666,1907,3.225,1908,1.666,1909,1.666,1910,1.666,1911,2.614,1912,1.666,1913,1.666,1914,1.514,1915,1.666,1916,3.225,1918,2.375,1920,2.375,1921,2.614,1922,1.666,1924,1.666,1925,1.666,1926,1.666,1927,1.666,1928,2.614,1929,1.666,1930,3.225,1931,2.614,1960,1.87,1968,1.87,1982,2.933,2018,4.21,2020,2.185,2044,2.614,2045,2.614,2058,2.375,2059,1.87,2060,1.87,2061,1.87,2134,2.933,2298,2.614,2379,3.652,2409,2.375,2634,1.666,2764,2.933,2789,6.27,2790,6.27,2791,2.179,2792,3.418,2793,4.776,2794,4.217,2795,3.418,2796,5.188,2797,4.217,2798,4.217,2799,3.418,2800,3.418,2801,2.179,2802,3.418,2803,3.418,2804,2.179,2805,3.418,2806,3.418,2807,3.418,2808,3.418,2809,3.418,2810,2.179,2811,2.179,2812,4.776,2813,4.776,2814,5.505,2815,5.505,2816,2.179,2817,6.128,2818,2.179,2819,2.179,2820,3.418,2821,2.933,2822,2.179,2823,3.418,2824,3.418,2825,2.179,2826,2.179,2827,2.179,2828,2.179,2829,3.418,2830,4.776,2831,2.179,2832,3.418,2833,2.179,2834,2.179,2835,3.418,2836,3.418,2837,3.418,2838,3.418,2839,3.418,2840,3.418,2841,3.418,2842,3.418,2843,2.179,2844,2.179,2845,3.418,2846,2.179,2847,2.179]],["title/components/WelcomeScreenComponent.html",[26,0.263,554,1.005]],["body/components/WelcomeScreenComponent.html",[3,0.165,4,0.165,5,0.165,7,1.243,14,1.059,24,0.019,25,0.434,26,0.462,32,0.611,50,1.23,51,1.114,56,0.192,59,0.611,60,0.877,65,1.835,66,1.659,67,1.396,68,1.396,69,1.023,70,1.114,71,1.396,75,0.307,76,1.293,79,0.544,88,1.171,92,1.114,104,0.573,140,4.523,187,1.199,242,0.015,243,0.015,244,1.23,245,1.542,246,1.358,248,1.358,249,1.358,256,1.358,486,1.358,487,1.621,488,1.703,489,1.358,490,1.95,491,1.358,492,2.103,493,1.358,494,1.293,495,1.358,496,1.293,497,1.23,498,1.358,499,1.358,500,1.358,501,1.293,502,1.358,503,1.358,504,1.358,505,1.171,506,1.703,507,1.358,508,1.358,509,1.293,510,1.293,511,1.703,512,1.358,513,1.293,514,1.293,515,1.358,516,1.293,517,1.358,518,1.293,519,1.293,520,1.358,521,1.293,522,1.293,523,1.703,524,1.293,525,1.358,526,1.358,527,1.358,528,1.23,529,1.358,530,1.293,531,1.293,532,1.293,533,1.293,534,1.358,535,1.293,536,1.23,537,1.358,538,1.293,539,1.358,540,1.358,541,1.23,542,1.23,543,1.358,544,1.358,545,1.358,546,1.358,547,1.358,548,0.956,549,1.358,550,1.358,551,1.293,552,1.293,553,1.358,554,1.856,555,1.979,556,1.86,557,1.358,558,1.358,569,3.507,690,5.076,712,2.884,969,4.523,1317,3.781,1339,3.781,1573,4.111,2080,5.076,2848,4.718,2849,4.718,2850,4.718,2851,5.915,2852,5.915,2853,5.915,2854,5.076,2855,5.915,2856,5.915,2857,6.773,2858,5.915,2859,5.915,2860,5.076,2861,5.915]],["title/dependencies.html",[2862,2.625,2863,3.376]],["body/dependencies.html",[24,0.02,32,0.73,34,1.266,36,2.199,242,0.017,243,0.017,571,2.45,585,3.344,613,3.344,915,3.605,1012,3.919,1600,4.84,2863,4.313,2864,5.639,2865,7.542,2866,5.639,2867,6.589,2868,5.639,2869,5.639,2870,5.639,2871,5.639,2872,6.589,2873,5.655,2874,5.639,2875,5.639,2876,5.639,2877,5.639,2878,5.639,2879,5.639,2880,5.639,2881,5.639,2882,5.639,2883,5.639,2884,6.589,2885,5.639,2886,5.639,2887,5.639,2888,5.639,2889,5.639,2890,5.639,2891,5.639,2892,5.639]],["title/index.html",[16,0.125,2893,3.059,2894,3.059]],["body/index.html",[3,0.118,4,0.118,5,0.165,7,1.279,14,0.759,18,0.55,24,0.02,51,0.798,59,0.768,60,0.838,64,2.81,66,1.266,67,1.292,79,0.545,83,2.161,88,1.176,91,0.839,92,0.798,100,2.891,104,0.808,151,2.161,166,3.293,187,0.685,202,1.507,217,2.585,223,2.161,242,0.012,243,0.012,245,1.236,253,3.293,305,4.185,338,3.703,342,1.648,346,0.973,350,2.81,358,1.188,375,1.87,432,2.349,449,2.891,468,2.457,469,2.621,487,1.298,497,1.427,505,1.711,510,1.625,513,1.625,522,0.926,532,0.926,536,0.881,542,0.881,548,1.398,552,0.926,555,1.298,562,2.901,563,2.901,569,3.838,598,2.901,613,3.703,614,2.901,617,3.791,618,3.293,619,3.237,620,2.585,645,4.776,646,2.161,712,3.361,739,1.74,740,2.724,775,1.318,868,3.455,871,2.31,900,1.87,915,4.138,926,4.067,931,2.585,1000,3.029,1018,2.901,1305,2.585,1315,2.901,1319,2.585,1342,2.901,1383,2.901,1415,3.293,1417,2.901,1548,2.585,1550,2.585,1553,3.791,1614,2.161,1813,3.624,1822,2.585,1827,2.901,1828,2.901,1880,2.585,1892,3.803,1920,3.803,1945,2.901,1949,4.067,1955,5.09,2000,2.901,2032,2.585,2058,3.293,2098,2.901,2206,2.901,2380,2.585,2409,3.293,2411,4.185,2412,3.624,2440,2.901,2514,2.901,2692,2.901,2821,2.901,2854,4.696,2860,5.705,2863,3.624,2873,2.901,2895,5.931,2896,4.739,2897,5.472,2898,3.38,2899,3.38,2900,6.245,2901,4.739,2902,4.739,2903,3.38,2904,3.38,2905,3.38,2906,4.536,2907,4.739,2908,4.739,2909,5.931,2910,5.472,2911,5.931,2912,4.739,2913,5.931,2914,5.472,2915,5.472,2916,3.38,2917,2.901,2918,3.38,2919,4.739,2920,3.38,2921,4.739,2922,4.739,2923,5.931,2924,4.739,2925,4.739,2926,3.38,2927,6.245,2928,3.38,2929,3.38,2930,3.38,2931,3.38,2932,4.739,2933,3.38,2934,3.38,2935,3.38,2936,4.739,2937,3.38,2938,4.739,2939,3.38,2940,3.38,2941,3.38,2942,3.38,2943,3.38,2944,3.38,2945,5.472,2946,4.739,2947,5.472,2948,4.739,2949,4.739,2950,3.38,2951,4.739,2952,5.472,2953,4.696,2954,3.38,2955,3.38,2956,3.38,2957,2.901,2958,3.38,2959,3.38,2960,3.38,2961,5.472,2962,3.38,2963,4.739,2964,3.38,2965,3.38,2966,4.739,2967,4.739,2968,5.472,2969,3.38,2970,3.38,2971,3.38,2972,5.472,2973,3.38,2974,3.38,2975,3.38,2976,3.38,2977,4.739,2978,4.739,2979,3.38,2980,3.38,2981,3.38,2982,4.739,2983,5.472,2984,3.38,2985,4.739,2986,3.38,2987,3.38,2988,3.38,2989,3.38,2990,3.38,2991,3.38,2992,3.38,2993,3.38,2994,3.38,2995,3.38,2996,3.38,2997,3.38,2998,3.38,2999,5.472,3000,3.38,3001,3.38,3002,5.472,3003,3.38,3004,3.38,3005,3.38,3006,3.38,3007,4.739,3008,3.38,3009,3.38,3010,3.38,3011,3.38,3012,4.739,3013,4.739,3014,4.739,3015,4.739,3016,4.739,3017,3.38,3018,3.38,3019,3.38,3020,3.38,3021,6.894,3022,3.38,3023,3.38,3024,3.38,3025,4.739,3026,3.38,3027,4.739,3028,3.38,3029,3.38,3030,3.38,3031,4.739,3032,3.38,3033,3.38,3034,3.38,3035,3.38,3036,3.38,3037,3.38,3038,3.38,3039,3.38,3040,3.38,3041,3.38,3042,3.38,3043,3.38,3044,3.38,3045,3.38,3046,3.38,3047,3.38,3048,3.38,3049,3.38,3050,3.38,3051,3.38,3052,3.38,3053,3.38,3054,3.38,3055,3.38,3056,3.38,3057,3.38,3058,3.38,3059,3.38,3060,3.38,3061,3.38,3062,3.38,3063,3.38,3064,3.38,3065,3.38,3066,3.38,3067,3.38,3068,3.38,3069,3.38,3070,3.38,3071,3.38,3072,3.38,3073,3.38,3074,3.38,3075,3.38,3076,3.38,3077,3.38,3078,3.38,3079,3.38,3080,3.38,3081,3.38,3082,3.38,3083,3.38,3084,3.38,3085,3.38,3086,3.38,3087,3.38,3088,3.38,3089,3.38,3090,3.38,3091,3.38,3092,3.38]],["title/modules.html",[3093,4.304]],["body/modules.html",[24,0.017,242,0.017,243,0.017,3093,5.193]],["title/overview.html",[2906,3.835]],["body/overview.html",[2,2.221,24,0.017,242,0.017,243,0.017,245,1.565,596,2.607,708,3.558,1289,4.589,2906,4.589,3094,6.001,3095,6.001,3096,6.001]],["title/properties.html",[17,0.572,2862,2.625]],["body/properties.html",[17,0.781,24,0.018,242,0.017,243,0.017,2953,5.177,3097,6.032]],["title/miscellaneous/typealiases.html",[3098,2.126,3099,4.414]],["body/miscellaneous/typealiases.html",[16,0.244,23,0.28,24,0.017,242,0.017,243,0.017,1094,3.836,1111,4.049,1112,3.836,3098,4.171,3100,6.001,3101,6.001]],["title/miscellaneous/variables.html",[2392,3.068,3098,2.126]],["body/miscellaneous/variables.html",[15,2.347,16,0.173,22,0.691,23,0.315,24,0.02,46,2.829,54,2.865,69,0.734,78,0.905,83,3.929,91,1.053,99,1.162,104,0.672,106,0.913,129,1.526,158,1.603,180,1.063,242,0.014,243,0.014,252,3.861,296,1.98,297,1.885,325,1.12,337,5.588,338,3.861,339,5.588,340,5.588,341,5.588,342,3.174,364,1.106,468,2.199,480,3.602,569,4.104,625,1.283,649,2.147,717,2.068,739,1.757,833,2.515,835,3.533,836,2.712,840,4.742,871,2.068,879,5.588,886,2.934,887,3.602,903,3.641,904,3.641,905,3.641,1202,2.948,1208,2.712,1218,2.948,1239,1.943,1264,3.244,1269,3.641,1274,2.948,1275,3.641,1282,3.641,1631,3.244,1764,4.742,1792,3.244,2392,2.948,2678,4.742,2680,3.641,2917,3.641,2957,5.588,3098,2.948,3102,5.526,3103,4.242,3104,4.242,3105,4.242,3106,6.146,3107,5.526,3108,5.526,3109,5.526,3110,5.526,3111,6.146,3112,5.526,3113,5.526,3114,5.526,3115,6.146,3116,5.526,3117,4.242,3118,4.242,3119,4.242,3120,4.242,3121,4.242,3122,4.242,3123,4.242,3124,4.242,3125,4.242,3126,4.242,3127,4.242,3128,4.242,3129,4.242,3130,4.242,3131,4.242,3132,4.242,3133,5.526,3134,4.242,3135,5.526,3136,5.526,3137,5.526,3138,5.526,3139,5.526,3140,5.526,3141,5.526,3142,5.526,3143,5.526,3144,5.526,3145,5.526,3146,5.526,3147,5.526,3148,5.526,3149,4.242,3150,4.242,3151,6.146,3152,5.526,3153,4.242,3154,4.242,3155,5.526,3156,5.526,3157,4.242,3158,4.242,3159,4.242,3160,4.242,3161,4.242,3162,4.242,3163,4.242,3164,4.242,3165,4.242,3166,4.242,3167,4.242,3168,4.242,3169,4.242,3170,4.242,3171,4.242,3172,4.242,3173,5.526,3174,6.511,3175,6.511]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":129,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":3097,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":2432,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["0.14.3",{"_index":2892,"title":{},"body":{"dependencies.html":{}}}],["0.15",{"_index":461,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["0.3s",{"_index":370,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["00000014",{"_index":1893,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["017643203362e",{"_index":2184,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["0px",{"_index":405,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["0rem",{"_index":1359,"title":{},"body":{"components/HeaderComponent.html":{}}}],["1",{"_index":346,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/EmojiContext.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["1.1",{"_index":455,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/InnerChannelComponent.html":{}}}],["1.125rem",{"_index":998,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["1.2rem",{"_index":1005,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["1.5.5",{"_index":2882,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1278,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["10.12.5",{"_index":2880,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":437,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["1001",{"_index":2433,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["100px",{"_index":413,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["100vh",{"_index":698,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["100vw",{"_index":356,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["10px",{"_index":447,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["10rem",{"_index":702,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["11px",{"_index":1926,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["12",{"_index":3095,"title":{},"body":{"overview.html":{}}}],["1200px",{"_index":1341,"title":{},"body":{"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{}}}],["125px",{"_index":1014,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["1278px",{"_index":482,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["12px",{"_index":415,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["13",{"_index":3096,"title":{},"body":{"overview.html":{}}}],["13.12.0",{"_index":2890,"title":{},"body":{"dependencies.html":{}}}],["13px",{"_index":1254,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["147px",{"_index":417,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["14px",{"_index":706,"title":{},"body":{"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["15",{"_index":1496,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/PrivacyComponent.html":{}}}],["150px",{"_index":1251,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["15px",{"_index":433,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["16",{"_index":2206,"title":{},"body":{"components/PrivacyComponent.html":{},"index.html":{}}}],["160px",{"_index":697,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["16px",{"_index":472,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["17",{"_index":2210,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["17.1.0",{"_index":2870,"title":{},"body":{"dependencies.html":{}}}],["17.3.0",{"_index":2865,"title":{},"body":{"dependencies.html":{}}}],["17.3.10",{"_index":2867,"title":{},"body":{"dependencies.html":{}}}],["17.x",{"_index":2954,"title":{},"body":{"index.html":{}}}],["170px",{"_index":2060,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["17px",{"_index":1022,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["18",{"_index":2216,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["180px",{"_index":456,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["188px",{"_index":1919,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["18px",{"_index":414,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["1:1",{"_index":2923,"title":{},"body":{"index.html":{}}}],["1:837671090070:web:f294fc70edfcf2caeccfb7",{"_index":3148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1px",{"_index":406,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["1s",{"_index":1361,"title":{},"body":{"components/HeaderComponent.html":{}}}],["2",{"_index":1305,"title":{},"body":{"interfaces/EmojiContext.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["2.3.0",{"_index":2888,"title":{},"body":{"dependencies.html":{}}}],["2.3rem",{"_index":1023,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["2.8.5",{"_index":2879,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2220,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["200",{"_index":177,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["200px",{"_index":465,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["2016/679",{"_index":2102,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["206px",{"_index":1509,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["20px",{"_index":376,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["21",{"_index":2259,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["220px",{"_index":1596,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["22px",{"_index":1925,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["24px",{"_index":379,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["25px",{"_index":416,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["260px",{"_index":1931,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["269px",{"_index":2062,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["26px",{"_index":2444,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["28px",{"_index":1922,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["29px",{"_index":1601,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["2px",{"_index":470,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["2rem",{"_index":703,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["3",{"_index":931,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PrivacyComponent.html":{},"index.html":{}}}],["3.2.6",{"_index":2886,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1871,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["300px",{"_index":1930,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["30px",{"_index":404,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["320px",{"_index":1916,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["32px",{"_index":1348,"title":{},"body":{"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["33",{"_index":3094,"title":{},"body":{"overview.html":{}}}],["333",{"_index":1602,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["335px",{"_index":1598,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["33px",{"_index":1508,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["345px",{"_index":1924,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["346px",{"_index":1927,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["35.2px",{"_index":1928,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["354px",{"_index":2059,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["358px",{"_index":2443,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["35px",{"_index":1246,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["36px",{"_index":1929,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["371px",{"_index":1603,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["390px",{"_index":485,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["398px",{"_index":1604,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["3b22e",{"_index":3142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3b22e.appspot.com",{"_index":3144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3b22e.firebaseapp.com",{"_index":3140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3px",{"_index":479,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["4",{"_index":2098,"title":{},"body":{"components/PrivacyComponent.html":{},"index.html":{}}}],["400",{"_index":473,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["4000",{"_index":1523,"title":{},"body":{"components/IntroComponent.html":{}}}],["40px",{"_index":403,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["411px",{"_index":1597,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["420px",{"_index":2437,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["441px",{"_index":2061,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["44px",{"_index":2439,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["45px",{"_index":1898,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["46px",{"_index":1905,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["47226",{"_index":1386,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["491px",{"_index":1906,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["49px",{"_index":419,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["4px",{"_index":458,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["4rem",{"_index":1344,"title":{},"body":{"components/HeaderComponent.html":{}}}],["5",{"_index":1289,"title":{},"body":{"interfaces/EmojiContext.html":{},"components/ImprintComponent.html":{},"overview.html":{}}}],["5.375rem",{"_index":999,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["50",{"_index":388,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["500",{"_index":1914,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["50000",{"_index":1232,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["500px",{"_index":1510,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["50px",{"_index":700,"title":{},"body":{"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["50vh",{"_index":1355,"title":{},"body":{"components/HeaderComponent.html":{}}}],["50vw",{"_index":1354,"title":{},"body":{"components/HeaderComponent.html":{}}}],["512px",{"_index":1895,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["520px",{"_index":705,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["55.2px",{"_index":1908,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["56px",{"_index":1363,"title":{},"body":{"components/HeaderComponent.html":{}}}],["58px",{"_index":1247,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["5b5ffc",{"_index":420,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["5px",{"_index":446,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["6",{"_index":2262,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["6.2.7",{"_index":2885,"title":{},"body":{"dependencies.html":{}}}],["606px",{"_index":2843,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["60px",{"_index":438,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["63px",{"_index":476,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["65",{"_index":995,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["65px",{"_index":1003,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["686868",{"_index":442,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["692px",{"_index":1894,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["698px",{"_index":2057,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["6px",{"_index":477,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["7.8.0",{"_index":2883,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":1912,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["700",{"_index":381,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["70px",{"_index":1349,"title":{},"body":{"components/HeaderComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["768px",{"_index":484,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["77",{"_index":2232,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["780px",{"_index":704,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["792px",{"_index":997,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["837671090070",{"_index":3146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["850px",{"_index":1358,"title":{},"body":{"components/HeaderComponent.html":{}}}],["868px",{"_index":1020,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["8px",{"_index":459,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["9",{"_index":1986,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["9.2.0",{"_index":2877,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":1985,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["920px",{"_index":701,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["92c83e",{"_index":2442,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["_error",{"_index":1505,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["ab",{"_index":139,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["abfragen",{"_index":2128,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["abgelaufen",{"_index":1883,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["abgleich",{"_index":2135,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["abs",{"_index":2212,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["abschließend",{"_index":2299,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["absolute",{"_index":448,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["abstractcontrol",{"_index":1953,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["abwesend",{"_index":1202,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"miscellaneous/variables.html":{}}}],["abzuschließen",{"_index":2841,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["accessible",{"_index":3008,"title":{},"body":{"index.html":{}}}],["account",{"_index":2963,"title":{},"body":{"index.html":{}}}],["acollection",{"_index":590,"title":{},"body":{"components/AppComponent.html":{}}}],["action",{"_index":225,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["action'},{'name",{"_index":498,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["action.component.html",{"_index":622,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.scss",{"_index":621,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts",{"_index":612,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:26",{"_index":659,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:27",{"_index":660,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:28",{"_index":631,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:46",{"_index":654,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:61",{"_index":651,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.component.ts:72",{"_index":643,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["action.html",{"_index":3023,"title":{},"body":{"index.html":{}}}],["action/auth",{"_index":611,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["actioncodesettings",{"_index":1979,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["actions",{"_index":615,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["activatedroute",{"_index":629,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{}}}],["actual",{"_index":2956,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":558,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["add",{"_index":67,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["adddoc",{"_index":1656,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["adddoc(messagesref",{"_index":1671,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["added",{"_index":85,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{}}}],["addemojitomessage",{"_index":1292,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["addemojitothreadmessage",{"_index":2578,"title":{},"body":{"injectables/ThreadService.html":{}}}],["addemojitothreadmessage(threadid",{"_index":2596,"title":{},"body":{"injectables/ThreadService.html":{}}}],["adding",{"_index":58,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["addition",{"_index":1547,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["additional",{"_index":924,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["additionally",{"_index":2902,"title":{},"body":{"index.html":{}}}],["addmembers",{"_index":1593,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["addmembersdialogcomponent",{"_index":76,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["addmembersdialogdata",{"_index":1,"title":{"interfaces/AddMembersDialogData.html":{}},"body":{"interfaces/AddMembersDialogData.html":{}}}],["addmembersdialogmobilecomponent",{"_index":244,"title":{"components/AddMembersDialogMobileComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["addmembersmobiledata",{"_index":263,"title":{"interfaces/AddMembersMobileData.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["address",{"_index":2409,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["adds",{"_index":186,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{}}}],["adjust",{"_index":2955,"title":{},"body":{"index.html":{}}}],["adjusting",{"_index":2931,"title":{},"body":{"index.html":{}}}],["adresse",{"_index":2018,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["agg",{"_index":2484,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["agg[id",{"_index":2528,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["aizasyagxrdy1okm0c4htchulxb0cf3oiytg7go",{"_index":3138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aktiv",{"_index":1218,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":3100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":360,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["allchannels",{"_index":711,"title":{},"body":{"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["allchannels.filter((ch",{"_index":1478,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["allchannels.some",{"_index":957,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["alle",{"_index":136,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/PrivacyComponent.html":{}}}],["allein",{"_index":2150,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["allenfalls",{"_index":2295,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["allmembers",{"_index":2532,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["allow",{"_index":273,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["allowed",{"_index":423,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["allows",{"_index":1437,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["allusers",{"_index":103,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"classes/BaseChatComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["allusers.filter((user",{"_index":1584,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["already",{"_index":152,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["alreadyhascreator",{"_index":1071,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["als",{"_index":2106,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["alternativ",{"_index":2211,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anbieter",{"_index":2179,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anbieter/verantwortliche",{"_index":2219,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["andere",{"_index":2133,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anderen",{"_index":2152,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anderslautenden",{"_index":2277,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anfrage",{"_index":2291,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anfragen",{"_index":2038,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["angabe",{"_index":2293,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angaben",{"_index":1376,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["angebotenen",{"_index":2094,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angegebene",{"_index":2026,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["angegebenen",{"_index":2288,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angemeldet",{"_index":2774,"title":{},"body":{"injectables/UserService.html":{}}}],["angular",{"_index":915,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular.json",{"_index":3063,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":2864,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":2866,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/overlay",{"_index":38,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["angular/common",{"_index":34,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2868,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":32,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2869,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":664,"title":{},"body":{"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["angular/fire/firestore",{"_index":584,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["angular/fire/storage",{"_index":2734,"title":{},"body":{"injectables/UserService.html":{}}}],["angular/forms",{"_index":36,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":2871,"title":{},"body":{"dependencies.html":{}}}],["angular/material/bottom",{"_index":44,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["angular/material/button",{"_index":951,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["angular/material/dialog",{"_index":42,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["angular/material/form",{"_index":948,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["angular/material/input",{"_index":950,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["angular/platform",{"_index":2872,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":571,"title":{},"body":{"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/IntroComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"dependencies.html":{}}}],["animation",{"_index":1360,"title":{},"body":{"components/HeaderComponent.html":{}}}],["anmelden",{"_index":1918,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["another",{"_index":902,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["anpassung",{"_index":2125,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["anschließenden",{"_index":2305,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ansicht",{"_index":2225,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["antworten",{"_index":2861,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["anwaltskanzlei",{"_index":2308,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["apikey",{"_index":3137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":66,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["app.component.html",{"_index":563,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["app.component.scss",{"_index":562,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["app.component.spec.ts",{"_index":3052,"title":{},"body":{"index.html":{}}}],["app.component.ts",{"_index":3053,"title":{},"body":{"index.html":{}}}],["app.config.ts",{"_index":3054,"title":{},"body":{"index.html":{}}}],["app.routes.ts",{"_index":3055,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":494,"title":{"components/AppComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["appconfig",{"_index":3102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appid",{"_index":3147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":2895,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":3118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":644,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["applyactioncode",{"_index":663,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["applyactioncode(this.auth",{"_index":680,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["appropriate",{"_index":657,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["appstateservice",{"_index":595,"title":{"injectables/AppStateService.html":{}},"body":{"injectables/AppStateService.html":{},"injectables/UserService.html":{}}}],["array",{"_index":800,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["arraybuffer",{"_index":785,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{}}}],["art",{"_index":2097,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["artikel",{"_index":2243,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["asc",{"_index":1131,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["assets/img/avatar.png",{"_index":2407,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["async",{"_index":625,"title":{},"body":{"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["attach",{"_index":3004,"title":{},"body":{"index.html":{}}}],["attempts",{"_index":2793,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["auch",{"_index":2200,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auf",{"_index":1573,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PrivacyComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["aufbewahrungspflichten",{"_index":2275,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufgetreten",{"_index":1888,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["aufgrund",{"_index":2242,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufsichtsbehörde",{"_index":2223,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufwand",{"_index":2253,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aus",{"_index":2049,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["ausgeführter",{"_index":2113,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ausgewählte",{"_index":2556,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["auskunft",{"_index":2195,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auslesen",{"_index":2127,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auth",{"_index":497,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["auth.currentuser",{"_index":1226,"title":{},"body":{"components/DirectMessagesComponent.html":{},"injectables/UserService.html":{}}}],["auth.currentuser?.uid",{"_index":1212,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["auth/expired",{"_index":1884,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["auth/invalid",{"_index":1878,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["auth/too",{"_index":2034,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["auth/user",{"_index":2027,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["authactioncomponent",{"_index":496,"title":{"components/AuthActionComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["authdomain",{"_index":3139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":614,"title":{},"body":{"components/AuthActionComponent.html":{},"index.html":{}}}],["auto",{"_index":390,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["automatically",{"_index":2993,"title":{},"body":{"index.html":{}}}],["automatisierter",{"_index":2111,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["avatar",{"_index":449,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"index.html":{}}}],["avatar'},{'name",{"_index":500,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["avatar.html",{"_index":3024,"title":{},"body":{"index.html":{}}}],["avatar/avatar.component",{"_index":579,"title":{},"body":{"components/AppComponent.html":{}}}],["avatar/profile",{"_index":2940,"title":{},"body":{"index.html":{}}}],["avatarcomponent",{"_index":499,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["avatardataurl",{"_index":2724,"title":{},"body":{"injectables/UserService.html":{}}}],["avatarurl",{"_index":833,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":676,"title":{},"body":{"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["away",{"_index":648,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["b",{"_index":981,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PrivacyComponent.html":{}}}],["backend",{"_index":2898,"title":{},"body":{"index.html":{}}}],["background",{"_index":368,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["band",{"_index":1844,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["bar",{"_index":475,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["base.ts",{"_index":2315,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:10",{"_index":2334,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:11",{"_index":2331,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:12",{"_index":2355,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:13",{"_index":2354,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:14",{"_index":2341,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:15",{"_index":2342,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:16",{"_index":2332,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:17",{"_index":2376,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:18",{"_index":2343,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:19",{"_index":2349,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:20",{"_index":2346,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:21",{"_index":2347,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:22",{"_index":2360,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:23",{"_index":2333,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:24",{"_index":2350,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:25",{"_index":2366,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:26",{"_index":2364,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:27",{"_index":2363,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:28",{"_index":2365,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:29",{"_index":2359,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:3",{"_index":2542,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["base.ts:30",{"_index":2348,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:31",{"_index":2358,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:32",{"_index":2330,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:33",{"_index":2362,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:34",{"_index":2353,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:35",{"_index":2361,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:36",{"_index":2344,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:37",{"_index":2340,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:38",{"_index":2329,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:39",{"_index":2336,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:4",{"_index":2538,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["base.ts:40",{"_index":2335,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["base.ts:41",{"_index":2345,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:42",{"_index":2375,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["base.ts:44",{"_index":2357,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["base.ts:45",{"_index":2371,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:46",{"_index":2372,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:47",{"_index":2370,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:48",{"_index":2368,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:49",{"_index":2369,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:5",{"_index":2541,"title":{},"body":{"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:50",{"_index":2373,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:51",{"_index":2367,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:52",{"_index":2374,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:53",{"_index":2337,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:54",{"_index":2339,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{}}}],["base.ts:6",{"_index":2539,"title":{},"body":{"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:7",{"_index":2351,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:8",{"_index":2338,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["base.ts:9",{"_index":2352,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["basechatcomponent",{"_index":707,"title":{"classes/BaseChatComponent.html":{}},"body":{"classes/BaseChatComponent.html":{}}}],["based",{"_index":1813,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"index.html":{}}}],["baseq",{"_index":1718,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["beantworten",{"_index":2297,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["beantwortet",{"_index":2300,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["beantwortung",{"_index":2294,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bearbeitung",{"_index":2289,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bedarf",{"_index":2405,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["beenden",{"_index":2406,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["begins",{"_index":1568,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["bei",{"_index":1339,"title":{},"body":{"components/HeaderComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/WelcomeScreenComponent.html":{}}}],["beispiel",{"_index":984,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["beitreten",{"_index":2859,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["belonging",{"_index":1542,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["below",{"_index":2000,"title":{},"body":{"components/PasswortResetComponent.html":{},"index.html":{}}}],["benutzer",{"_index":2031,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["ber",{"_index":2055,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["berblick",{"_index":2855,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["berein",{"_index":1862,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["bereitgestellten",{"_index":2218,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bereits",{"_index":986,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["bereitstellung",{"_index":2085,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["berichtigung",{"_index":2201,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bermittlung",{"_index":2131,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["berprüfen",{"_index":2771,"title":{},"body":{"injectables/UserService.html":{}}}],["beschreibung",{"_index":987,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["beschriebene",{"_index":2189,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["beschwerde",{"_index":2221,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["besteht",{"_index":2247,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["besten",{"_index":975,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["bestimmungen",{"_index":2231,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bestätigen",{"_index":2842,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["bestätigung",{"_index":2192,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betreffende",{"_index":2194,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betreffenden",{"_index":2209,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betroffenen",{"_index":2175,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["between",{"_index":366,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["bisher",{"_index":143,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["bitte",{"_index":693,"title":{},"body":{"components/AuthActionComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["black",{"_index":994,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["blick",{"_index":2186,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["block",{"_index":1249,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["blue",{"_index":412,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["blur",{"_index":1970,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["bold",{"_index":1911,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["boolean",{"_index":603,"title":{},"body":{"injectables/AppStateService.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["border",{"_index":386,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["both",{"_index":1834,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["bottom",{"_index":252,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["bottomsheet",{"_index":62,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["bottomsheetref",{"_index":111,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["box",{"_index":429,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["box.ng",{"_index":1511,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["branch",{"_index":3068,"title":{},"body":{"index.html":{}}}],["brief",{"_index":271,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["brightness(0",{"_index":393,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["brightness(100",{"_index":400,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["brightness(93",{"_index":1903,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["broadcastcontext",{"_index":834,"title":{"interfaces/BroadcastContext.html":{}},"body":{"interfaces/BroadcastContext.html":{}}}],["browser",{"_index":2873,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bspw",{"_index":2301,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["btn",{"_index":451,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["buildchannelsbynamequery",{"_index":1141,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["buildchannelsbynamequery(channelname",{"_index":1146,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["buildlistenformessagesquery",{"_index":1683,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildlistenformessagesquery(type",{"_index":1693,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildlistenmessagesquery",{"_index":1684,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildlistenmessagesquery(type",{"_index":1695,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildmessagepayload",{"_index":1626,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["buildmessagepayload(data",{"_index":1636,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["buildnewchannel",{"_index":1403,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["buildnewchannel(name",{"_index":1421,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["buildprivatequery",{"_index":1685,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildprivatequery(messagesref",{"_index":1697,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildquerybytype",{"_index":1627,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["buildquerybytype(type",{"_index":1638,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["buildqueryforid",{"_index":1628,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["buildqueryforid(type",{"_index":1640,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["builds",{"_index":1424,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["buildthreadchannelquery",{"_index":1686,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildthreadchannelquery(messagesref",{"_index":1701,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildthreadmessagesquery",{"_index":2579,"title":{},"body":{"injectables/ThreadService.html":{}}}],["buildthreadmessagesquery(threadid",{"_index":2598,"title":{},"body":{"injectables/ThreadService.html":{}}}],["buildthreadquery",{"_index":1687,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["buildthreadquery(messagesref",{"_index":1703,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["button",{"_index":411,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["button:disabled",{"_index":483,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["bzw",{"_index":2204,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["c",{"_index":958,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["c.channels",{"_index":1745,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.channels.map(x",{"_index":1750,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.channelservice.getlastusedemojis(channelid",{"_index":1756,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.dialog.opendialogs.length",{"_index":1754,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.hidetooltip",{"_index":1785,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.lastusedemojisreceived",{"_index":1761,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.lastusedemojissent",{"_index":1758,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.messageservice",{"_index":1786,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.messageservice.loadreplycountslive([tid",{"_index":1770,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.name.tolowercase",{"_index":959,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["c.onfocustextarea",{"_index":1755,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.selectedchannel",{"_index":1752,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.unsubscribesubcollection",{"_index":1742,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.unsubscribesubcollection.unsubscribe",{"_index":1743,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.unsubscribetoplevel",{"_index":1740,"title":{},"body":{"interfaces/MyState.html":{}}}],["c.unsubscribetoplevel.unsubscribe",{"_index":1741,"title":{},"body":{"interfaces/MyState.html":{}}}],["callback",{"_index":1708,"title":{},"body":{"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["callback(docsnap.data",{"_index":2636,"title":{},"body":{"injectables/ThreadService.html":{}}}],["callback(this.mapmessagesdocs(snapshot",{"_index":1724,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["callback(this.mapsnapshotdocs(snap",{"_index":1733,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["callback(this.mapthreadsnapshot(snap",{"_index":2651,"title":{},"body":{"injectables/ThreadService.html":{}}}],["callback(updatedemojissent",{"_index":2674,"title":{},"body":{"injectables/ThreadService.html":{}}}],["callback(users",{"_index":2783,"title":{},"body":{"injectables/UserService.html":{}}}],["called",{"_index":1824,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["caller",{"_index":914,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["calls",{"_index":656,"title":{},"body":{"components/AuthActionComponent.html":{},"components/InnerChannelComponent.html":{}}}],["canceleditinghelper",{"_index":1266,"title":{},"body":{"interfaces/EditState.html":{}}}],["cancels",{"_index":224,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["card",{"_index":2431,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["case",{"_index":1877,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["catch",{"_index":158,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/MessageCrudService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["caught",{"_index":1816,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["cb",{"_index":2477,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["ccc",{"_index":440,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/PasswortResetComponent.html":{}}}],["cd",{"_index":2971,"title":{},"body":{"index.html":{}}}],["cdk",{"_index":1544,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["cdkconnectedoverlayhasbackdrop]=\"false",{"_index":335,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["cdkconnectedoverlaypositions",{"_index":336,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["cdkoverlay",{"_index":63,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["cdr",{"_index":1411,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["center",{"_index":362,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["ch",{"_index":851,"title":{},"body":{"interfaces/BroadcastContext.html":{},"components/InnerChannelComponent.html":{},"interfaces/MyState.html":{}}}],["ch.createdby",{"_index":1749,"title":{},"body":{"interfaces/MyState.html":{}}}],["ch.description",{"_index":1748,"title":{},"body":{"interfaces/MyState.html":{}}}],["ch.id",{"_index":862,"title":{},"body":{"interfaces/BroadcastContext.html":{},"components/InnerChannelComponent.html":{},"interfaces/MyState.html":{}}}],["ch.members",{"_index":1747,"title":{},"body":{"interfaces/MyState.html":{}}}],["ch.membersuid.includes(userid",{"_index":1479,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["ch.name",{"_index":1746,"title":{},"body":{"interfaces/MyState.html":{}}}],["ch.name.tolowercase",{"_index":1490,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["change",{"_index":1417,"title":{},"body":{"components/InnerChannelComponent.html":{},"index.html":{}}}],["changedetectorref",{"_index":1412,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["changes",{"_index":1822,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"index.html":{}}}],["channel",{"_index":60,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["channel's",{"_index":938,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["channel'},{'name",{"_index":523,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["channel.component.html",{"_index":1399,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.scss",{"_index":1398,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts",{"_index":1396,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:100",{"_index":1427,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:118",{"_index":1433,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:127",{"_index":1435,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:142",{"_index":1423,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:159",{"_index":1449,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:168",{"_index":1445,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:179",{"_index":1454,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:187",{"_index":1436,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:34",{"_index":1461,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:39",{"_index":1419,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:42",{"_index":1466,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:45",{"_index":1464,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:54",{"_index":1456,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:57",{"_index":1472,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:60",{"_index":1469,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:62",{"_index":1413,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:69",{"_index":1459,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:80",{"_index":1441,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.component.ts:91",{"_index":1440,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.date",{"_index":2566,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["channel.html",{"_index":3031,"title":{},"body":{"index.html":{}}}],["channel.members.push",{"_index":1075,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["channel.members.some((m",{"_index":1072,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["channel.ng",{"_index":1512,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel.service",{"_index":49,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["channel.service.ts",{"_index":3050,"title":{},"body":{"index.html":{}}}],["channel/inner",{"_index":1395,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channel/thread",{"_index":2559,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["channeldata",{"_index":1062,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["channeldata['members",{"_index":1088,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["channeldata['membersuid",{"_index":1089,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["channeldialogcomponent",{"_index":501,"title":{"components/ChannelDialogComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["channeldoc",{"_index":1044,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["channeldoc.data",{"_index":1047,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["channeldoc.exists",{"_index":1046,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["channeldocref",{"_index":1041,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{}}}],["channelemojiservice",{"_index":1024,"title":{"injectables/ChannelEmojiService.html":{}},"body":{"injectables/ChannelEmojiService.html":{}}}],["channelid",{"_index":19,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"interfaces/FirestoreMessageData.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{}}}],["channelmembershipservice",{"_index":1050,"title":{"injectables/ChannelMembershipService.html":{}},"body":{"injectables/ChannelMembershipService.html":{}}}],["channelmessage",{"_index":2560,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["channelmessagedata",{"_index":1093,"title":{"interfaces/ChannelMessageData.html":{}},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["channelmsg",{"_index":861,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["channelmsgservice",{"_index":1113,"title":{"injectables/ChannelMsgService.html":{}},"body":{"injectables/ChannelMsgService.html":{}}}],["channelname",{"_index":20,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelQueriesService.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["channelnameexists",{"_index":907,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["channelqueriesservice",{"_index":1139,"title":{"injectables/ChannelQueriesService.html":{}},"body":{"injectables/ChannelQueriesService.html":{}}}],["channels",{"_index":712,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/InnerChannelComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["channels.length",{"_index":850,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["channelselected",{"_index":1409,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["channelservice",{"_index":48,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["channel—helpful",{"_index":2979,"title":{},"body":{"index.html":{}}}],["characters",{"_index":933,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["chars",{"_index":947,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["chat",{"_index":505,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["chat'},{'name",{"_index":503,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["chat.component.ts",{"_index":710,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:10",{"_index":790,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:11",{"_index":787,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:12",{"_index":793,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:13",{"_index":825,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:14",{"_index":791,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:15",{"_index":778,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:16",{"_index":776,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:17",{"_index":795,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:18",{"_index":806,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:19",{"_index":802,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:20",{"_index":803,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:21",{"_index":808,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:22",{"_index":814,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:23",{"_index":812,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:24",{"_index":810,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:25",{"_index":813,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:26",{"_index":807,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:27",{"_index":794,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:28",{"_index":792,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:29",{"_index":788,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:30",{"_index":797,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:31",{"_index":796,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:32",{"_index":773,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:33",{"_index":805,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:36",{"_index":761,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:37",{"_index":764,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:38",{"_index":801,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:59",{"_index":798,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:60",{"_index":762,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:61",{"_index":823,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:64",{"_index":774,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:65",{"_index":770,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:66",{"_index":772,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:67",{"_index":779,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:68",{"_index":780,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:69",{"_index":777,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:70",{"_index":809,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:73",{"_index":781,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:74",{"_index":783,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:75",{"_index":765,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:76",{"_index":782,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:79",{"_index":817,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:8",{"_index":789,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:80",{"_index":818,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:81",{"_index":816,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:82",{"_index":804,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:83",{"_index":815,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:84",{"_index":822,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:85",{"_index":821,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:86",{"_index":820,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:87",{"_index":784,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat.component.ts:9",{"_index":799,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["chat/chat.component",{"_index":580,"title":{},"body":{"components/AppComponent.html":{}}}],["chatcomponent",{"_index":502,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["chatheadercomponent",{"_index":504,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["chats",{"_index":2924,"title":{},"body":{"index.html":{}}}],["chatting",{"_index":3003,"title":{},"body":{"index.html":{}}}],["check",{"_index":1950,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["checkemailexists",{"_index":1940,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["checkemailexists(email",{"_index":1947,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["checks",{"_index":929,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["child",{"_index":1019,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["chosen",{"_index":901,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["class",{"_index":75,"title":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["class=\"more",{"_index":347,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["class=\"selected",{"_index":344,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["classes",{"_index":708,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"overview.html":{}}}],["clean",{"_index":3074,"title":{},"body":{"index.html":{}}}],["clearbroadcastinput",{"_index":895,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["clearbroadcastinput(context",{"_index":854,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["clears",{"_index":1973,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["cleartimeout(this.inactivitytimeout",{"_index":1230,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["cli",{"_index":2952,"title":{},"body":{"index.html":{}}}],["click",{"_index":3002,"title":{},"body":{"index.html":{}}}],["clone",{"_index":2966,"title":{},"body":{"index.html":{}}}],["close",{"_index":84,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["closedialog",{"_index":909,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["closedialogorsheet",{"_index":239,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["closeemojipicker",{"_index":1307,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["closes",{"_index":203,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["closing",{"_index":82,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["code",{"_index":645,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"index.html":{}}}],["codes",{"_index":1815,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["coll",{"_index":1164,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["collapsed",{"_index":1468,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["collection",{"_index":582,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["collection(this.firestore",{"_index":591,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["collectiondata",{"_index":583,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["collectiondata(acollection",{"_index":593,"title":{},"body":{"components/AppComponent.html":{}}}],["collectiondata(q",{"_index":1132,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["collectiondata(qref",{"_index":1664,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["color",{"_index":369,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["column",{"_index":408,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["come",{"_index":1539,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["command",{"_index":2990,"title":{},"body":{"index.html":{}}}],["comments",{"_index":3088,"title":{},"body":{"index.html":{}}}],["commitmessage",{"_index":1629,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["commitmessage(payload",{"_index":1642,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["commonmodule",{"_index":33,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["communication",{"_index":2901,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2915,"title":{},"body":{"index.html":{}}}],["component",{"_index":26,"title":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["component.html",{"_index":3020,"title":{},"body":{"index.html":{}}}],["component.scss",{"_index":3047,"title":{},"body":{"index.html":{}}}],["component.ts",{"_index":3046,"title":{},"body":{"index.html":{}}}],["component_template",{"_index":491,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["components",{"_index":245,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{},"overview.html":{}}}],["confirm",{"_index":1829,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["confirmpassword",{"_index":1832,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["confirmpasswordreset",{"_index":1849,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["confirmpasswordreset(this.auth",{"_index":1865,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["connectionpositionpair",{"_index":3173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectreplycountstomessages(c",{"_index":1763,"title":{},"body":{"interfaces/MyState.html":{}}}],["considered",{"_index":946,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["const",{"_index":180,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["const.ts",{"_index":3115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructing",{"_index":1946,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["constructor",{"_index":107,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["constructor(auth",{"_index":1803,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["constructor(channelservice",{"_index":1534,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["constructor(dialog",{"_index":1410,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["constructor(dialogref",{"_index":911,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["constructor(firestore",{"_index":1028,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["constructor(location",{"_index":1369,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["constructor(private",{"_index":1040,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/IntroComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PrivacyComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"components/VerifyEmailComponent.html":{}}}],["constructor(route",{"_index":628,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["constructor(router",{"_index":1329,"title":{},"body":{"components/HeaderComponent.html":{},"components/IntroComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["constructor(userservice",{"_index":262,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{}}}],["constructs",{"_index":2800,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["contact",{"_index":1383,"title":{},"body":{"components/ImprintComponent.html":{},"index.html":{}}}],["contain",{"_index":1612,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{}}}],["container",{"_index":353,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["container:hover",{"_index":1599,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["containing",{"_index":1614,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"index.html":{}}}],["content",{"_index":364,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["content.emojis",{"_index":1311,"title":{},"body":{"interfaces/EmojiContext.html":{},"injectables/ThreadService.html":{}}}],["contents",{"_index":2905,"title":{},"body":{"index.html":{}}}],["context",{"_index":15,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"interfaces/BroadcastContext.html":{},"interfaces/EmojiContext.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/SelectedMembersDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["context.currentuser.avatarurl",{"_index":889,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.currentuser.id",{"_index":864,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/EmojiContext.html":{}}}],["context.currentuser.name",{"_index":866,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.currentuser?.name",{"_index":1303,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.imageurl",{"_index":860,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.isemojipickervisible",{"_index":893,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.lastusedemojisreceived",{"_index":1280,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.lastusedemojisreceived.includes(newemoji",{"_index":1306,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.lastusedemojisreceived.push",{"_index":1287,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.lastusedemojissent",{"_index":1279,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.lastusedemojissent.includes(newemoji",{"_index":1304,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.lastusedemojissent.push",{"_index":1284,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["context.messageservice.generateconversationid",{"_index":880,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.messageservice.sendchannelmessage(channelmsg",{"_index":873,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.messageservice.sendmessage(msgdata",{"_index":884,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.messagetoall",{"_index":891,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.messagetoall.trim",{"_index":857,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.resettextareaheightfn(textarea",{"_index":892,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["context.scrolltobottomfn",{"_index":894,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["contrast(104",{"_index":1904,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["contrast(90",{"_index":401,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["contributing",{"_index":2912,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":3066,"title":{},"body":{"index.html":{}}}],["control",{"_index":992,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{}}}],["control.mdc",{"_index":989,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["controls",{"_index":95,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/NewPasswortComponent.html":{}}}],["conversationid",{"_index":886,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"miscellaneous/variables.html":{}}}],["conversations",{"_index":2926,"title":{},"body":{"index.html":{}}}],["convertfirestoretimestamptodate",{"_index":713,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["convid",{"_index":879,"title":{},"body":{"interfaces/BroadcastContext.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":2390,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["copy",{"_index":300,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["corresponding",{"_index":3045,"title":{},"body":{"index.html":{}}}],["cors",{"_index":2878,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1301,"title":{},"body":{"interfaces/EmojiContext.html":{},"interfaces/MyState.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["count.service.ts",{"_index":2447,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:115",{"_index":2479,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:126",{"_index":2485,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:149",{"_index":2475,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:155",{"_index":2482,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:21",{"_index":2460,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:24",{"_index":2487,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:42",{"_index":2470,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:47",{"_index":2466,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:53",{"_index":2462,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:66",{"_index":2490,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:73",{"_index":2472,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:89",{"_index":2468,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["count.service.ts:95",{"_index":2464,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["countfilteredreplies",{"_index":2448,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["countfilteredreplies(field",{"_index":2461,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["counts",{"_index":2478,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["cover",{"_index":1241,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["create",{"_index":2999,"title":{},"body":{"index.html":{}}}],["createbroadcastmessagedata",{"_index":885,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["createbroadcastmessagedata(context",{"_index":883,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["createchannel",{"_index":1404,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["createchannel(name",{"_index":1426,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["created",{"_index":2916,"title":{},"body":{"index.html":{}}}],["createdby",{"_index":831,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{},"interfaces/MyState.html":{},"classes/ThreadChannelBase.html":{}}}],["creates",{"_index":935,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["creating",{"_index":898,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{}}}],["creating/updating",{"_index":918,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["creation",{"_index":1446,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["creatorname",{"_index":1422,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["credential",{"_index":2766,"title":{},"body":{"injectables/UserService.html":{}}}],["crud.service.ts",{"_index":1625,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:102",{"_index":1655,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:108",{"_index":1637,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:117",{"_index":1641,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:135",{"_index":1639,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:144",{"_index":1651,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:23",{"_index":1635,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:26",{"_index":1653,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:43",{"_index":1647,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:63",{"_index":1649,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:74",{"_index":1643,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["crud.service.ts:80",{"_index":1645,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["ctrl/ngx",{"_index":2875,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":284,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["currentchannels",{"_index":1444,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["currentdate",{"_index":714,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["currentdatestring",{"_index":715,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["currently",{"_index":1471,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["currentmessageid",{"_index":716,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/EditState.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["currentmsgid",{"_index":1259,"title":{},"body":{"interfaces/EditState.html":{}}}],["currentshowedit",{"_index":1261,"title":{},"body":{"interfaces/EditState.html":{}}}],["currentuid",{"_index":1069,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{}}}],["currentuser",{"_index":717,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"miscellaneous/variables.html":{}}}],["currentuser.id",{"_index":3158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuserid",{"_index":1156,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["currentuserstatus",{"_index":1174,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["cursor",{"_index":384,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["custom",{"_index":639,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["customize",{"_index":2903,"title":{},"body":{"index.html":{}}}],["cyclestep",{"_index":718,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["d9d9d9",{"_index":478,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["dabei",{"_index":2287,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dabubble",{"_index":569,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/IntroComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["damit",{"_index":2403,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["darüber",{"_index":2233,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["das",{"_index":2047,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["dass",{"_index":2226,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["data.channelid",{"_index":1678,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["data.content?.emojis",{"_index":2646,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.members",{"_index":1621,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["data.threadchannelid",{"_index":1676,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["data.type",{"_index":1675,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["data.useremail",{"_index":2429,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["data.username",{"_index":2428,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["data['lastusedemojisreceived",{"_index":1049,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["data['lastusedemojisreceived']?.slice(0",{"_index":2673,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data['lastusedemojissent",{"_index":1048,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["data['lastusedemojissent']?.slice(0",{"_index":2671,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data['parentid",{"_index":2652,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data['threadid",{"_index":2653,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data['timestamp']?.todate",{"_index":1674,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["data[field",{"_index":2658,"title":{},"body":{"injectables/ThreadService.html":{}}}],["database",{"_index":1945,"title":{},"body":{"components/PasswortResetComponent.html":{},"index.html":{}}}],["date",{"_index":767,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["date().toisostring",{"_index":771,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["date().tolocaletimestring",{"_index":869,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["date(msg.threadlastresponsetime",{"_index":1776,"title":{},"body":{"interfaces/MyState.html":{}}}],["daten",{"_index":2072,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutz",{"_index":1320,"title":{},"body":{"components/FooterComponent.html":{},"components/PrivacyComponent.html":{}}}],["datenschutzerklärung",{"_index":2070,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzrechtliche",{"_index":2230,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzrechtlichen",{"_index":2181,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenverarbeitung",{"_index":2177,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dateobj",{"_index":719,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["dauer",{"_index":2145,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dazu",{"_index":2235,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dd.mm.yyyy",{"_index":768,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{}}}],["de",{"_index":3133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoration",{"_index":1909,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["decorators",{"_index":302,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["deep",{"_index":351,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["deep.mat",{"_index":1015,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["default",{"_index":296,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":264,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["dein",{"_index":1579,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["deine",{"_index":690,"title":{},"body":{"components/AuthActionComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["deinem",{"_index":971,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["delay",{"_index":272,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/PasswortResetComponent.html":{}}}],["delete",{"_index":2943,"title":{},"body":{"index.html":{}}}],["deletedoc",{"_index":1068,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/UserService.html":{}}}],["deletedoc(channeldocref",{"_index":1086,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["deletedoc(userdocref",{"_index":2788,"title":{},"body":{"injectables/UserService.html":{}}}],["den",{"_index":2134,"title":{},"body":{"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["denen",{"_index":2238,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dependencies",{"_index":2863,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependencies:example",{"_index":3092,"title":{},"body":{"index.html":{}}}],["dependenciesmake",{"_index":3089,"title":{},"body":{"index.html":{}}}],["depending",{"_index":1561,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["depth",{"_index":2925,"title":{},"body":{"index.html":{}}}],["der",{"_index":1879,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["deren",{"_index":1582,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PrivacyComponent.html":{}}}],["des",{"_index":2401,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["describing",{"_index":1963,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["description",{"_index":10,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"components/VerifyEmailComponent.html":{}}}],["descriptive",{"_index":1818,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["design",{"_index":2950,"title":{},"body":{"index.html":{}}}],["desktop",{"_index":1548,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{}}}],["dessen",{"_index":2256,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["detail",{"_index":1515,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["details",{"_index":3081,"title":{},"body":{"index.html":{}}}],["detection",{"_index":1418,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["determine",{"_index":1999,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["dev",{"_index":3091,"title":{},"body":{"index.html":{}}}],["devspace'},{'name",{"_index":508,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["devspace.html",{"_index":3026,"title":{},"body":{"index.html":{}}}],["devspacecomponent",{"_index":507,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["dflex(center",{"_index":696,"title":{},"body":{"components/AuthActionComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["dflex(flex",{"_index":1910,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["dflex(null",{"_index":1343,"title":{},"body":{"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["dflex(space",{"_index":2434,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog",{"_index":14,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["dialog'},{'name",{"_index":492,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["dialog.component",{"_index":53,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["dialog.component.html",{"_index":72,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.scss",{"_index":74,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts",{"_index":9,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:103",{"_index":2387,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:105",{"_index":934,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.component.ts:111",{"_index":2393,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:113",{"_index":1565,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:115",{"_index":2389,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:121",{"_index":1569,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:133",{"_index":917,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.component.ts:135",{"_index":1558,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:149",{"_index":1567,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:165",{"_index":1564,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:178",{"_index":1559,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:186",{"_index":1555,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:28",{"_index":2547,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:30",{"_index":1613,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["dialog.component.ts:35",{"_index":1609,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["dialog.component.ts:38",{"_index":2554,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:39",{"_index":2553,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:40",{"_index":1538,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:41",{"_index":2410,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:45",{"_index":1540,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:46",{"_index":1620,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:47",{"_index":1619,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["dialog.component.ts:49",{"_index":2552,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:50",{"_index":1543,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:51",{"_index":2408,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:55",{"_index":1545,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:56",{"_index":937,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:58",{"_index":1618,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["dialog.component.ts:60",{"_index":1549,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:61",{"_index":939,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.component.ts:62",{"_index":2385,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:63",{"_index":2549,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["dialog.component.ts:65",{"_index":1551,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:66",{"_index":945,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:69",{"_index":1616,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["dialog.component.ts:71",{"_index":912,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:72",{"_index":2397,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:79",{"_index":1572,"title":{},"body":{"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["dialog.component.ts:80",{"_index":944,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:81",{"_index":943,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.component.ts:87",{"_index":1556,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["dialog.component.ts:90",{"_index":919,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.component.ts:96",{"_index":928,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog.html",{"_index":3021,"title":{},"body":{"index.html":{}}}],["dialog/add",{"_index":8,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["dialog/channel",{"_index":897,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["dialog/member",{"_index":1526,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["dialog/members",{"_index":952,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog/overlay",{"_index":57,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["dialog/profil",{"_index":2378,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["dialog/selected",{"_index":52,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialog__content",{"_index":1016,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialog__surface",{"_index":426,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["dialog__title",{"_index":1017,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["dialogref",{"_index":110,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["dialogref.afterclosed().subscribe((result",{"_index":1500,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["dialogs",{"_index":1416,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["die",{"_index":1575,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/UserService.html":{}}}],["diejenigen",{"_index":1574,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["dienen",{"_index":970,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["diese",{"_index":2017,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["dieser",{"_index":2033,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["dieses",{"_index":2180,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["direct",{"_index":510,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["direction",{"_index":407,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["directive",{"_index":489,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["directives",{"_index":557,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["directmessagescomponent",{"_index":509,"title":{"components/DirectMessagesComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["direkt",{"_index":2856,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["direktnachrichten",{"_index":1238,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["direktwerbung",{"_index":2265,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["disabled",{"_index":421,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["discussion",{"_index":2978,"title":{},"body":{"index.html":{}}}],["discussions",{"_index":2936,"title":{},"body":{"index.html":{}}}],["display",{"_index":358,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["displayed",{"_index":2379,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["displays",{"_index":1605,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["distanz",{"_index":1514,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["dm",{"_index":2937,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1037,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["doc(this.firestore",{"_index":1042,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["doc.data",{"_index":1163,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["doc.id",{"_index":1162,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["docref",{"_index":1670,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["docref.id",{"_index":1672,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["docsnap",{"_index":1076,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["docsnap.data",{"_index":1079,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["docsnap.exists",{"_index":1077,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["docsnap.id",{"_index":1168,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["docsnapshot",{"_index":2667,"title":{},"body":{"injectables/ThreadService.html":{}}}],["docsnapshot.data",{"_index":2669,"title":{},"body":{"injectables/ThreadService.html":{}}}],["docsnapshot.exists",{"_index":2668,"title":{},"body":{"injectables/ThreadService.html":{}}}],["document:keydown",{"_index":1188,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["document:mousemove",{"_index":1189,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["documentation",{"_index":2914,"title":{},"body":{"index.html":{}}}],["doeschannelnameexist",{"_index":1405,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["doeschannelnameexist(name",{"_index":1432,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["dom",{"_index":248,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["dort",{"_index":2093,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["down",{"_index":1244,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["dritte",{"_index":2162,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dropdown",{"_index":96,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["dropdownstate",{"_index":720,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["dsgvo",{"_index":2104,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["duisburg",{"_index":1387,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["duplicates",{"_index":1429,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["durch",{"_index":1380,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["during",{"_index":1817,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["dynamic",{"_index":2874,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":691,"title":{},"body":{"components/AuthActionComponent.html":{},"interfaces/EmojiContext.html":{},"components/ImprintComponent.html":{},"interfaces/MyState.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["e.emoji",{"_index":1286,"title":{},"body":{"interfaces/EmojiContext.html":{},"injectables/ThreadService.html":{}}}],["e.g",{"_index":2411,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{}}}],["each",{"_index":3044,"title":{},"body":{"index.html":{}}}],["ease",{"_index":371,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["ebenfalls",{"_index":2258,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ed1e79",{"_index":1915,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["edit",{"_index":513,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["editableuseremail",{"_index":2796,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["editchanneldialogcomponent",{"_index":512,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["edited",{"_index":1109,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["editing",{"_index":2821,"title":{},"body":{"components/VerifyEmailComponent.html":{},"index.html":{}}}],["editstate",{"_index":1255,"title":{"interfaces/EditState.html":{}},"body":{"interfaces/EditState.html":{}}}],["eigener",{"_index":2164,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ein",{"_index":1885,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["eine",{"_index":2054,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["einem",{"_index":2251,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einer",{"_index":2302,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eines",{"_index":2086,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eingeschränkt",{"_index":2296,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eingesetzten",{"_index":2159,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einschränkung",{"_index":2137,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einzelnen",{"_index":2278,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["element",{"_index":488,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["ellipsis",{"_index":1253,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["email",{"_index":619,"title":{},"body":{"components/AuthActionComponent.html":{},"interfaces/Member.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["email'},{'name",{"_index":553,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["email.component.html",{"_index":2795,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.scss",{"_index":2794,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts",{"_index":2791,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:104",{"_index":2818,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:121",{"_index":2811,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:44",{"_index":2819,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:49",{"_index":2822,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:54",{"_index":2825,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:59",{"_index":2799,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:70",{"_index":2801,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.component.ts:90",{"_index":2804,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["email.html",{"_index":3041,"title":{},"body":{"index.html":{}}}],["email/password",{"_index":2946,"title":{},"body":{"index.html":{}}}],["email/verify",{"_index":2790,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["emailauthprovider",{"_index":2730,"title":{},"body":{"injectables/UserService.html":{}}}],["emailauthprovider.credential(user.email",{"_index":2767,"title":{},"body":{"injectables/UserService.html":{}}}],["emailexists",{"_index":2015,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["emailpattern",{"_index":1936,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["emails",{"_index":1990,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["emailvalidator",{"_index":1941,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["emailvalidator(control",{"_index":1952,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["emits",{"_index":1452,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["emitted",{"_index":81,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["emitting",{"_index":1439,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["emoji",{"_index":1012,"title":{},"body":{"components/ChannelDialogComponent.html":{},"interfaces/EmojiContext.html":{},"injectables/ThreadService.html":{},"dependencies.html":{}}}],["emoji.service.ts",{"_index":1025,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["emoji.service.ts:12",{"_index":1036,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["emoji.service.ts:31",{"_index":1033,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["emoji.service.ts:9",{"_index":1029,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["emojicontext",{"_index":1271,"title":{"interfaces/EmojiContext.html":{}},"body":{"interfaces/EmojiContext.html":{}}}],["emojis",{"_index":871,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/ThreadService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["emojis.find((e",{"_index":2647,"title":{},"body":{"injectables/ThreadService.html":{}}}],["emojis.push",{"_index":2649,"title":{},"body":{"injectables/ThreadService.html":{}}}],["emojis.slice(0",{"_index":2664,"title":{},"body":{"injectables/ThreadService.html":{}}}],["empfänger",{"_index":2237,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["en",{"_index":769,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{}}}],["enables",{"_index":2899,"title":{},"body":{"index.html":{}}}],["encountered",{"_index":1837,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["end",{"_index":480,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["ensure",{"_index":3015,"title":{},"body":{"index.html":{}}}],["ensurecreatorinchannel",{"_index":1052,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["ensurecreatorinchannel(channel",{"_index":1057,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["ensurecurrentuserincluded",{"_index":1406,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["ensurecurrentuserincluded(members",{"_index":1434,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["ensures",{"_index":1430,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["enter",{"_index":1513,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["entering",{"_index":2808,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["entfällt",{"_index":2272,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["entgegenstehen",{"_index":2276,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["enthalten",{"_index":1576,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["enthält",{"_index":134,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["entscheiden",{"_index":2154,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["entweder",{"_index":2149,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["entwickler",{"_index":1507,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["entwicklerteam'},{'name",{"_index":515,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["entwicklerteam.component",{"_index":1738,"title":{},"body":{"interfaces/MyState.html":{}}}],["entwicklerteam.html",{"_index":3028,"title":{},"body":{"index.html":{}}}],["entwicklerteam/entwicklerteam.component",{"_index":1474,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["entwicklerteamcomponent",{"_index":514,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["entwicklerteams",{"_index":1400,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["environment",{"_index":2957,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["environment.prod.ts",{"_index":3060,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":3059,"title":{},"body":{"index.html":{}}}],["environments",{"_index":3058,"title":{},"body":{"index.html":{}}}],["erfassen",{"_index":2121,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erfolgt",{"_index":2244,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erforderlich",{"_index":2213,"title":{},"body":{"components/PrivacyComponent.html":{},"injectables/UserService.html":{}}}],["erforderlichkeit",{"_index":2082,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erhalt",{"_index":2217,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erheben",{"_index":2120,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erneut",{"_index":2043,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["error",{"_index":1001,"title":{},"body":{"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"interfaces/EmojiContext.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["error('benutzer",{"_index":2779,"title":{},"body":{"injectables/UserService.html":{}}}],["error('kein",{"_index":2773,"title":{},"body":{"injectables/UserService.html":{}}}],["error('missing",{"_index":1677,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["error('no",{"_index":2752,"title":{},"body":{"injectables/UserService.html":{}}}],["error('passwort",{"_index":2772,"title":{},"body":{"injectables/UserService.html":{}}}],["error('user",{"_index":2744,"title":{},"body":{"injectables/UserService.html":{}}}],["error(string(error",{"_index":2760,"title":{},"body":{"injectables/UserService.html":{}}}],["error(this.geterrormessage(error",{"_index":2012,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["error.code",{"_index":1876,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["error.message",{"_index":2025,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["errormessage",{"_index":1796,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["erstellen",{"_index":969,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["es",{"_index":2028,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["etwaig",{"_index":2304,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eu",{"_index":2101,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["event",{"_index":1293,"title":{},"body":{"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["event.emoji.native",{"_index":1296,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["eventemitter",{"_index":29,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["ex.name",{"_index":162,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["ex.uid",{"_index":148,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["example",{"_index":2968,"title":{},"body":{"index.html":{}}}],["excludeexistingandselected",{"_index":160,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["excludes",{"_index":159,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["excluding",{"_index":150,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["execute",{"_index":3017,"title":{},"body":{"index.html":{}}}],["executechannelsbynamequery",{"_index":1142,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["executechannelsbynamequery(q",{"_index":1148,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["existiert",{"_index":985,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["existing",{"_index":80,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"injectables/ThreadService.html":{},"components/VerifyEmailComponent.html":{}}}],["existing.count",{"_index":2648,"title":{},"body":{"injectables/ThreadService.html":{}}}],["existing])].slice(0",{"_index":2660,"title":{},"body":{"injectables/ThreadService.html":{}}}],["existingemoji",{"_index":1297,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["existingemoji.count",{"_index":1299,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["exists",{"_index":942,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/PasswortResetComponent.html":{}}}],["expanded",{"_index":1104,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["expected",{"_index":1611,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["experience",{"_index":2920,"title":{},"body":{"index.html":{}}}],["export",{"_index":56,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["extends",{"_index":1737,"title":{},"body":{"interfaces/MyState.html":{}}}],["extractthreademojis",{"_index":2580,"title":{},"body":{"injectables/ThreadService.html":{}}}],["extractthreademojis(data",{"_index":2600,"title":{},"body":{"injectables/ThreadService.html":{}}}],["f",{"_index":2264,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["fails",{"_index":2824,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["falls",{"_index":1578,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["false",{"_index":99,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":1006,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["fb",{"_index":1804,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["feature",{"_index":2975,"title":{},"body":{"index.html":{}}}],["features",{"_index":2854,"title":{},"body":{"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["fehler",{"_index":1887,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["fehlgeschlagen",{"_index":2770,"title":{},"body":{"injectables/UserService.html":{}}}],["feld",{"_index":2048,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["fetchreplycountandtime",{"_index":2449,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["fetchreplycountandtime(field",{"_index":2463,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["fetchthreademojis",{"_index":2581,"title":{},"body":{"injectables/ThreadService.html":{}}}],["fetchthreademojis(threadid",{"_index":2602,"title":{},"body":{"injectables/ThreadService.html":{}}}],["field",{"_index":949,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"injectables/ThreadService.html":{}}}],["field'},{'name",{"_index":544,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["field.editing.ts",{"_index":1256,"title":{},"body":{"interfaces/EditState.html":{}}}],["field.emoji.ts",{"_index":1272,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["field.html",{"_index":3037,"title":{},"body":{"index.html":{}}}],["field.messaging.ts",{"_index":837,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["field.user.helpers.ts",{"_index":3111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field/conversation.helpers.ts",{"_index":3150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field/search",{"_index":836,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"classes/SearchFieldBase.html":{},"miscellaneous/variables.html":{}}}],["field__input",{"_index":990,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["fields",{"_index":1833,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["files",{"_index":2997,"title":{},"body":{"index.html":{}}}],["filled",{"_index":1968,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["filledstates",{"_index":1937,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["filter",{"_index":116,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["filter((m",{"_index":1213,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["filtere",{"_index":141,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["filtered",{"_index":90,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["filteredmembers",{"_index":21,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"classes/SearchFieldBase.html":{}}}],["filteredresults",{"_index":2533,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["filterfield",{"_index":1679,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{}}}],["filtering",{"_index":167,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["filteroutleavinguser",{"_index":1053,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["filteroutleavinguser(channeldata",{"_index":1059,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["filters",{"_index":178,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["findemojiindex(c",{"_index":1777,"title":{},"body":{"interfaces/MyState.html":{}}}],["finishbroadcast",{"_index":890,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["finishbroadcast(context",{"_index":853,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["firebase",{"_index":613,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"dependencies.html":{},"index.html":{}}}],["firebase's",{"_index":1814,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["firebase/auth",{"_index":2634,"title":{},"body":{"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["firebase/firestore",{"_index":1657,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["firebaseauth",{"_index":2815,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["firebaseauth.currentuser",{"_index":2837,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["firebaseconfig",{"_index":3136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firestore",{"_index":202,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["firestore/auth",{"_index":2964,"title":{},"body":{"index.html":{}}}],["firestoremessagedata",{"_index":1110,"title":{"interfaces/FirestoreMessageData.html":{}},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/ThreadService.html":{}}}],["first",{"_index":1018,"title":{},"body":{"components/ChannelDialogComponent.html":{},"index.html":{}}}],["firstletter",{"_index":1154,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["fit",{"_index":1240,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["fixed",{"_index":1021,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["flag",{"_index":1457,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["flex",{"_index":359,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["flex:none",{"_index":2063,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["float",{"_index":2436,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["fn",{"_index":2522,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["focus",{"_index":173,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["focusing",{"_index":1974,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["folgt",{"_index":2168,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["follows",{"_index":3072,"title":{},"body":{"index.html":{}}}],["font",{"_index":377,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["footer",{"_index":1315,"title":{},"body":{"components/FooterComponent.html":{},"index.html":{}}}],["footer'},{'name",{"_index":517,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["footer.component.html",{"_index":1316,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1318,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.html",{"_index":3029,"title":{},"body":{"index.html":{}}}],["footer/footer.component",{"_index":574,"title":{},"body":{"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ImprintComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["footercomponent",{"_index":516,"title":{"components/FooterComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["footercomponent,headercomponent",{"_index":1374,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["forgot",{"_index":3011,"title":{},"body":{"index.html":{}}}],["fork",{"_index":3067,"title":{},"body":{"index.html":{}}}],["form",{"_index":988,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["format",{"_index":828,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["formatdate",{"_index":826,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{}}}],["formatdate(new",{"_index":766,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{}}}],["formatteddate",{"_index":721,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["formattedmessagetime",{"_index":2570,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["formattedparentmessagedate",{"_index":2571,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["formattedtime",{"_index":722,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["formbuilder",{"_index":1805,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["formgroup",{"_index":1839,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["formsmodule",{"_index":35,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["fortzufahren",{"_index":2765,"title":{},"body":{"injectables/UserService.html":{}}}],["forwards",{"_index":1362,"title":{},"body":{"components/HeaderComponent.html":{}}}],["found",{"_index":1951,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["fremdkomponenten",{"_index":2160,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["freshusers",{"_index":133,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["friendly",{"_index":254,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["full",{"_index":218,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["function",{"_index":841,"title":{},"body":{"interfaces/BroadcastContext.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"components/MemberListDialogComponent.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["funktion",{"_index":2400,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["funktionsfähigen",{"_index":2087,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["further",{"_index":2550,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["füllen",{"_index":2046,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["für",{"_index":2298,"title":{},"body":{"components/PrivacyComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["gap",{"_index":430,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["geben",{"_index":2044,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["gefunden",{"_index":2780,"title":{},"body":{"injectables/UserService.html":{}}}],["gegen",{"_index":2229,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gegenüber",{"_index":2222,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gegliedert",{"_index":2169,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gelöscht",{"_index":2269,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gem",{"_index":1377,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["gemacht",{"_index":2280,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gemeinsam",{"_index":2151,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["genannt",{"_index":2076,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["generate",{"_index":3083,"title":{},"body":{"index.html":{}}}],["generateconversationid",{"_index":3106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genutzt",{"_index":2292,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["germany",{"_index":1388,"title":{},"body":{"components/ImprintComponent.html":{}}}],["gesendet",{"_index":2024,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["gesetzlichen",{"_index":2274,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gesperrt",{"_index":2270,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["getallusers",{"_index":1222,"title":{},"body":{"components/DirectMessagesComponent.html":{},"injectables/UserService.html":{}}}],["getalluserslive",{"_index":2676,"title":{},"body":{"injectables/UserService.html":{}}}],["getalluserslive(callback",{"_index":2695,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusersrealtime",{"_index":2677,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusersrealtime(callback",{"_index":2697,"title":{},"body":{"injectables/UserService.html":{}}}],["getauth",{"_index":1208,"title":{},"body":{"components/DirectMessagesComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["getauth().currentuser?.uid",{"_index":2642,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getchannelmessageslive",{"_index":1115,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["getchannelmessageslive(channelid",{"_index":1118,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["getchannelsbyname",{"_index":1143,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["getchannelsbyname(channelname",{"_index":1150,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["getcurrentuserdata",{"_index":2678,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuserid",{"_index":2679,"title":{},"body":{"injectables/UserService.html":{}}}],["getdoc",{"_index":1038,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/MessageCrudService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["getdoc(channeldocref",{"_index":1045,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{}}}],["getdoc(docref",{"_index":1673,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["getdoc(ref",{"_index":2500,"title":{},"body":{"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["getdoc(userdocref",{"_index":2741,"title":{},"body":{"injectables/UserService.html":{}}}],["getdocs",{"_index":1155,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/UserService.html":{}}}],["getdocs(q",{"_index":1166,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{}}}],["getdocs(queryref",{"_index":1668,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["getdocs(userscollection",{"_index":2775,"title":{},"body":{"injectables/UserService.html":{}}}],["getemojicontextfn",{"_index":3156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geterrormessage",{"_index":1800,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["geterrormessage(error",{"_index":1810,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["getexistingthreademojis",{"_index":2582,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getexistingthreademojis(threadid",{"_index":2604,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getfilterfield",{"_index":2450,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getfilterfield(type",{"_index":2465,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getfilterfieldforreplies",{"_index":2451,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getfilterfieldforreplies(type",{"_index":2467,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getfirestore",{"_index":3124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getformatteddate",{"_index":723,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["getformattedthreadlastresponsetime",{"_index":724,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["getformattedtime",{"_index":725,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["getlastusedemojis",{"_index":1026,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["getlastusedemojis(channelid",{"_index":1030,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["getlastusedthreademojis",{"_index":2583,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getlastusedthreademojis(threadid",{"_index":2606,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getmessage",{"_index":1630,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["getmessage(type",{"_index":1644,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["getmessages",{"_index":1631,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"miscellaneous/variables.html":{}}}],["getmessages(channelid",{"_index":1646,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["getmessagesonce",{"_index":1274,"title":{},"body":{"interfaces/EmojiContext.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"miscellaneous/variables.html":{}}}],["getmessagesonce('private",{"_index":1275,"title":{},"body":{"interfaces/EmojiContext.html":{},"miscellaneous/variables.html":{}}}],["getmessagesonce(type",{"_index":1648,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["getparentdocdata",{"_index":2452,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getparentdocdata(ref",{"_index":2469,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getreplycountsformessages",{"_index":2453,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getreplycountsformessages(messageids",{"_index":2471,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getreplyfilterfield",{"_index":2454,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getreplyfilterfield(type",{"_index":2474,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["getshowwelcomecontainer",{"_index":600,"title":{},"body":{"injectables/AppStateService.html":{}}}],["getstorage",{"_index":3127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getthreadmessageslive",{"_index":2584,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getthreadmessageslive(threadid",{"_index":2608,"title":{},"body":{"injectables/ThreadService.html":{}}}],["getting",{"_index":2893,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":2680,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["getuserbyid(recipientid",{"_index":3168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuserbyid(userid",{"_index":2701,"title":{},"body":{"injectables/UserService.html":{}}}],["getusersbyfirstletter",{"_index":1144,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["getusersbyfirstletter(firstletter",{"_index":1152,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["getyesterdaydate",{"_index":824,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/SearchFieldBase.html":{}}}],["getyesterdaydatecomp",{"_index":2574,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["getyesterdaydatehelper",{"_index":2565,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["gibt",{"_index":2029,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["gilt",{"_index":2105,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["git",{"_index":2969,"title":{},"body":{"index.html":{}}}],["given",{"_index":1428,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["goback",{"_index":1368,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["gray",{"_index":422,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["green",{"_index":1913,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["group",{"_index":1842,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["grow",{"_index":382,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["grundverordnung",{"_index":2103,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["guest",{"_index":2927,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3073,"title":{},"body":{"index.html":{}}}],["h1",{"_index":373,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["h2",{"_index":1250,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["h3",{"_index":1345,"title":{},"body":{"components/HeaderComponent.html":{}}}],["haben",{"_index":2190,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["handle",{"_index":474,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["handlechannelleaving",{"_index":1054,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["handlechannelleaving(channeldata",{"_index":1063,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["handlecodeinapp",{"_index":2022,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["handled",{"_index":638,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handleemailverification",{"_index":626,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handleemailverification(oobcode",{"_index":641,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handlelogout",{"_index":2681,"title":{},"body":{"injectables/UserService.html":{}}}],["handlelogout(user",{"_index":2704,"title":{},"body":{"injectables/UserService.html":{}}}],["handlememberssaved(updated",{"_index":234,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["handlenousersignedin",{"_index":2682,"title":{},"body":{"injectables/UserService.html":{}}}],["handlenousersignedin(user",{"_index":2706,"title":{},"body":{"injectables/UserService.html":{}}}],["handlepasswordreset",{"_index":627,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handlepasswordreset(oobcode",{"_index":650,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handler",{"_index":658,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["handles",{"_index":232,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AuthActionComponent.html":{}}}],["handlesignedinuser",{"_index":2683,"title":{},"body":{"injectables/UserService.html":{}}}],["handlesignedinuser(user",{"_index":2710,"title":{},"body":{"injectables/UserService.html":{}}}],["handleuseractivity",{"_index":1178,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hasinitialscrolldone",{"_index":727,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["hasscrolledonchange",{"_index":2316,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["hat",{"_index":2257,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["header",{"_index":1322,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":506,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["header.component.html",{"_index":1324,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":1323,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.html",{"_index":3025,"title":{},"body":{"index.html":{}}}],["header/header.component",{"_index":575,"title":{},"body":{"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ImprintComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["headercomponent",{"_index":518,"title":{"components/HeaderComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["height",{"_index":418,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["helpers",{"_index":2567,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["here",{"_index":926,"title":{},"body":{"components/ChannelDialogComponent.html":{},"index.html":{}}}],["hidden",{"_index":428,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{}}}],["hidecontentcontainer",{"_index":1328,"title":{},"body":{"components/HeaderComponent.html":{}}}],["hidememberslist",{"_index":175,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["hides",{"_index":171,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["hier",{"_index":2398,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["hierdurch",{"_index":2161,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["higher",{"_index":2960,"title":{},"body":{"index.html":{}}}],["hilfe",{"_index":2110,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["hinaus",{"_index":2234,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["hinzufügen",{"_index":334,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["hochfelder",{"_index":1384,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["hold",{"_index":2984,"title":{},"body":{"index.html":{}}}],["holds",{"_index":1992,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["hook",{"_index":921,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["hostlistener",{"_index":1207,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hostlistener('document:keydown",{"_index":1225,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hostlistener('document:mousemove",{"_index":1224,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hostlistener('document:mousemove')@hostlistener('document:keydown",{"_index":1193,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hostlisteners",{"_index":1187,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["hover",{"_index":391,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["hovercolor",{"_index":453,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["html",{"_index":487,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["htmltextareaelement",{"_index":843,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["http://localhost:4200",{"_index":2992,"title":{},"body":{"index.html":{}}}],["http://localhost:4200/new",{"_index":2021,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["http://localhost:4200/verify",{"_index":2761,"title":{},"body":{"injectables/UserService.html":{}}}],["https://github.com/seldir193/dabubble.git",{"_index":2970,"title":{},"body":{"index.html":{}}}],["https://www.e",{"_index":1391,"title":{},"body":{"components/ImprintComponent.html":{}}}],["hue",{"_index":398,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["icon",{"_index":469,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["id",{"_index":78,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/InnerChannelComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadChannelBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["ide",{"_index":2987,"title":{},"body":{"index.html":{}}}],["idfield",{"_index":1133,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["ihn",{"_index":2404,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["ihnen",{"_index":2053,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["ihr",{"_index":1867,"title":{},"body":{"components/NewPasswortComponent.html":{},"injectables/UserService.html":{}}}],["ihre",{"_index":2045,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["ihrer",{"_index":2290,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ii",{"_index":2172,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["iii",{"_index":2176,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["illustrates",{"_index":2976,"title":{},"body":{"index.html":{}}}],["im",{"_index":2080,"title":{},"body":{"components/PrivacyComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["image",{"_index":858,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Member.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["images",{"_index":2945,"title":{},"body":{"index.html":{}}}],["images/emojis",{"_index":3005,"title":{},"body":{"index.html":{}}}],["imageurl",{"_index":728,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["img",{"_index":383,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["implements",{"_index":77,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["important",{"_index":357,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["imports",{"_index":70,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["impressum",{"_index":1319,"title":{},"body":{"components/FooterComponent.html":{},"components/ImprintComponent.html":{},"index.html":{}}}],["imprint",{"_index":1365,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint'},{'name",{"_index":520,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["imprint.component.html",{"_index":1366,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.component.scss",{"_index":1367,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.html",{"_index":3030,"title":{},"body":{"index.html":{}}}],["imprint/imprint.component",{"_index":578,"title":{},"body":{"components/AppComponent.html":{}}}],["imprintcomponent",{"_index":519,"title":{"components/ImprintComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["inactivitytimeout",{"_index":1175,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["include",{"_index":695,"title":{},"body":{"components/AuthActionComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["included",{"_index":1431,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["including",{"_index":2380,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{}}}],["incoming",{"_index":2386,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["incrementoraddemoji",{"_index":2585,"title":{},"body":{"injectables/ThreadService.html":{}}}],["incrementoraddemoji(emojis",{"_index":2610,"title":{},"body":{"injectables/ThreadService.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":3062,"title":{},"body":{"index.html":{}}}],["indicates",{"_index":940,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{}}}],["indicating",{"_index":1458,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["info&#64;selcuk",{"_index":1389,"title":{},"body":{"components/ImprintComponent.html":{}}}],["info@selcuk",{"_index":1393,"title":{},"body":{"components/ImprintComponent.html":{}}}],["informationen",{"_index":2170,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["informieren",{"_index":2141,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["informs",{"_index":1451,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["inhalte",{"_index":2092,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["init",{"_index":1442,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["initchannel(c",{"_index":1744,"title":{},"body":{"interfaces/MyState.html":{}}}],["initialization",{"_index":923,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["initializeapp(environment.firebaseconfig",{"_index":3122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializedirectconversation",{"_index":3108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializes",{"_index":1820,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["inject",{"_index":31,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["inject(firestore",{"_index":566,"title":{},"body":{"components/AppComponent.html":{}}}],["inject(mat_bottom_sheet_data",{"_index":318,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["inject(mat_dialog_data",{"_index":112,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["injectable",{"_index":594,"title":{"injectables/AppStateService.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppStateService.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["injectables",{"_index":596,"title":{},"body":{"injectables/AppStateService.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injected",{"_index":1557,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["injecting",{"_index":1414,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["inklusive",{"_index":2090,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["inline",{"_index":1248,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["inner",{"_index":522,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["innerchannelcomponent",{"_index":521,"title":{"components/InnerChannelComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["input",{"_index":27,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["input:focus",{"_index":445,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["input[type=\"text",{"_index":436,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["inputs",{"_index":1327,"title":{},"body":{"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["insbesondere",{"_index":2142,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["install",{"_index":2972,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2908,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3016,"title":{},"body":{"index.html":{}}}],["instance",{"_index":635,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["instanceof",{"_index":2759,"title":{},"body":{"injectables/UserService.html":{}}}],["interacting",{"_index":1463,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["interactions",{"_index":275,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["interactive",{"_index":3085,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AddMembersDialogData.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Member.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"interfaces/MyState.html":{},"interfaces/ProfileData.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"interfaces/MyState.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Member.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"interfaces/MyState.html":{},"interfaces/ProfileData.html":{},"overview.html":{}}}],["internal",{"_index":87,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["internetauftritts",{"_index":2089,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["intro",{"_index":1517,"title":{},"body":{"components/IntroComponent.html":{}}}],["intro'},{'name",{"_index":525,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["intro.component.html",{"_index":1518,"title":{},"body":{"components/IntroComponent.html":{}}}],["intro.component.scss",{"_index":1519,"title":{},"body":{"components/IntroComponent.html":{}}}],["intro.html",{"_index":3032,"title":{},"body":{"index.html":{}}}],["intro/intro.component",{"_index":572,"title":{},"body":{"components/AppComponent.html":{}}}],["introcomponent",{"_index":524,"title":{"components/IntroComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["intuitive",{"_index":2918,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":1960,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["invert(34",{"_index":395,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["invert(35",{"_index":1899,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["invite",{"_index":2922,"title":{},"body":{"index.html":{}}}],["isaddmembersoverlayopen",{"_index":729,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["isalreadyincluded",{"_index":1492,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["ischannelnamevalid",{"_index":908,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["ischannelsvisible",{"_index":1176,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["ischatchanging",{"_index":2317,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["isdesktop",{"_index":730,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["isediting",{"_index":1102,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["isemojipickervisible",{"_index":731,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["ishighlighted",{"_index":1101,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["isimagemodalopen",{"_index":732,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["ismemberslistvisible",{"_index":98,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["isonline",{"_index":2746,"title":{},"body":{"injectables/UserService.html":{}}}],["isoverlayopen",{"_index":733,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["issigninwithemaillink",{"_index":2826,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["issigninwithemaillink(firebaseauth",{"_index":2829,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["issmallscreen",{"_index":1938,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["ist",{"_index":1581,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["istextareaexpanded",{"_index":734,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["items",{"_index":361,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["jasmine/karma",{"_index":3014,"title":{},"body":{"index.html":{}}}],["jede",{"_index":2115,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["jeder",{"_index":2108,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["jedoch",{"_index":2248,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["jedwede",{"_index":2241,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["jemand",{"_index":2540,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["jetzt",{"_index":135,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["jsdoc",{"_index":3087,"title":{},"body":{"index.html":{}}}],["justify",{"_index":363,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["keine",{"_index":2273,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["keinen",{"_index":2030,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["key",{"_index":2004,"title":{},"body":{"components/PasswortResetComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["keyframes",{"_index":1351,"title":{},"body":{"components/HeaderComponent.html":{}}}],["known",{"_index":301,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["kocyigit",{"_index":1382,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["kocyigit.de",{"_index":1390,"title":{},"body":{"components/ImprintComponent.html":{}}}],["kommunikation",{"_index":974,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["kontakt",{"_index":2285,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["kontaktanfragen",{"_index":2281,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["kontaktformular",{"_index":2284,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["kontaktmöglichkeit",{"_index":2282,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["konto",{"_index":1340,"title":{},"body":{"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["kopien",{"_index":2198,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["kurzer",{"_index":2039,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["können",{"_index":2056,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["künftige",{"_index":2261,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["label",{"_index":993,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["largeimageurl",{"_index":735,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["lastdoc",{"_index":2512,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["lastdoc.data()?.['timestamp",{"_index":2515,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["lastmessages",{"_index":1276,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["lastmessages.foreach((msg",{"_index":1281,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["lastopenedchar",{"_index":736,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["lastreplytime",{"_index":1106,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["lastresponsetime",{"_index":1098,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"interfaces/MyState.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["lastusedemojis",{"_index":1035,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["lastusedemojisreceived",{"_index":737,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelEmojiService.html":{},"interfaces/EmojiContext.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{}}}],["lastusedemojissent",{"_index":738,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelEmojiService.html":{},"interfaces/EmojiContext.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{}}}],["latesttimestamp",{"_index":2318,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["launch",{"_index":2998,"title":{},"body":{"index.html":{}}}],["layout",{"_index":255,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["leave",{"_index":1438,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["leavechannel",{"_index":1055,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{}}}],["leavechannel(channelid",{"_index":1066,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{}}}],["left",{"_index":389,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["left:50px",{"_index":1917,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["legal",{"_index":2947,"title":{},"body":{"index.html":{}}}],["legend",{"_index":486,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["leider",{"_index":2050,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["leistungen",{"_index":2095,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["leute",{"_index":333,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["li",{"_index":467,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["license",{"_index":2913,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":3079,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":920,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["lightblue",{"_index":392,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["limited",{"_index":3001,"title":{},"body":{"index.html":{}}}],["limittopemojis(context",{"_index":1313,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["line",{"_index":1907,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["link",{"_index":1880,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["links",{"_index":1982,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["list",{"_index":92,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["listeners",{"_index":2402,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["listenforauthchanges",{"_index":1179,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["listenformessages",{"_index":1688,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["listenformessages(type",{"_index":1707,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["listenforthreaddetails",{"_index":2586,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listenforthreaddetails(threadid",{"_index":2612,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listenforthreademojiupdates",{"_index":2587,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listenforthreademojiupdates(threadid",{"_index":2614,"title":{},"body":{"injectables/ThreadService.html":{}}}],["listenmessages",{"_index":1689,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["listenmessages(type",{"_index":1710,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["listens",{"_index":2792,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["lit",{"_index":2263,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["literal",{"_index":763,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"interfaces/FirestoreMessageData.html":{},"components/InnerChannelComponent.html":{},"interfaces/Message.html":{},"injectables/MessageCrudService.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{}}}],["live",{"_index":1583,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["loadallusers",{"_index":153,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["loadcurrentuserhelper",{"_index":3109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loaded",{"_index":101,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["loading",{"_index":623,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["loadlastusedemojis",{"_index":1273,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["loadlastusedemojis(c",{"_index":1753,"title":{},"body":{"interfaces/MyState.html":{}}}],["loadlastusedemojisfn",{"_index":3155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loadmembers",{"_index":1180,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["loadrecipientdatahelper",{"_index":3112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loadreplycountslive",{"_index":2455,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["loadreplycountslive(msgids",{"_index":2476,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["loads",{"_index":115,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["local",{"_index":299,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["locale_id",{"_index":3131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage",{"_index":2814,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["localstorage.getitem('newemail",{"_index":682,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["localstorage.removeitem('newemail",{"_index":686,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["localstorage.setitem('newemail",{"_index":2756,"title":{},"body":{"injectables/UserService.html":{}}}],["location",{"_index":1370,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["log",{"_index":3000,"title":{},"body":{"index.html":{}}}],["logic",{"_index":925,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{}}}],["login",{"_index":1892,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["login'},{'name",{"_index":527,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["login.html",{"_index":3033,"title":{},"body":{"index.html":{}}}],["login/login.component",{"_index":573,"title":{},"body":{"components/AppComponent.html":{}}}],["logincomponent",{"_index":526,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["logout",{"_index":2684,"title":{},"body":{"injectables/UserService.html":{}}}],["lost",{"_index":174,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["löschen",{"_index":2138,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["löschung",{"_index":2208,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["m",{"_index":199,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["m.id",{"_index":1214,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["m.isonline",{"_index":1217,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["m.name",{"_index":163,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["m.name.tolowercase().includes(term",{"_index":183,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["m.uid",{"_index":321,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["mail",{"_index":692,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ImprintComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["mail.png",{"_index":2847,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["main",{"_index":2982,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":3061,"title":{},"body":{"index.html":{}}}],["maintainable",{"_index":3078,"title":{},"body":{"index.html":{}}}],["make",{"_index":2996,"title":{},"body":{"index.html":{}}}],["manage",{"_index":217,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/NewPasswortComponent.html":{},"index.html":{}}}],["management",{"_index":2939,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1808,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["manually",{"_index":2807,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["many",{"_index":2035,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["map",{"_index":2356,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["map((m",{"_index":1215,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["mapmessagesdocs",{"_index":1690,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["mapmessagesdocs(snapshot",{"_index":1712,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["mapmessagesonce",{"_index":1632,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["mapmessagesonce(snapshot",{"_index":1650,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["mapreplysnapshot",{"_index":2456,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["mapreplysnapshot(snapshot",{"_index":2481,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["mapsnapshotdocs",{"_index":1691,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["mapsnapshotdocs(snapshot",{"_index":1715,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["mapthreadsnapshot",{"_index":2588,"title":{},"body":{"injectables/ThreadService.html":{}}}],["mapthreadsnapshot(snapshot",{"_index":2618,"title":{},"body":{"injectables/ThreadService.html":{}}}],["margin",{"_index":374,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["markedited",{"_index":1123,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["marketing",{"_index":982,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["marks",{"_index":1967,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["mart",{"_index":2876,"title":{},"body":{"dependencies.html":{}}}],["mat",{"_index":352,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["mat_bottom_sheet_data",{"_index":316,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["mat_dialog_data",{"_index":41,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["matbottomsheet",{"_index":317,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["matbottomsheetref",{"_index":43,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["matbuttonmodule",{"_index":905,"title":{},"body":{"components/ChannelDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":1827,"title":{},"body":{"components/NewPasswortComponent.html":{},"index.html":{}}}],["matching",{"_index":243,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matdialog",{"_index":39,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["matdialogmodule",{"_index":906,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["matdialogmodule,browseranimationsmodule",{"_index":3129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matdialogref",{"_index":40,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["material",{"_index":13,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["matformfieldmodule",{"_index":903,"title":{},"body":{"components/ChannelDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["math.random().tostring(36).substring(2",{"_index":1495,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["matinputmodule",{"_index":904,"title":{},"body":{"components/ChannelDialogComponent.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":464,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["maßgabe",{"_index":2215,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["mdc",{"_index":424,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["mebers",{"_index":3038,"title":{},"body":{"index.html":{}}}],["media",{"_index":481,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["member",{"_index":187,"title":{"interfaces/Member.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["member's",{"_index":1615,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["member.models.ts",{"_index":3057,"title":{},"body":{"index.html":{}}}],["member.name",{"_index":191,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["member.uid",{"_index":1091,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["memberlistdialogcomponent",{"_index":528,"title":{"components/MemberListDialogComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["memberlistdialogdata",{"_index":1535,"title":{"interfaces/MemberListDialogData.html":{}},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["members",{"_index":7,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["members.filter",{"_index":1090,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["members.push",{"_index":1494,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["members.some((m",{"_index":1493,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["membersadded",{"_index":86,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["membersdialog",{"_index":962,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["membersdialog.afterclosed().subscribe(result",{"_index":964,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["membersdialogcomponent",{"_index":529,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["membersectiondialogcomponent",{"_index":531,"title":{"components/MemberSectionDialogComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["memberselected",{"_index":1186,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["membership.service.ts",{"_index":1051,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membership.service.ts:16",{"_index":1056,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membership.service.ts:19",{"_index":1058,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membership.service.ts:35",{"_index":1067,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membership.service.ts:57",{"_index":1065,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membership.service.ts:81",{"_index":1061,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membersuid",{"_index":1085,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["membersuid.filter",{"_index":1092,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["menu",{"_index":3009,"title":{},"body":{"index.html":{}}}],["merge",{"_index":2662,"title":{},"body":{"injectables/ThreadService.html":{}}}],["mergenewandexistingemojis",{"_index":2589,"title":{},"body":{"injectables/ThreadService.html":{}}}],["mergenewandexistingemojis(newemojis",{"_index":2620,"title":{},"body":{"injectables/ThreadService.html":{}}}],["merges",{"_index":113,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["message",{"_index":739,"title":{"interfaces/Message.html":{}},"body":{"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1788,"title":{},"body":{"interfaces/MyState.html":{}}}],["message.content.emojis.findindex((x",{"_index":1779,"title":{},"body":{"interfaces/MyState.html":{}}}],["message.content.emojis.splice(i",{"_index":1782,"title":{},"body":{"interfaces/MyState.html":{}}}],["message.id",{"_index":1784,"title":{},"body":{"interfaces/MyState.html":{}}}],["message.model.ts",{"_index":3056,"title":{},"body":{"index.html":{}}}],["message.models",{"_index":830,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/MessageCrudService.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{}}}],["message.service",{"_index":55,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"interfaces/BroadcastContext.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["message.service.ts",{"_index":3049,"title":{},"body":{"index.html":{}}}],["message?.content?.emojis",{"_index":1778,"title":{},"body":{"interfaces/MyState.html":{}}}],["messagecontent",{"_index":829,"title":{"interfaces/MessageContent.html":{}},"body":{"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{}}}],["messagecrudservice",{"_index":1623,"title":{"injectables/MessageCrudService.html":{}},"body":{"injectables/MessageCrudService.html":{}}}],["messagedocref",{"_index":1134,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["messageformat",{"_index":872,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["messageid",{"_index":1121,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/ReplyCountService.html":{}}}],["messageids",{"_index":2473,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["messagepayload",{"_index":1659,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["messagequeriesservice",{"_index":1682,"title":{"injectables/MessageQueriesService.html":{}},"body":{"injectables/MessageQueriesService.html":{}}}],["messageref",{"_index":2637,"title":{},"body":{"injectables/ThreadService.html":{}}}],["messages",{"_index":740,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelMsgService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["messages'},{'name",{"_index":511,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["messages.component.html",{"_index":1173,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.scss",{"_index":1172,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts",{"_index":1171,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:114",{"_index":1201,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:118",{"_index":1198,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:22",{"_index":1191,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:23",{"_index":1206,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:24",{"_index":1205,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:26",{"_index":1204,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:27",{"_index":1203,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:28",{"_index":1190,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:36",{"_index":1196,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:54",{"_index":1195,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:72",{"_index":1192,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:76",{"_index":1199,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:90",{"_index":1200,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.component.ts:99",{"_index":1194,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages.html",{"_index":3027,"title":{},"body":{"index.html":{}}}],["messages.map((msg",{"_index":3160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages.slice",{"_index":1277,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["messages/direct",{"_index":1170,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["messages/private",{"_index":2314,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["messagescollection",{"_index":1662,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["messageservice",{"_index":54,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"interfaces/BroadcastContext.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"miscellaneous/variables.html":{}}}],["messageservice.generateconversationid",{"_index":3157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messageservice.getmessagesonce(mode",{"_index":3162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagesref",{"_index":1127,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["messagetoall",{"_index":838,"title":{},"body":{"interfaces/BroadcastContext.html":{},"classes/SearchFieldBase.html":{}}}],["messagingsenderid",{"_index":3145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":256,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["methods",{"_index":259,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["methods.ts",{"_index":1736,"title":{},"body":{"interfaces/MyState.html":{}}}],["middleblue",{"_index":1346,"title":{},"body":{"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["min",{"_index":354,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["miscellaneous",{"_index":3098,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2032,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"index.html":{}}}],["mitglieder",{"_index":530,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["mitteilung",{"_index":2249,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["mittel",{"_index":2153,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["mobile",{"_index":253,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/PasswortResetComponent.html":{},"index.html":{}}}],["mobile'},{'name",{"_index":493,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["mobile.component.html",{"_index":258,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["mobile.component.scss",{"_index":257,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["mobile.component.ts",{"_index":251,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["mobile.component.ts:103",{"_index":294,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:115",{"_index":270,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:124",{"_index":289,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:136",{"_index":286,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:143",{"_index":282,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:160",{"_index":281,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:32",{"_index":304,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:34",{"_index":312,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:36",{"_index":309,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:39",{"_index":314,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:41",{"_index":313,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:43",{"_index":298,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:45",{"_index":265,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:54",{"_index":303,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:55",{"_index":308,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:61",{"_index":279,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:75",{"_index":277,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.component.ts:91",{"_index":283,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["mobile.html",{"_index":3022,"title":{},"body":{"index.html":{}}}],["mobile/add",{"_index":250,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["mode",{"_index":83,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AuthActionComponent.html":{},"interfaces/EmojiContext.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":3093,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":3007,"title":{},"body":{"index.html":{}}}],["movediagonal",{"_index":1352,"title":{},"body":{"components/HeaderComponent.html":{}}}],["movevertical",{"_index":1356,"title":{},"body":{"components/HeaderComponent.html":{}}}],["msg",{"_index":1264,"title":{},"body":{"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"miscellaneous/variables.html":{}}}],["msg.content",{"_index":1269,"title":{},"body":{"interfaces/EditState.html":{},"miscellaneous/variables.html":{}}}],["msg.content.emojis",{"_index":1294,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.content.emojis.find",{"_index":1298,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.content.emojis.map((e",{"_index":1285,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.content.emojis.push",{"_index":1300,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.content?.emojis",{"_index":1282,"title":{},"body":{"interfaces/EmojiContext.html":{},"miscellaneous/variables.html":{}}}],["msg.id",{"_index":1769,"title":{},"body":{"interfaces/MyState.html":{}}}],["msg.isediting",{"_index":1263,"title":{},"body":{"interfaces/EditState.html":{}}}],["msg.isemojipickervisible",{"_index":1309,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.lastreplytime",{"_index":1775,"title":{},"body":{"interfaces/MyState.html":{}}}],["msg.parentid",{"_index":1768,"title":{},"body":{"interfaces/MyState.html":{}}}],["msg.replycount",{"_index":1773,"title":{},"body":{"interfaces/MyState.html":{}}}],["msg.senderid",{"_index":1283,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.sendername",{"_index":1302,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["msg.service.ts",{"_index":1114,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["msg.service.ts:17",{"_index":1117,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["msg.service.ts:20",{"_index":1119,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["msg.service.ts:30",{"_index":1124,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["msg.threadid",{"_index":1767,"title":{},"body":{"interfaces/MyState.html":{}}}],["msg.threadlastresponsetime",{"_index":1774,"title":{},"body":{"interfaces/MyState.html":{}}}],["msgdata",{"_index":882,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["msgid",{"_index":2508,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["msgids",{"_index":2480,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["msgids.foreach((id",{"_index":2525,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["msgids.length",{"_index":2518,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["msgs",{"_index":1764,"title":{},"body":{"interfaces/MyState.html":{},"miscellaneous/variables.html":{}}}],["msgs.foreach(msg",{"_index":1765,"title":{},"body":{"interfaces/MyState.html":{}}}],["multi",{"_index":108,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["multiple",{"_index":2932,"title":{},"body":{"index.html":{}}}],["muster",{"_index":2307,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["mystate",{"_index":1734,"title":{"interfaces/MyState.html":{}},"body":{"interfaces/MyState.html":{}}}],["nach",{"_index":2214,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nachfolgend",{"_index":2073,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nachfolgenden",{"_index":2140,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nachricht",{"_index":2430,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["nachrichten",{"_index":2857,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["name",{"_index":79,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["name.tolowercase",{"_index":1491,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["nameexists",{"_index":956,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["nanoseconds",{"_index":1096,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["navigates",{"_index":647,"title":{},"body":{"components/AuthActionComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["navigatetosignup",{"_index":1326,"title":{},"body":{"components/HeaderComponent.html":{}}}],["navigation",{"_index":636,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["ndern",{"_index":1890,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["needed",{"_index":278,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"components/InnerChannelComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["nested",{"_index":216,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["neu",{"_index":1338,"title":{},"body":{"components/HeaderComponent.html":{}}}],["new",{"_index":59,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["newchannel",{"_index":1483,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["newemail",{"_index":681,"title":{},"body":{"components/AuthActionComponent.html":{},"injectables/UserService.html":{}}}],["newemoji",{"_index":1295,"title":{},"body":{"interfaces/EmojiContext.html":{},"injectables/ThreadService.html":{}}}],["newemojis",{"_index":2622,"title":{},"body":{"injectables/ThreadService.html":{}}}],["newly",{"_index":201,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["newmessage",{"_index":741,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["newname",{"_index":2729,"title":{},"body":{"injectables/UserService.html":{}}}],["newpassword",{"_index":1831,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["newpasswordform",{"_index":1797,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["newpasswortcomponent",{"_index":533,"title":{"components/NewPasswortComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["newreplycount",{"_index":2497,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["ng",{"_index":350,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"index.html":{}}}],["ngondestroy",{"_index":241,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["ngoninit",{"_index":118,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["nicht",{"_index":1861,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"injectables/UserService.html":{}}}],["noch",{"_index":2187,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["node.js",{"_index":2959,"title":{},"body":{"index.html":{}}}],["none",{"_index":204,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["noresultsfound",{"_index":2534,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["not(:focus",{"_index":444,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["note",{"_index":3043,"title":{},"body":{"index.html":{}}}],["notice",{"_index":2948,"title":{},"body":{"index.html":{}}}],["notices",{"_index":3010,"title":{},"body":{"index.html":{}}}],["notify",{"_index":1453,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["noto",{"_index":1011,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["nowrap",{"_index":1252,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{}}}],["npm",{"_index":2961,"title":{},"body":{"index.html":{}}}],["null",{"_index":642,"title":{},"body":{"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"interfaces/EditState.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["number",{"_index":775,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"interfaces/MyState.html":{},"classes/PrivateMessagesBase.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["nunito",{"_index":1007,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["nur",{"_index":2075,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nutzer",{"_index":2174,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nutzerfreundlichen",{"_index":2088,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nutzung",{"_index":2267,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nutzungsqualität",{"_index":2158,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["näher",{"_index":2188,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ob",{"_index":2193,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["object",{"_index":1239,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":1541,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["observable",{"_index":567,"title":{},"body":{"components/AppComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["occurs",{"_index":1993,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["oder",{"_index":1882,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PrivacyComponent.html":{},"classes/SearchFieldBase.html":{}}}],["offengelegt",{"_index":2239,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["offenlegung",{"_index":2130,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["offsetx",{"_index":3174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offsety",{"_index":3175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ohne",{"_index":2109,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ok",{"_index":1921,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["oldreplycount",{"_index":2494,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["onauthstatechanged",{"_index":1209,"title":{},"body":{"components/DirectMessagesComponent.html":{},"injectables/UserService.html":{}}}],["onauthstatechanged(auth",{"_index":1233,"title":{},"body":{"components/DirectMessagesComponent.html":{},"injectables/UserService.html":{}}}],["onblur",{"_index":1942,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["onblur(field",{"_index":1965,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["oncancel",{"_index":228,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["once",{"_index":1608,"title":{},"body":{"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["onchannelnamechange",{"_index":910,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["onchannelnamechange(value",{"_index":927,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["oncreate",{"_index":205,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{}}}],["ondestroy",{"_index":1397,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["one",{"_index":1607,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["onfocus",{"_index":1943,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["onfocus(field",{"_index":1971,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["oninit",{"_index":30,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["online",{"_index":2440,"title":{},"body":{"components/ProfilDialogComponent.html":{},"index.html":{}}}],["online/offline",{"_index":2942,"title":{},"body":{"index.html":{}}}],["onsearchmembers",{"_index":179,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["onsnapshot",{"_index":1717,"title":{},"body":{"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["onsnapshot(docref",{"_index":2666,"title":{},"body":{"injectables/ThreadService.html":{}}}],["onsnapshot(q",{"_index":2527,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["onsnapshot(queryref",{"_index":1731,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["onsnapshot(userscollection",{"_index":2781,"title":{},"body":{"injectables/UserService.html":{}}}],["onsubmit",{"_index":1801,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["oobcode",{"_index":624,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{}}}],["opacity",{"_index":1350,"title":{},"body":{"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{}}}],["open",{"_index":2991,"title":{},"body":{"index.html":{}}}],["openaddmembersoverlay",{"_index":1531,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["openaddmembersoverlaymethod",{"_index":1527,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["openchatwith",{"_index":1589,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["opendialog",{"_index":1407,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["opendirectmessage",{"_index":1181,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["opendirectmessage(member",{"_index":1197,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["opened",{"_index":2396,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["opening",{"_index":1552,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["openmembersdialog",{"_index":219,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["openprivatechat",{"_index":1532,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["openprofile",{"_index":1591,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["openprofiledialog",{"_index":1528,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["openprofiledialog(member",{"_index":1563,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["openprofilerequested",{"_index":1533,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["opens",{"_index":215,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["operations",{"_index":916,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["optimierungszwecken",{"_index":2156,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["optional",{"_index":18,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["optional()@inject(mat_bottom_sheet_data",{"_index":307,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["optional()@inject(mat_dialog_data",{"_index":1571,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["optionally",{"_index":266,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["orderby",{"_index":1126,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["orderby('timestamp",{"_index":1130,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["ordnen",{"_index":2123,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["organisation",{"_index":2122,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["originalmessage",{"_index":1257,"title":{},"body":{"interfaces/EditState.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["originalmessage.content",{"_index":1270,"title":{},"body":{"interfaces/EditState.html":{}}}],["originalparentmessage",{"_index":2561,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["originx",{"_index":337,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"miscellaneous/variables.html":{}}}],["originy",{"_index":339,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":1835,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["out",{"_index":168,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{}}}],["outline",{"_index":443,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["output",{"_index":28,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["outputs",{"_index":1185,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["overflow",{"_index":427,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["overlay",{"_index":295,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["overlaymodule",{"_index":37,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["overlayx",{"_index":340,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"miscellaneous/variables.html":{}}}],["overlayy",{"_index":341,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":2906,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":699,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["package",{"_index":2862,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":3064,"title":{},"body":{"index.html":{}}}],["padding",{"_index":402,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["padding:8px",{"_index":1923,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["page",{"_index":1891,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["pages",{"_index":3051,"title":{},"body":{"index.html":{}}}],["param",{"_index":665,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["parameters",{"_index":268,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["params",{"_index":655,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["params['mode",{"_index":668,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["params['oobcode",{"_index":670,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{}}}],["parent",{"_index":2395,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["parentdoc",{"_index":2492,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["parentdoc['replycount",{"_index":2495,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["parentid",{"_index":1100,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["parentmessage",{"_index":2319,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["parentmessageid",{"_index":2488,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["parentref",{"_index":2491,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["participants",{"_index":2933,"title":{},"body":{"index.html":{}}}],["partner",{"_index":2310,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["passed",{"_index":114,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["passing",{"_index":1420,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["passiv",{"_index":2441,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["password",{"_index":617,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["passwordsmatch",{"_index":1802,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort",{"_index":536,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["passwort'},{'name",{"_index":534,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["passwort.component",{"_index":589,"title":{},"body":{"components/AppComponent.html":{}}}],["passwort.component.html",{"_index":1795,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.scss",{"_index":1794,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts",{"_index":1791,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:131",{"_index":1830,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:143",{"_index":1811,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:36",{"_index":1840,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:41",{"_index":1836,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:46",{"_index":1845,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:51",{"_index":1843,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:56",{"_index":1806,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:80",{"_index":1819,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.component.ts:97",{"_index":1823,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["passwort.html",{"_index":3034,"title":{},"body":{"index.html":{}}}],["passwort/new",{"_index":588,"title":{},"body":{"components/AppComponent.html":{},"components/NewPasswortComponent.html":{}}}],["passwortresetcomponent",{"_index":535,"title":{"components/PasswortResetComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["passwörter",{"_index":1859,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["pattern",{"_index":1957,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["payload",{"_index":1588,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/MessageCrudService.html":{}}}],["per",{"_index":2283,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["perfect",{"_index":2881,"title":{},"body":{"dependencies.html":{}}}],["performemailupdate",{"_index":2685,"title":{},"body":{"injectables/UserService.html":{}}}],["performemailupdate(user",{"_index":2714,"title":{},"body":{"injectables/UserService.html":{}}}],["personalize",{"_index":2929,"title":{},"body":{"index.html":{}}}],["personenbezogene",{"_index":2071,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["personenbezogenen",{"_index":2119,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["personenbezogener",{"_index":2147,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["pick",{"_index":1606,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["picture",{"_index":2941,"title":{},"body":{"index.html":{}}}],["placeholder",{"_index":1010,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["placeholdertext",{"_index":2535,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["please",{"_index":3071,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":385,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["policy",{"_index":2949,"title":{},"body":{"index.html":{}}}],["position",{"_index":434,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["positions",{"_index":3113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["positions_add_members",{"_index":3116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pre",{"_index":310,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["prefer",{"_index":2928,"title":{},"body":{"index.html":{}}}],["prerequisites",{"_index":2958,"title":{},"body":{"index.html":{}}}],["present",{"_index":188,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["previously",{"_index":287,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["primary",{"_index":410,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["principles",{"_index":3075,"title":{},"body":{"index.html":{}}}],["privacy",{"_index":2058,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["privacy'},{'name",{"_index":539,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["privacy.component.html",{"_index":2065,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["privacy.component.scss",{"_index":2066,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["privacy.html",{"_index":3036,"title":{},"body":{"index.html":{}}}],["privacy/privacy.component",{"_index":577,"title":{},"body":{"components/AppComponent.html":{}}}],["privacycomponent",{"_index":538,"title":{"components/PrivacyComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["private",{"_index":104,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["privatemessage",{"_index":742,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["privatemessages",{"_index":2320,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{}}}],["privatemessagesbase",{"_index":2312,"title":{"classes/PrivateMessagesBase.html":{}},"body":{"classes/PrivateMessagesBase.html":{}}}],["privatemessagescomponent",{"_index":540,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["process",{"_index":1838,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["processemojisfrommessages",{"_index":1312,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["produce",{"_index":3084,"title":{},"body":{"index.html":{}}}],["production",{"_index":3135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profil",{"_index":542,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["profildialogcomponent",{"_index":541,"title":{"components/ProfilDialogComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["profile",{"_index":1553,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{}}}],["profiledata",{"_index":2384,"title":{"interfaces/ProfileData.html":{}},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["profiles",{"_index":2930,"title":{},"body":{"index.html":{}}}],["project",{"_index":2911,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":3141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":649,"title":{},"body":{"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":2736,"title":{},"body":{"injectables/UserService.html":{}}}],["prompt",{"_index":2763,"title":{},"body":{"injectables/UserService.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"interfaces/ChannelMessageData.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"components/VerifyEmailComponent.html":{},"properties.html":{}}}],["protected",{"_index":726,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["provide",{"_index":2917,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimationsasync",{"_index":3128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":117,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["providedin",{"_index":608,"title":{},"body":{"injectables/AppStateService.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["providefirebaseapp",{"_index":3121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":3120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":3119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestorage",{"_index":3126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":109,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMsgService.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageQueriesService.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["pull",{"_index":3070,"title":{},"body":{"index.html":{}}}],["purposes",{"_index":1997,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["q",{"_index":1128,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/UserService.html":{}}}],["qref",{"_index":1157,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["queries.service.ts",{"_index":1140,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:100",{"_index":1698,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:109",{"_index":1704,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:118",{"_index":1702,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:127",{"_index":1713,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:134",{"_index":1709,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:146",{"_index":1716,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:153",{"_index":1700,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:16",{"_index":1145,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["queries.service.ts:171",{"_index":1699,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:18",{"_index":1692,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:180",{"_index":1714,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:19",{"_index":1151,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["queries.service.ts:21",{"_index":1694,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:27",{"_index":1153,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["queries.service.ts:35",{"_index":1705,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:46",{"_index":1147,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["queries.service.ts:56",{"_index":1149,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["queries.service.ts:58",{"_index":1706,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:69",{"_index":1711,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["queries.service.ts:84",{"_index":1696,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["query",{"_index":634,"title":{},"body":{"components/AuthActionComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["query(baseq",{"_index":1720,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["query(ref",{"_index":1719,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["query(userscollection",{"_index":2005,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["queryparams",{"_index":679,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["queryref",{"_index":1665,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["querysnapshot",{"_index":2007,"title":{},"body":{"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["querysnapshot.empty",{"_index":2008,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["querysnapshot.foreach((doc",{"_index":2776,"title":{},"body":{"injectables/UserService.html":{}}}],["r",{"_index":1762,"title":{},"body":{"interfaces/MyState.html":{}}}],["r.type",{"_index":848,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["radius",{"_index":387,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["rahmen",{"_index":2081,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["random",{"_index":1425,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["rc",{"_index":1771,"title":{},"body":{"interfaces/MyState.html":{}}}],["rc[tid",{"_index":1772,"title":{},"body":{"interfaces/MyState.html":{}}}],["reactive",{"_index":1841,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["reactiveformsmodule",{"_index":1792,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":1809,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["reading",{"_index":633,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["readme.md",{"_index":3065,"title":{},"body":{"index.html":{}}}],["reads",{"_index":280,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{}}}],["real",{"_index":2900,"title":{},"body":{"index.html":{}}}],["reason",{"_index":2708,"title":{},"body":{"injectables/UserService.html":{}}}],["reauthenticateuser",{"_index":2686,"title":{},"body":{"injectables/UserService.html":{}}}],["reauthenticateuser(user",{"_index":2716,"title":{},"body":{"injectables/UserService.html":{}}}],["reauthenticatewithcredential",{"_index":2731,"title":{},"body":{"injectables/UserService.html":{}}}],["reauthenticatewithcredential(user",{"_index":2768,"title":{},"body":{"injectables/UserService.html":{}}}],["reauthentifizierung",{"_index":2769,"title":{},"body":{"injectables/UserService.html":{}}}],["received",{"_index":1032,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ThreadService.html":{}}}],["received').then(r",{"_index":1760,"title":{},"body":{"interfaces/MyState.html":{}}}],["receivedemojis",{"_index":2665,"title":{},"body":{"injectables/ThreadService.html":{}}}],["receives",{"_index":1610,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["receiving",{"_index":267,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["recht",{"_index":2191,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["recht24.de",{"_index":1392,"title":{},"body":{"components/ImprintComponent.html":{}}}],["rechte",{"_index":2173,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["rechtsgrundlage",{"_index":2146,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["recipient",{"_index":877,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["recipient.id",{"_index":881,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["recipient.type",{"_index":878,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["recipientavatarurl",{"_index":2321,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{}}}],["recipientcache",{"_index":2572,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["recipientid",{"_index":887,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"miscellaneous/variables.html":{}}}],["recipientname",{"_index":1107,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["recipientstatus",{"_index":2322,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{}}}],["recompiles",{"_index":2994,"title":{},"body":{"index.html":{}}}],["record",{"_index":1112,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"miscellaneous/typealiases.html":{}}}],["red",{"_index":1002,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["redirects",{"_index":2803,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["ref",{"_index":220,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["ref.afterclosed().subscribe(result",{"_index":222,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["reference",{"_index":913,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["references",{"_index":1536,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["regex",{"_index":1956,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["register",{"_index":1342,"title":{},"body":{"components/HeaderComponent.html":{},"index.html":{}}}],["registration",{"_index":1920,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["registriert",{"_index":2019,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reject",{"_index":2707,"title":{},"body":{"injectables/UserService.html":{}}}],["reject(error",{"_index":2748,"title":{},"body":{"injectables/UserService.html":{}}}],["reject(new",{"_index":2743,"title":{},"body":{"injectables/UserService.html":{}}}],["related",{"_index":1537,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["relative",{"_index":435,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["relevant",{"_index":2391,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["reloads",{"_index":2995,"title":{},"body":{"index.html":{}}}],["remove",{"_index":450,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["removechannellocally",{"_index":1064,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["removechannellocally(channelid",{"_index":1087,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["removeemojiatindex(c",{"_index":1781,"title":{},"body":{"interfaces/MyState.html":{}}}],["removeemojifrommessage(c",{"_index":1789,"title":{},"body":{"interfaces/MyState.html":{}}}],["removemember",{"_index":260,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["removemember(index",{"_index":2551,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["removemember(member",{"_index":196,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["removemember(user",{"_index":285,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["removes",{"_index":194,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["removing",{"_index":291,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{}}}],["repeat",{"_index":2845,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["replycache",{"_index":2323,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["replycount",{"_index":1097,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/ReplyCountService.html":{},"classes/ThreadMessagesBase.html":{}}}],["replycounts",{"_index":2506,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["replycounts[msgid",{"_index":2510,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["replycountservice",{"_index":2445,"title":{"injectables/ReplyCountService.html":{}},"body":{"injectables/ReplyCountService.html":{}}}],["replycountsmap",{"_index":1111,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/ReplyCountService.html":{},"miscellaneous/typealiases.html":{}}}],["replycountsunsubscribe",{"_index":743,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["repository",{"_index":2967,"title":{},"body":{"index.html":{}}}],["request",{"_index":3012,"title":{},"body":{"index.html":{}}}],["requested",{"_index":1554,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["requesting",{"_index":1546,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["requests",{"_index":1560,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PasswortResetComponent.html":{}}}],["required",{"_index":305,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"index.html":{}}}],["reset",{"_index":618,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"index.html":{}}}],["reset'},{'name",{"_index":537,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["reset.component",{"_index":587,"title":{},"body":{"components/AppComponent.html":{}}}],["reset.component.html",{"_index":1935,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.scss",{"_index":1934,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts",{"_index":1933,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:104",{"_index":1954,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:118",{"_index":1948,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:131",{"_index":1972,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:146",{"_index":1966,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:159",{"_index":1980,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:172",{"_index":1975,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:209",{"_index":1961,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:49",{"_index":2001,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:54",{"_index":1991,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:59",{"_index":2002,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:64",{"_index":1994,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:69",{"_index":1988,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:74",{"_index":1944,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.component.ts:96",{"_index":1964,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["reset.html",{"_index":3035,"title":{},"body":{"index.html":{}}}],["reset/passwort",{"_index":586,"title":{},"body":{"components/AppComponent.html":{},"components/PasswortResetComponent.html":{}}}],["resetinactivitytimer",{"_index":1182,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["resetpassword",{"_index":671,"title":{},"body":{"components/AuthActionComponent.html":{},"components/PasswortResetComponent.html":{}}}],["resetpassword(email",{"_index":1978,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["resetpasswordform",{"_index":1939,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["resettextareaheightfn",{"_index":839,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["resetting",{"_index":292,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/NewPasswortComponent.html":{}}}],["resize",{"_index":1004,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["resolve",{"_index":2711,"title":{},"body":{"injectables/UserService.html":{}}}],["resolvefieldname",{"_index":2590,"title":{},"body":{"injectables/ThreadService.html":{}}}],["resolvefieldname(type",{"_index":2623,"title":{},"body":{"injectables/ThreadService.html":{}}}],["responsive",{"_index":2919,"title":{},"body":{"index.html":{}}}],["restoredoriginal",{"_index":1268,"title":{},"body":{"interfaces/EditState.html":{}}}],["result",{"_index":223,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/InnerChannelComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{}}}],["result.avatarurl",{"_index":2425,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["result.email",{"_index":2427,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["result.isonline",{"_index":2424,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["result.name",{"_index":2426,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["result.selectedmembers",{"_index":967,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["result?.selectedmembers",{"_index":965,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["results",{"_index":242,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":2823,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["retrieves",{"_index":1812,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["return",{"_index":325,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":2548,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["returns",{"_index":276,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["reverse",{"_index":1897,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["rgba(0",{"_index":460,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["right",{"_index":375,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"index.html":{}}}],["root",{"_index":560,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppStateService.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":495,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["rotate",{"_index":1243,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["rotate(180deg",{"_index":1245,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["rotate(225deg",{"_index":1902,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["rotate(230deg",{"_index":399,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["route",{"_index":632,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{}}}],["router",{"_index":630,"title":{},"body":{"components/AuthActionComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/IntroComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["routerlink",{"_index":581,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{}}}],["routermodule",{"_index":1793,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["routeroutlet",{"_index":561,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":637,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["row",{"_index":1896,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["run",{"_index":2985,"title":{},"body":{"index.html":{}}}],["runs",{"_index":922,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["rxjs",{"_index":585,"title":{},"body":{"components/AppComponent.html":{},"classes/BaseChatComponent.html":{},"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"dependencies.html":{}}}],["s",{"_index":1759,"title":{},"body":{"interfaces/MyState.html":{}}}],["s.uid",{"_index":327,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["same",{"_index":941,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{}}}],["sample",{"_index":2973,"title":{},"body":{"index.html":{}}}],["sans",{"_index":1008,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["saturate(100",{"_index":394,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["saturate(2733",{"_index":1901,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["saturate(6834",{"_index":397,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["savelastusedemojis",{"_index":1027,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["savelastusedemojis(channelid",{"_index":1034,"title":{},"body":{"injectables/ChannelEmojiService.html":{}}}],["savelastusedthreademojis",{"_index":2591,"title":{},"body":{"injectables/ThreadService.html":{}}}],["savelastusedthreademojis(threadid",{"_index":2625,"title":{},"body":{"injectables/ThreadService.html":{}}}],["saves",{"_index":200,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{}}}],["saving",{"_index":227,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["scale",{"_index":454,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/InnerChannelComponent.html":{}}}],["scale(1.01",{"_index":1347,"title":{},"body":{"components/HeaderComponent.html":{}}}],["scale(1.1",{"_index":2438,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["schreiben",{"_index":2858,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["screen",{"_index":556,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["screen.component.html",{"_index":2851,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["screen.component.scss",{"_index":2852,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["screen.component.ts",{"_index":2850,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["screen.html",{"_index":3042,"title":{},"body":{"index.html":{}}}],["screen/welcome",{"_index":2849,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["screenshot",{"_index":2974,"title":{},"body":{"index.html":{}}}],["screenshots",{"_index":2910,"title":{},"body":{"index.html":{}}}],["scrollbar",{"_index":1600,"title":{},"body":{"components/MemberListDialogComponent.html":{},"dependencies.html":{}}}],["scrolltobottomfn",{"_index":840,"title":{},"body":{"interfaces/BroadcastContext.html":{},"miscellaneous/variables.html":{}}}],["scss",{"_index":2897,"title":{},"body":{"index.html":{}}}],["se.name",{"_index":185,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["search",{"_index":88,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["searchfieldbase",{"_index":2531,"title":{"classes/SearchFieldBase.html":{}},"body":{"classes/SearchFieldBase.html":{}}}],["searchfieldcomponent",{"_index":543,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["searchquery",{"_index":2536,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["secondary",{"_index":2435,"title":{},"body":{"components/ProfilDialogComponent.html":{}}}],["seconds",{"_index":1095,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["section",{"_index":532,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["see",{"_index":1949,"title":{},"body":{"components/PasswortResetComponent.html":{},"index.html":{}}}],["segoe",{"_index":1013,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["sein",{"_index":979,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["seiner",{"_index":2091,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sel",{"_index":208,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["sel.name",{"_index":165,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["sel.uid",{"_index":323,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["selcuk",{"_index":1381,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["selcuk.80&#64;outlook.de",{"_index":2185,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["selcuk.80@outlook.de",{"_index":2311,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["select",{"_index":3006,"title":{},"body":{"index.html":{}}}],["selectchannel",{"_index":1408,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["selectchannel(channel",{"_index":1448,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["selected",{"_index":51,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["selectedchannel",{"_index":1401,"title":{},"body":{"components/InnerChannelComponent.html":{},"classes/ThreadChannelBase.html":{}}}],["selectedmember",{"_index":744,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{}}}],["selectedmembers",{"_index":94,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["selectedmembers.length",{"_index":348,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["selectedmembers[0].name",{"_index":345,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["selectedmembersdialogcomponent",{"_index":50,"title":{"components/SelectedMembersDialogComponent.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["selectedrecipients",{"_index":845,"title":{},"body":{"interfaces/BroadcastContext.html":{},"classes/SearchFieldBase.html":{}}}],["selectedrecipients.filter((r",{"_index":847,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["selectedthread",{"_index":2324,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["selecting",{"_index":1617,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["selection",{"_index":431,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["selectmember",{"_index":261,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["selectmember(member",{"_index":189,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["selectmember(user",{"_index":288,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["selector",{"_index":65,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["selects",{"_index":290,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{}}}],["sendchannelmessagetosinglechannel",{"_index":855,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendchannelmessagetosinglechannel(context",{"_index":852,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendemailverification",{"_index":2732,"title":{},"body":{"injectables/UserService.html":{}}}],["sendemailverification(user",{"_index":2762,"title":{},"body":{"injectables/UserService.html":{}}}],["senden",{"_index":2052,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["senderavatar",{"_index":888,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{}}}],["senderid",{"_index":863,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["sendername",{"_index":865,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{}}}],["sendmessage",{"_index":1633,"title":{},"body":{"injectables/MessageCrudService.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["sendmessage(data",{"_index":1652,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["sendmessagetoallcompletely",{"_index":844,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendpasswordresetemail",{"_index":2003,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["sendpasswordresetemail(this.auth",{"_index":2011,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["sends",{"_index":1976,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["sendtoallusers",{"_index":874,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendtoallusers(context",{"_index":849,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendtosinglerecipient",{"_index":876,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendtosinglerecipient(context",{"_index":875,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["sendverificationemail",{"_index":2687,"title":{},"body":{"injectables/UserService.html":{}}}],["sendverificationemail(user",{"_index":2718,"title":{},"body":{"injectables/UserService.html":{}}}],["sent",{"_index":1031,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"components/PasswortResetComponent.html":{},"injectables/ThreadService.html":{}}}],["sent').then(s",{"_index":1757,"title":{},"body":{"interfaces/MyState.html":{}}}],["sentemojis",{"_index":2615,"title":{},"body":{"injectables/ThreadService.html":{}}}],["separate",{"_index":2951,"title":{},"body":{"index.html":{}}}],["separating",{"_index":2980,"title":{},"body":{"index.html":{}}}],["sepia(39",{"_index":396,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["sepia(62",{"_index":1900,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["serif",{"_index":1009,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["serve",{"_index":2986,"title":{},"body":{"index.html":{}}}],["servertimestamp",{"_index":1125,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/ThreadService.html":{}}}],["service",{"_index":102,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PasswortResetComponent.html":{}}}],["services",{"_index":1415,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{}}}],["set",{"_index":311,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["set([...newemojis",{"_index":2659,"title":{},"body":{"injectables/ThreadService.html":{}}}],["set(context.lastusedemojisreceived",{"_index":1290,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["set(context.lastusedemojissent)].slice",{"_index":1288,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["setdoc",{"_index":2633,"title":{},"body":{"injectables/ThreadService.html":{}}}],["setdoc(ref",{"_index":2661,"title":{},"body":{"injectables/ThreadService.html":{}}}],["sets",{"_index":2813,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["setshowwelcomecontainer",{"_index":601,"title":{},"body":{"injectables/AppStateService.html":{}}}],["setshowwelcomecontainer(show",{"_index":604,"title":{},"body":{"injectables/AppStateService.html":{}}}],["settimeout",{"_index":176,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/DirectMessagesComponent.html":{},"components/IntroComponent.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["settings",{"_index":1981,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["setuserasinactive",{"_index":1183,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["setze",{"_index":137,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["shadow",{"_index":457,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["sheet",{"_index":45,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["short",{"_index":1977,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["shortly",{"_index":172,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["shouldcancelbroadcastfn",{"_index":846,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["show",{"_index":606,"title":{},"body":{"injectables/AppStateService.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["showallemojislist",{"_index":1103,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["showallmembers",{"_index":169,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["showatdropdown",{"_index":2537,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["showdateseparator",{"_index":1108,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{}}}],["showeditoptions",{"_index":745,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/EditState.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["showlargeimage",{"_index":746,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["shown",{"_index":1473,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["showregister",{"_index":1325,"title":{},"body":{"components/HeaderComponent.html":{}}}],["shows",{"_index":166,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"index.html":{}}}],["showuserdropdown",{"_index":2325,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["showwelcomecontainer",{"_index":599,"title":{},"body":{"injectables/AppStateService.html":{},"classes/BaseChatComponent.html":{},"components/InnerChannelComponent.html":{}}}],["sich",{"_index":2303,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sie",{"_index":977,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["sign",{"_index":2802,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["signals",{"_index":2394,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["signed",{"_index":2753,"title":{},"body":{"injectables/UserService.html":{}}}],["signinwithemaillink",{"_index":2827,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["signinwithemaillink(firebaseauth",{"_index":2835,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["signout",{"_index":2733,"title":{},"body":{"injectables/UserService.html":{}}}],["signout(auth",{"_index":2786,"title":{},"body":{"injectables/UserService.html":{}}}],["signs",{"_index":2812,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["signup",{"_index":1336,"title":{},"body":{"components/HeaderComponent.html":{}}}],["signup'},{'name",{"_index":546,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["signup.html",{"_index":3039,"title":{},"body":{"index.html":{}}}],["signup/signup.component",{"_index":576,"title":{},"body":{"components/AppComponent.html":{}}}],["signupcomponent",{"_index":545,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["similarly",{"_index":2809,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["simple",{"_index":3076,"title":{},"body":{"index.html":{}}}],["simplebar",{"_index":2884,"title":{},"body":{"dependencies.html":{}}}],["sind",{"_index":1577,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/PrivacyComponent.html":{}}}],["single",{"_index":195,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["sinne",{"_index":2182,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["site",{"_index":3086,"title":{},"body":{"index.html":{}}}],["size",{"_index":378,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["sizing",{"_index":441,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["slice(0",{"_index":1291,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["snap",{"_index":1732,"title":{},"body":{"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["snap.data",{"_index":2645,"title":{},"body":{"injectables/ThreadService.html":{}}}],["snap.exists",{"_index":2644,"title":{},"body":{"injectables/ThreadService.html":{}}}],["snap.size",{"_index":2504,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["snapshot",{"_index":1165,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["snapshot.data",{"_index":2502,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["snapshot.docs.map((doc",{"_index":2782,"title":{},"body":{"injectables/UserService.html":{}}}],["snapshot.docs.map((docsnap",{"_index":1167,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["snapshot.docs[count",{"_index":2513,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["snapshot.exists",{"_index":2501,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["snapshot.size",{"_index":2511,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["sobald",{"_index":2271,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sofern",{"_index":2224,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["solche",{"_index":2116,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["solid",{"_index":439,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["sollten",{"_index":976,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["soweit",{"_index":2148,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sowie",{"_index":2083,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["space",{"_index":365,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["span",{"_index":471,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["specific",{"_index":432,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{}}}],["specificmembername",{"_index":89,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["specified",{"_index":1450,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["specify",{"_index":899,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["speichern",{"_index":2399,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["speicherung",{"_index":2124,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["später",{"_index":2042,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["src",{"_index":3019,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":3103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../conversation.helpers.ts",{"_index":3107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":3104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":3105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../message.models.ts",{"_index":3101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../positions",{"_index":3114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../search",{"_index":3110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/add",{"_index":6,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["src/app/app",{"_index":597,"title":{},"body":{"injectables/AppStateService.html":{}}}],["src/app/app.component.ts",{"_index":559,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:33",{"_index":570,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:34",{"_index":568,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":565,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":3117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/auth",{"_index":610,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["src/app/channel",{"_index":896,"title":{},"body":{"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{}}}],["src/app/direct",{"_index":1169,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["src/app/entwicklerteam/base",{"_index":709,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["src/app/entwicklerteam/entwicklerteam",{"_index":1735,"title":{},"body":{"interfaces/MyState.html":{}}}],["src/app/entwicklerteam/positions",{"_index":3172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/footer/footer.component.ts",{"_index":1314,"title":{},"body":{"components/FooterComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1321,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:13",{"_index":1333,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:15",{"_index":1330,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:18",{"_index":1332,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:23",{"_index":1331,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/imprint/imprint.component.ts",{"_index":1364,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/imprint/imprint.component.ts:13",{"_index":1371,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/imprint/imprint.component.ts:17",{"_index":1373,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/imprint/imprint.component.ts:20",{"_index":1372,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/inner",{"_index":1394,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["src/app/intro/intro.component.ts",{"_index":1516,"title":{},"body":{"components/IntroComponent.html":{}}}],["src/app/intro/intro.component.ts:12",{"_index":1520,"title":{},"body":{"components/IntroComponent.html":{}}}],["src/app/intro/intro.component.ts:15",{"_index":1521,"title":{},"body":{"components/IntroComponent.html":{}}}],["src/app/member",{"_index":1525,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["src/app/member.model.ts",{"_index":1524,"title":{},"body":{"interfaces/Member.html":{}}}],["src/app/message",{"_index":1624,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["src/app/message.models.ts",{"_index":1094,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/new",{"_index":1790,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["src/app/passwort",{"_index":1932,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["src/app/privacy/privacy.component.ts",{"_index":2064,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/privacy/privacy.component.ts:13",{"_index":2067,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/privacy/privacy.component.ts:17",{"_index":2069,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/privacy/privacy.component.ts:20",{"_index":2068,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/private",{"_index":2313,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["src/app/profil",{"_index":2377,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["src/app/reply",{"_index":2446,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["src/app/search",{"_index":835,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"classes/SearchFieldBase.html":{},"miscellaneous/variables.html":{}}}],["src/app/selected",{"_index":2546,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["src/app/thread",{"_index":2558,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["src/app/thread.service.ts",{"_index":2577,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:101",{"_index":2599,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:111",{"_index":2619,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:123",{"_index":2626,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:135",{"_index":2624,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:139",{"_index":2605,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:150",{"_index":2621,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:157",{"_index":2628,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:166",{"_index":2607,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:181",{"_index":2601,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:188",{"_index":2617,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:19",{"_index":2595,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:22",{"_index":2613,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:39",{"_index":2632,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:46",{"_index":2597,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:59",{"_index":2603,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:69",{"_index":2611,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:79",{"_index":2630,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread.service.ts:87",{"_index":2609,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/thread/thread",{"_index":2569,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["src/app/user.service.ts",{"_index":2675,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:104",{"_index":2715,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:111",{"_index":2719,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:119",{"_index":2721,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:124",{"_index":2717,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:142",{"_index":2723,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:156",{"_index":2728,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:170",{"_index":2694,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:180",{"_index":2703,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:199",{"_index":2700,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:205",{"_index":2702,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:215",{"_index":2698,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:226",{"_index":2696,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:239",{"_index":2713,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:251",{"_index":2705,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:31",{"_index":2693,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:39",{"_index":2699,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:52",{"_index":2712,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:71",{"_index":2709,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/user.service.ts:84",{"_index":2726,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/verify",{"_index":2789,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["src/app/welcome",{"_index":2848,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":3134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":3149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["standalone",{"_index":68,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["start",{"_index":338,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":2894,"title":{"index.html":{}},"body":{}}],["starteditinghelper(msg",{"_index":1262,"title":{},"body":{"interfaces/EditState.html":{}}}],["starting",{"_index":1550,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{}}}],["startprivatechat",{"_index":1529,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["startprivatechat(member",{"_index":1566,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["state",{"_index":293,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{}}}],["state.service",{"_index":2735,"title":{},"body":{"injectables/UserService.html":{}}}],["state.service.ts",{"_index":598,"title":{},"body":{"injectables/AppStateService.html":{},"index.html":{}}}],["state.service.ts:13",{"_index":605,"title":{},"body":{"injectables/AppStateService.html":{}}}],["state.service.ts:7",{"_index":607,"title":{},"body":{"injectables/AppStateService.html":{}}}],["state.service.ts:9",{"_index":602,"title":{},"body":{"injectables/AppStateService.html":{}}}],["statthaft",{"_index":2266,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["status",{"_index":468,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["steigerung",{"_index":2157,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["steps",{"_index":2965,"title":{},"body":{"index.html":{}}}],["stimmen",{"_index":1860,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["storage",{"_index":2692,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["storagebucket",{"_index":3143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storedemail",{"_index":2817,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["stores",{"_index":1470,"title":{},"body":{"components/InnerChannelComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["storethreademojis",{"_index":2592,"title":{},"body":{"injectables/ThreadService.html":{}}}],["storethreademojis(threadid",{"_index":2627,"title":{},"body":{"injectables/ThreadService.html":{}}}],["str.33",{"_index":1385,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["string",{"_index":22,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/InnerChannelComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["string[],receivedemojis",{"_index":2616,"title":{},"body":{"injectables/ThreadService.html":{}}}],["structure",{"_index":2412,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"index.html":{}}}],["structured",{"_index":2934,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2989,"title":{},"body":{"index.html":{}}}],["style",{"_index":463,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["styles",{"_index":247,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["styles.scss",{"_index":349,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["styleurl",{"_index":1317,"title":{},"body":{"components/FooterComponent.html":{},"components/ImprintComponent.html":{},"components/IntroComponent.html":{},"components/PrivacyComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["styleurls",{"_index":73,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["styling",{"_index":1996,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["sub",{"_index":2977,"title":{},"body":{"index.html":{}}}],["submit",{"_index":3069,"title":{},"body":{"index.html":{}}}],["submits",{"_index":1825,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["submitsigninlink",{"_index":2797,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["submitsigninlink(firebaseauth",{"_index":2810,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["submitted",{"_index":1798,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["subscribeallmessageids",{"_index":2457,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["subscribeallmessageids(msgids",{"_index":2483,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["subscribes",{"_index":1443,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["subscribing",{"_index":1821,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["subscription",{"_index":819,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["success",{"_index":1846,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["successful",{"_index":233,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/InnerChannelComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["successfully",{"_index":1847,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["successmessage",{"_index":1799,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["such",{"_index":616,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["support",{"_index":2938,"title":{},"body":{"index.html":{}}}],["supports",{"_index":61,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["sure",{"_index":3090,"title":{},"body":{"index.html":{}}}],["switch",{"_index":1875,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["table",{"_index":2904,"title":{},"body":{"index.html":{}}}],["taken",{"_index":936,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["taking",{"_index":2388,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["targetmsgid",{"_index":1260,"title":{},"body":{"interfaces/EditState.html":{}}}],["team",{"_index":972,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["team.name",{"_index":1506,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["teams",{"_index":1465,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["technologies",{"_index":2907,"title":{},"body":{"index.html":{}}}],["telefon",{"_index":2183,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["template",{"_index":246,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["templateurl",{"_index":71,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["term",{"_index":181,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["test",{"_index":3018,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2909,"title":{},"body":{"index.html":{}}}],["text",{"_index":856,"title":{},"body":{"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/FirestoreMessageData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["textarea",{"_index":842,"title":{},"body":{"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{}}}],["themenbezogen",{"_index":978,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["then((data",{"_index":1223,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["then((messages",{"_index":3159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then((user",{"_index":3164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then((userdata",{"_index":3169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then(users",{"_index":155,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["there's",{"_index":2806,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["this.allusers",{"_index":138,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.allusers.filter",{"_index":319,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.allusers.filter((u",{"_index":146,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.allusers.filter(m",{"_index":161,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.allusers.filter(u",{"_index":156,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.allusers.length",{"_index":324,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.appstateservice.setshowwelcomecontainer(true",{"_index":2785,"title":{},"body":{"injectables/UserService.html":{}}}],["this.auth.currentuser",{"_index":683,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.bottomsheetref",{"_index":236,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.bottomsheetref.dismiss",{"_index":240,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.bottomsheetref.dismiss(updated",{"_index":237,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.bottomsheetref?.dismiss",{"_index":332,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.bottomsheetref?.dismiss(updated",{"_index":331,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.buildchannelsbynamequery(channelname",{"_index":1158,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["this.buildlistenformessagesquery(type",{"_index":1730,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["this.buildlistenmessagesquery(type",{"_index":1722,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["this.buildmessagepayload(data",{"_index":1660,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["this.buildnewchannel(name",{"_index":1484,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.buildprivatequery(messagesref",{"_index":1725,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["this.buildquerybytype(type",{"_index":1667,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["this.buildqueryforid(type",{"_index":1666,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["this.buildthreadchannelquery(messagesref",{"_index":1727,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["this.buildthreadmessagesquery(threadid",{"_index":2650,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.buildthreadquery(messagesref",{"_index":1726,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["this.channelid",{"_index":121,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.channelname",{"_index":123,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{}}}],["this.channelname.tolowercase",{"_index":960,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.channelnameexists",{"_index":961,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["this.channelselected.emit(channel",{"_index":1498,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelselected.emit(null",{"_index":1504,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.addchannel",{"_index":966,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.channelservice.addchannel(newchannel",{"_index":1487,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.changechannel(channel",{"_index":1497,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.changechannel(newchannel",{"_index":1488,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.getchannels",{"_index":955,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.channelservice.leavechannel(channelid",{"_index":1502,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.listenchannelslive",{"_index":1476,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.channelservice.setmembers(this.channelid",{"_index":212,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.checkemailexists(email",{"_index":2016,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.close.emit",{"_index":231,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.closedialogorsheet",{"_index":214,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.commitmessage(messagepayload",{"_index":1661,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["this.countfilteredreplies",{"_index":2498,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.createchannel(result.channelname",{"_index":1501,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.data",{"_index":119,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data.channelid",{"_index":120,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.data.channelname",{"_index":122,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.data.filteredmembers",{"_index":126,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.data.members",{"_index":124,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.data.useravatarurl",{"_index":2418,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data.useremail",{"_index":2420,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data.userid",{"_index":2421,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data.username",{"_index":2414,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data.userstatus",{"_index":2416,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.data?.filteredmembers",{"_index":145,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.description",{"_index":968,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.dialog.open(channeldialogcomponent",{"_index":1499,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.dialog.open(membersdialogcomponent",{"_index":963,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.dialog.open(selectedmembersdialogcomponent",{"_index":221,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.dialogref",{"_index":229,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.dialogref.close",{"_index":230,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["this.dialogref.close(updated",{"_index":235,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.doeschannelnameexist(name",{"_index":1481,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.editableuseremail",{"_index":2834,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["this.email",{"_index":2828,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["this.ensurecurrentuserincluded(members",{"_index":1482,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.entwicklerteams",{"_index":1477,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.entwicklerteams.filter",{"_index":1503,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.entwicklerteams.push(newchannel",{"_index":1486,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.entwicklerteams.some",{"_index":1489,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.errormessage",{"_index":1857,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["this.excludeexistingandselected",{"_index":144,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.executechannelsbynamequery(qref",{"_index":1159,"title":{},"body":{"injectables/ChannelQueriesService.html":{}}}],["this.extractthreademojis(snap.data",{"_index":2663,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.fb.group",{"_index":1851,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.fetchreplycountandtime",{"_index":2509,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.fetchthreademojis(threadid",{"_index":2639,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.filledstates[field",{"_index":2009,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.filteredmembers",{"_index":127,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.filteredmembers.filter(u",{"_index":330,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.filteredmembers.length",{"_index":128,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.filteroutleavinguser",{"_index":1083,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["this.geterrormessage(error",{"_index":1872,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.getexistingthreademojis(threadid",{"_index":2655,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.getfilterfield(type",{"_index":2496,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.getfilterfieldforreplies(type",{"_index":2507,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.getparentdocdata(parentref",{"_index":2493,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.getreplyfilterfield(type",{"_index":2524,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.getyesterdaydate",{"_index":2543,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["this.handlechannelleaving",{"_index":1078,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["this.handleemailverification(this.oobcode",{"_index":674,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.handlelogout(user",{"_index":2784,"title":{},"body":{"injectables/UserService.html":{}}}],["this.handlememberssaved(updated",{"_index":213,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.handlenousersignedin(user",{"_index":2738,"title":{},"body":{"injectables/UserService.html":{}}}],["this.handlepasswordreset(this.oobcode",{"_index":672,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.handlesignedinuser(user",{"_index":2737,"title":{},"body":{"injectables/UserService.html":{}}}],["this.inactivitytimeout",{"_index":1229,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.incrementoraddemoji(emojis",{"_index":2640,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.ischannelnamevalid",{"_index":953,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["this.ischannelsvisible",{"_index":1236,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["this.ismemberslistvisible",{"_index":170,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.items",{"_index":592,"title":{},"body":{"components/AppComponent.html":{}}}],["this.listenforauthchanges",{"_index":1219,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.loadallusers",{"_index":130,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.loading",{"_index":687,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.loadmembers",{"_index":1210,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.location.back",{"_index":1375,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["this.mapmessagesonce(snapshot",{"_index":1669,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["this.mapreplysnapshot(snap",{"_index":2529,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.members",{"_index":125,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{}}}],["this.members.filter(m",{"_index":1586,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.members.some((ex",{"_index":147,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.members.some((m",{"_index":1585,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.members.some(ex",{"_index":157,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.members.some(m",{"_index":209,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.membersadded.emit(updated",{"_index":238,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.memberselected.emit",{"_index":1622,"title":{},"body":{"components/MemberSectionDialogComponent.html":{}}}],["this.memberselected.emit(member",{"_index":1237,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.mergenewandexistingemojis(newemojis",{"_index":2656,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.messageservice.onalluserschanged",{"_index":132,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.messageservice.onalluserschanged((allusers",{"_index":1211,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.messageservice.onrecipientstatuschanged",{"_index":2423,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.messageservice.setuseronlinestatus(current.uid",{"_index":1235,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.messageservice.setuseronlinestatus(currentuser.uid",{"_index":1228,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.messageservice.setuseronlinestatus(user.uid",{"_index":1234,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.mode",{"_index":667,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.newpasswordform",{"_index":1850,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.get('confirmpassword')?.value",{"_index":1874,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.get('newpassword')?.value",{"_index":1873,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.reset",{"_index":1870,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.valid",{"_index":1863,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.value.newpassword",{"_index":1864,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.newpasswordform.valuechanges.subscribe",{"_index":1855,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.oobcode",{"_index":669,"title":{},"body":{"components/AuthActionComponent.html":{},"components/NewPasswortComponent.html":{}}}],["this.openaddmembersoverlay.emit",{"_index":1594,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.openprivatechat.emit(payload",{"_index":1590,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.openprofilerequested.emit(member",{"_index":1592,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.passwordsmatch",{"_index":1858,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.performemailupdate(user",{"_index":2755,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reauthenticateuser(user",{"_index":2754,"title":{},"body":{"injectables/UserService.html":{}}}],["this.resetinactivitytimer",{"_index":1220,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.resetpassword(email",{"_index":2023,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.resetpasswordform.get(field)?.value",{"_index":2010,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.resetpasswordform.valid",{"_index":2013,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.resetpasswordform.value.email",{"_index":2014,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["this.resolvefieldname(type",{"_index":2654,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.route.queryparams.subscribe((params",{"_index":1854,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.route.queryparams.subscribe(params",{"_index":666,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.router.navigate(['/avatar",{"_index":688,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.router.navigate(['/chat",{"_index":2838,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["this.router.navigate(['/login",{"_index":1522,"title":{},"body":{"components/IntroComponent.html":{},"components/NewPasswortComponent.html":{},"injectables/UserService.html":{}}}],["this.router.navigate(['/new",{"_index":678,"title":{},"body":{"components/AuthActionComponent.html":{},"components/PasswortResetComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":1337,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.router.url",{"_index":1335,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.savelastusedthreademojis(threadid",{"_index":2643,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.selectedmembers",{"_index":197,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["this.selectedmembers.filter",{"_index":207,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.filter(m",{"_index":198,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.push(member",{"_index":192,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.selectedmembers.push(user",{"_index":329,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.some(m",{"_index":190,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.some(s",{"_index":326,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.some(se",{"_index":184,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["this.selectedmembers.some(sel",{"_index":164,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.selectedmembers.splice(index",{"_index":2555,"title":{},"body":{"components/SelectedMembersDialogComponent.html":{}}}],["this.sendverificationemail(user",{"_index":2758,"title":{},"body":{"injectables/UserService.html":{}}}],["this.setuserasinactive",{"_index":1231,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.showregister",{"_index":1334,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.showwelcomecontainer",{"_index":609,"title":{},"body":{"injectables/AppStateService.html":{}}}],["this.specificmembername",{"_index":193,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.specificmembername.tolowercase",{"_index":182,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.storethreademojis(threadid",{"_index":2657,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.submitsigninlink(firebaseauth",{"_index":2833,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["this.submitted",{"_index":1856,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["this.subscribeallmessageids(msgids",{"_index":2520,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.successmessage",{"_index":1866,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["this.unsubscribeallusers",{"_index":131,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.unsubscribefn",{"_index":1475,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.unsubscriberecipient",{"_index":2422,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.updatechannelmembers",{"_index":1587,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["this.updateemailinfirestore(user.uid",{"_index":2757,"title":{},"body":{"injectables/UserService.html":{}}}],["this.updatereplycountinparent(parentref",{"_index":2499,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["this.updatethreademojisindoc(threadid",{"_index":2641,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.useravatarurl",{"_index":2417,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.useremail",{"_index":2419,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.userisactive",{"_index":1227,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.username",{"_index":2413,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.userservice",{"_index":1221,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["this.userservice.getallusers",{"_index":154,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["this.userservice.getcurrentuserdata",{"_index":1480,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["this.userservice.getcurrentuserid",{"_index":1070,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/InnerChannelComponent.html":{}}}],["this.userservice.getuserbyid(currentuid",{"_index":1074,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["this.userservice.updateemailinfirestore(user.uid",{"_index":685,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["this.userstatus",{"_index":2415,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["this.validatethreadchannel(data",{"_index":1658,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["this.verifysigninlink(firebaseauth",{"_index":2831,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["those",{"_index":151,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{},"index.html":{}}}],["thread",{"_index":548,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"injectables/ThreadService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["thread'},{'name",{"_index":550,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["thread.html",{"_index":3040,"title":{},"body":{"index.html":{}}}],["thread.time.helpers",{"_index":2575,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["threadchannelbase",{"_index":2557,"title":{"classes/ThreadChannelBase.html":{}},"body":{"classes/ThreadChannelBase.html":{}}}],["threadchannelcomponent",{"_index":547,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["threadchannelid",{"_index":1099,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ReplyCountService.html":{}}}],["threadcomponent",{"_index":549,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["threaddocref",{"_index":2635,"title":{},"body":{"injectables/ThreadService.html":{}}}],["threadid",{"_index":1105,"title":{},"body":{"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{}}}],["threadmessages",{"_index":2562,"title":{},"body":{"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["threadmessagesbase",{"_index":2568,"title":{"classes/ThreadMessagesBase.html":{}},"body":{"classes/ThreadMessagesBase.html":{}}}],["threads",{"_index":2860,"title":{},"body":{"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["threadservice",{"_index":2576,"title":{"injectables/ThreadService.html":{}},"body":{"injectables/ThreadService.html":{}}}],["threadtime",{"_index":747,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["through",{"_index":1570,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["throw",{"_index":1080,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/MessageCrudService.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["tid",{"_index":1766,"title":{},"body":{"interfaces/MyState.html":{}}}],["time",{"_index":868,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"index.html":{}}}],["timestamp",{"_index":870,"title":{},"body":{"interfaces/BroadcastContext.html":{},"interfaces/ChannelMessageData.html":{},"interfaces/FirestoreMessageData.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{}}}],["title",{"_index":564,"title":{},"body":{"components/AppComponent.html":{},"components/ChannelDialogComponent.html":{}}}],["tmg",{"_index":1378,"title":{},"body":{"components/ImprintComponent.html":{}}}],["togglechannels",{"_index":1184,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["toggleeditmessagehelper(msg",{"_index":1265,"title":{},"body":{"interfaces/EditState.html":{}}}],["toggleeditoptionshelper",{"_index":1258,"title":{},"body":{"interfaces/EditState.html":{}}}],["toggles",{"_index":1455,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["tooltipemoji",{"_index":748,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["tooltipposition",{"_index":749,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["tooltipsendername",{"_index":750,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["tooltipvisible",{"_index":751,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["top",{"_index":342,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":2935,"title":{},"body":{"index.html":{}}}],["topics",{"_index":2981,"title":{},"body":{"index.html":{}}}],["tracks",{"_index":1995,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["transform",{"_index":372,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["transition",{"_index":367,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["translate",{"_index":1353,"title":{},"body":{"components/HeaderComponent.html":{}}}],["translates",{"_index":1962,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["translatey",{"_index":996,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey(0",{"_index":1357,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transparent",{"_index":452,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/HeaderComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["tree",{"_index":249,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["treten",{"_index":2286,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["triggered",{"_index":2805,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["trimmed",{"_index":932,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["true",{"_index":69,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMsgService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"miscellaneous/variables.html":{}}}],["truncate",{"_index":1595,"title":{},"body":{"components/MemberListDialogComponent.html":{}}}],["try",{"_index":675,"title":{},"body":{"components/AuthActionComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"interfaces/EmojiContext.html":{},"components/InnerChannelComponent.html":{},"injectables/MessageCrudService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["ts",{"_index":2514,"title":{},"body":{"injectables/ReplyCountService.html":{},"index.html":{}}}],["ts.todate",{"_index":2517,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["ts?.todate",{"_index":2516,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["tslib",{"_index":2887,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"interfaces/ChannelMessageData.html":{},"injectables/ChannelMsgService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EditState.html":{},"interfaces/EmojiContext.html":{},"interfaces/FirestoreMessageData.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"interfaces/Member.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"interfaces/Message.html":{},"interfaces/MessageContent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"classes/SearchFieldBase.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3099,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":859,"title":{},"body":{"interfaces/BroadcastContext.html":{}}}],["typescript",{"_index":2896,"title":{},"body":{"index.html":{}}}],["typing",{"_index":93,"title":{},"body":{"interfaces/AddMembersDialogData.html":{}}}],["u",{"_index":320,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{}}}],["u.name.tolowercase().includes(term",{"_index":322,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["u.uid",{"_index":149,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["ui",{"_index":274,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{}}}],["uid",{"_index":832,"title":{},"body":{"classes/BaseChatComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{},"classes/PrivateMessagesBase.html":{},"injectables/UserService.html":{}}}],["ul",{"_index":462,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["um",{"_index":2764,"title":{},"body":{"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["umfang",{"_index":2143,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unbekannt",{"_index":867,"title":{},"body":{"interfaces/BroadcastContext.html":{},"components/InnerChannelComponent.html":{}}}],["unbekannter",{"_index":1886,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["unbeschadet",{"_index":2255,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["und",{"_index":140,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/PrivacyComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["undefined",{"_index":786,"title":{},"body":{"classes/BaseChatComponent.html":{},"interfaces/MyState.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["under",{"_index":3080,"title":{},"body":{"index.html":{}}}],["understandable",{"_index":3077,"title":{},"body":{"index.html":{}}}],["unfilled",{"_index":1969,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["ungültig",{"_index":1881,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["unique",{"_index":206,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{}}}],["unique.length",{"_index":210,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{}}}],["unit",{"_index":3013,"title":{},"body":{"index.html":{}}}],["unmöglich",{"_index":2250,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unrichtiger",{"_index":2203,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["uns",{"_index":2079,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unsere",{"_index":2167,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unseres",{"_index":2268,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unset",{"_index":425,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["unsub",{"_index":2519,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["unsub.foreach((fn",{"_index":2521,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["unsubscribe",{"_index":1723,"title":{},"body":{"injectables/MessageQueriesService.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["unsubscribeallusers",{"_index":105,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["unsubscribechannels",{"_index":752,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["unsubscribeemojilistener",{"_index":2326,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["unsubscribefn",{"_index":1402,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["unsubscribefromboth(c",{"_index":1739,"title":{},"body":{"interfaces/MyState.html":{}}}],["unsubscribefromprivatemessages",{"_index":2327,"title":{},"body":{"classes/PrivateMessagesBase.html":{}}}],["unsubscribefromreplycount",{"_index":2563,"title":{},"body":{"classes/ThreadChannelBase.html":{}}}],["unsubscribefromthreaddetails",{"_index":753,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{}}}],["unsubscribefromthreadmessages",{"_index":754,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["unsubscribelivereplycounts",{"_index":755,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{}}}],["unsubscribeparent",{"_index":2564,"title":{},"body":{"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["unsubscriberecipient",{"_index":2328,"title":{},"body":{"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["unsubscribereplycount",{"_index":2573,"title":{},"body":{"classes/ThreadMessagesBase.html":{}}}],["unsubscribes",{"_index":2523,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["unsubscribes.push(unsub",{"_index":2530,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["unsubscribesubcollection",{"_index":756,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["unsubscribetoplevel",{"_index":757,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["unsubscribeusers",{"_index":758,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["unter",{"_index":2227,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unterrichten",{"_index":2245,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unverhältnismäßigen",{"_index":2252,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unverzügliche",{"_index":2207,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unvollständiger",{"_index":2205,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["update",{"_index":306,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/VerifyEmailComponent.html":{}}}],["updatechannelmembers",{"_index":1530,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["updated",{"_index":211,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/InnerChannelComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"injectables/ThreadService.html":{}}}],["updatedata",{"_index":1135,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatedata.edited",{"_index":1136,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatedata.editedat",{"_index":1137,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatedcontent",{"_index":1122,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatedemojisreceived",{"_index":2672,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatedemojissent",{"_index":2670,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatedmembers",{"_index":1081,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["updatedmembers.length",{"_index":1084,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["updatedmembersuid",{"_index":1082,"title":{},"body":{"injectables/ChannelMembershipService.html":{}}}],["updatedmsg",{"_index":1267,"title":{},"body":{"interfaces/EditState.html":{}}}],["updatedoc",{"_index":1039,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelMsgService.html":{},"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{}}}],["updatedoc(channeldocref",{"_index":1043,"title":{},"body":{"injectables/ChannelEmojiService.html":{},"injectables/ChannelMembershipService.html":{}}}],["updatedoc(messagedocref",{"_index":1138,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatedoc(messageref",{"_index":2638,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatedoc(ref",{"_index":2505,"title":{},"body":{"injectables/ReplyCountService.html":{},"injectables/ThreadService.html":{}}}],["updatedoc(userdocref",{"_index":2745,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedoc(userref",{"_index":2751,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemail",{"_index":661,"title":{},"body":{"components/AuthActionComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["updateemail(user",{"_index":684,"title":{},"body":{"components/AuthActionComponent.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["updateemailinfirestore",{"_index":2688,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailinfirestore(uid",{"_index":2720,"title":{},"body":{"injectables/UserService.html":{}}}],["updatemessage",{"_index":1116,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatemessage(channelid",{"_index":1120,"title":{},"body":{"injectables/ChannelMsgService.html":{}}}],["updatemessage(message.id",{"_index":1787,"title":{},"body":{"interfaces/MyState.html":{}}}],["updatemessagefn",{"_index":1308,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["updatemessagefn(msg.id",{"_index":1310,"title":{},"body":{"interfaces/EmojiContext.html":{}}}],["updatemessageinfirestore(c",{"_index":1783,"title":{},"body":{"interfaces/MyState.html":{}}}],["updatemessages",{"_index":3154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatemessages(msgs",{"_index":3161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updaterecipientavatar",{"_index":3167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updaterecipientavatar(userdata.avatarurl",{"_index":3171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updaterecipientstatus",{"_index":3166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updaterecipientstatus(userdata.isonline",{"_index":3170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatereplycount",{"_index":2458,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["updatereplycount(parentmessageid",{"_index":2486,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["updatereplycountinparent",{"_index":2459,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["updatereplycountinparent(ref",{"_index":2489,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["updates",{"_index":646,"title":{},"body":{"components/AuthActionComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["updatethreademojisindoc",{"_index":2593,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatethreademojisindoc(threadid",{"_index":2629,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatethreadlastresponsetime",{"_index":2594,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updatethreadlastresponsetime(threadid",{"_index":2631,"title":{},"body":{"injectables/ThreadService.html":{}}}],["updateuser",{"_index":3163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuser(user",{"_index":3165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuseravatar",{"_index":2689,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuseravatar(avatardataurl",{"_index":2722,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuseremail",{"_index":2690,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuseremail(newemail",{"_index":2725,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusername",{"_index":2691,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusername(newname",{"_index":2727,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":640,"title":{},"body":{"components/AuthActionComponent.html":{},"components/InnerChannelComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["upload",{"_index":2944,"title":{},"body":{"index.html":{}}}],["upon",{"_index":1447,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["url",{"_index":2020,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{}}}],["url(\"/assets/img/black",{"_index":2846,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["url(\"/assets/img/mail.png",{"_index":2844,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["usage",{"_index":64,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"index.html":{}}}],["use",{"_index":2983,"title":{},"body":{"index.html":{}}}],["used",{"_index":12,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["user",{"_index":91,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":315,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/VerifyEmailComponent.html":{}}}],["user.name",{"_index":343,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{}}}],["user.service",{"_index":47,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["user.service.ts",{"_index":3048,"title":{},"body":{"index.html":{}}}],["user.uid",{"_index":328,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"injectables/UserService.html":{}}}],["user?.uid",{"_index":2749,"title":{},"body":{"injectables/UserService.html":{}}}],["useravatarurl",{"_index":2381,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["userdata",{"_index":1073,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"components/InnerChannelComponent.html":{},"injectables/UserService.html":{}}}],["userdata.name",{"_index":1485,"title":{},"body":{"components/InnerChannelComponent.html":{},"injectables/UserService.html":{}}}],["userdata.name.startswith('guest",{"_index":2787,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocref",{"_index":2739,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocsnap",{"_index":2740,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocsnap.data",{"_index":2747,"title":{},"body":{"injectables/UserService.html":{}}}],["userdocsnap.exists",{"_index":2742,"title":{},"body":{"injectables/UserService.html":{}}}],["useremail",{"_index":2382,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["userid",{"_index":1060,"title":{},"body":{"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/InnerChannelComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/UserService.html":{}}}],["userid1",{"_index":3151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid2",{"_index":3152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid2].sort().join('_",{"_index":3153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userisactive",{"_index":1177,"title":{},"body":{"components/DirectMessagesComponent.html":{}}}],["usermap",{"_index":759,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["username",{"_index":2383,"title":{},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["userref",{"_index":2750,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":100,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["users.push",{"_index":2777,"title":{},"body":{"injectables/UserService.html":{}}}],["users.push(doc.data",{"_index":2778,"title":{},"body":{"injectables/UserService.html":{}}}],["userscollection",{"_index":1160,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"components/PasswortResetComponent.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":46,"title":{"injectables/UserService.html":{}},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/AuthActionComponent.html":{},"injectables/ChannelMembershipService.html":{},"injectables/ChannelQueriesService.html":{},"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userstatus",{"_index":1216,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["uses",{"_index":1828,"title":{},"body":{"components/NewPasswortComponent.html":{},"index.html":{}}}],["usevalue",{"_index":3132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":1955,"title":{},"body":{"components/PasswortResetComponent.html":{},"index.html":{}}}],["utility",{"_index":1807,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["utils",{"_index":827,"title":{},"body":{"classes/BaseChatComponent.html":{}}}],["valid",{"_index":653,"title":{},"body":{"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["validate",{"_index":1958,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["validates",{"_index":1826,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["validatethreadchannel",{"_index":1634,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["validatethreadchannel(data",{"_index":1654,"title":{},"body":{"injectables/MessageCrudService.html":{}}}],["validating",{"_index":1989,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["validationerrors",{"_index":1959,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["validator",{"_index":2889,"title":{},"body":{"dependencies.html":{}}}],["validators",{"_index":1848,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["validators.minlength(6",{"_index":1853,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["validators.required",{"_index":1852,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["value",{"_index":297,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/UserService.html":{},"components/VerifyEmailComponent.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":954,"title":{},"body":{"components/ChannelDialogComponent.html":{}}}],["var",{"_index":490,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["variable",{"_index":2820,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["variables",{"_index":2392,"title":{"miscellaneous/variables.html":{}},"body":{"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"miscellaneous/variables.html":{}}}],["verantwortliche",{"_index":2171,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verantwortlicher",{"_index":2178,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verantwortung",{"_index":2165,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeiten",{"_index":2166,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeitet",{"_index":2096,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeiteten",{"_index":2196,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeitung",{"_index":2107,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeitungsverfahren",{"_index":2279,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verbreitung",{"_index":2132,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verbunden",{"_index":2254,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verfahren",{"_index":2112,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verification",{"_index":620,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["verified",{"_index":2836,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verifies",{"_index":652,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["verifiziere",{"_index":689,"title":{},"body":{"components/AuthActionComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["verifizierung",{"_index":2839,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verifizierungsprozess",{"_index":2840,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verify",{"_index":552,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["verifyemail",{"_index":673,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["verifyemailcomponent",{"_index":551,"title":{"components/VerifyEmailComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["verifying",{"_index":2832,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verifypasswordresetcode",{"_index":662,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["verifypasswordresetcode(this.auth",{"_index":677,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["verifysigninlink",{"_index":2798,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verifysigninlink(firebaseauth",{"_index":2816,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["verknüpfung",{"_index":2136,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vernichtung",{"_index":2139,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verordnung",{"_index":2100,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verpflichtet",{"_index":2236,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verpflichtung",{"_index":2246,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["version",{"_index":2953,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versto",{"_index":2228,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["versuche",{"_index":2041,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["vertragsabwicklung",{"_index":2306,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vertreten",{"_index":1379,"title":{},"body":{"components/ImprintComponent.html":{}}}],["vervollständigung",{"_index":2202,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verwendung",{"_index":2129,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["veränderung",{"_index":2126,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vgl",{"_index":2199,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["via",{"_index":900,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{},"index.html":{}}}],["viele",{"_index":2037,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["viewchild",{"_index":1462,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["viewchild(entwicklerteamcomponent",{"_index":1460,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["visibility",{"_index":97,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/InnerChannelComponent.html":{}}}],["visible",{"_index":1467,"title":{},"body":{"components/InnerChannelComponent.html":{}}}],["visual",{"_index":2988,"title":{},"body":{"index.html":{}}}],["void",{"_index":106,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"injectables/AppStateService.html":{},"components/AuthActionComponent.html":{},"classes/BaseChatComponent.html":{},"interfaces/BroadcastContext.html":{},"components/ChannelDialogComponent.html":{},"injectables/ChannelMembershipService.html":{},"components/DirectMessagesComponent.html":{},"interfaces/EmojiContext.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/MemberSectionDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"interfaces/MyState.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"classes/PrivateMessagesBase.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"injectables/ReplyCountService.html":{},"components/SelectedMembersDialogComponent.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{},"injectables/ThreadService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["von",{"_index":2078,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vorgang",{"_index":2114,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vorgangsreihe",{"_index":2117,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["want",{"_index":3082,"title":{},"body":{"index.html":{}}}],["warten",{"_index":694,"title":{},"body":{"components/AuthActionComponent.html":{}}}],["we're",{"_index":1562,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["wei",{"_index":2309,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["weight",{"_index":380,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["weitere",{"_index":2197,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["welcome",{"_index":555,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{},"index.html":{}}}],["welcomescreencomponent",{"_index":554,"title":{"components/WelcomeScreenComponent.html":{}},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AppComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/InnerChannelComponent.html":{},"components/IntroComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{},"components/WelcomeScreenComponent.html":{}}}],["werden",{"_index":2077,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["where('channelid",{"_index":1129,"title":{},"body":{"injectables/ChannelMsgService.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["where('conversationid",{"_index":1728,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["where('email",{"_index":2006,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["where('name",{"_index":1161,"title":{},"body":{"injectables/ChannelQueriesService.html":{},"injectables/UserService.html":{}}}],["where('parentid",{"_index":1721,"title":{},"body":{"injectables/MessageQueriesService.html":{}}}],["where('threadchannelid",{"_index":1663,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["where('threadid",{"_index":1729,"title":{},"body":{"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["where('type",{"_index":1680,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{},"injectables/ThreadService.html":{}}}],["where(field",{"_index":2503,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["where(filter",{"_index":2526,"title":{},"body":{"injectables/ReplyCountService.html":{}}}],["where(filterfield",{"_index":1681,"title":{},"body":{"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["whether",{"_index":930,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["white",{"_index":409,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/MemberListDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["widerspruch",{"_index":2260,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["width",{"_index":355,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/AuthActionComponent.html":{},"components/ChannelDialogComponent.html":{},"components/DirectMessagesComponent.html":{},"components/HeaderComponent.html":{},"components/InnerChannelComponent.html":{},"components/MemberListDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/SelectedMembersDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["wie",{"_index":142,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/PrivacyComponent.html":{}}}],["wiederum",{"_index":2163,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["willkommen",{"_index":2853,"title":{},"body":{"components/WelcomeScreenComponent.html":{}}}],["window.innerwidth",{"_index":1998,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["window.location.href",{"_index":2830,"title":{},"body":{"components/VerifyEmailComponent.html":{}}}],["wir",{"_index":2051,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{}}}],["within",{"_index":1000,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/VerifyEmailComponent.html":{},"index.html":{}}}],["without",{"_index":226,"title":{},"body":{"interfaces/AddMembersDialogData.html":{},"components/AddMembersDialogMobileComponent.html":{},"interfaces/AddMembersMobileData.html":{},"components/ChannelDialogComponent.html":{},"components/MemberSectionDialogComponent.html":{},"components/ProfilDialogComponent.html":{},"interfaces/ProfileData.html":{},"components/SelectedMembersDialogComponent.html":{}}}],["worden",{"_index":2240,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["work",{"_index":1242,"title":{},"body":{"components/DirectMessagesComponent.html":{},"components/InnerChannelComponent.html":{}}}],["wrapper",{"_index":991,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{}}}],["write",{"_index":2921,"title":{},"body":{"index.html":{}}}],["wurde",{"_index":1868,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["x",{"_index":811,"title":{},"body":{"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"interfaces/MyState.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["x.emoji",{"_index":1780,"title":{},"body":{"interfaces/MyState.html":{}}}],["x.id",{"_index":1751,"title":{},"body":{"interfaces/MyState.html":{}}}],["y",{"_index":466,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"classes/BaseChatComponent.html":{},"components/ChannelDialogComponent.html":{},"components/MemberListDialogComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["yarn",{"_index":2962,"title":{},"body":{"index.html":{}}}],["yes",{"_index":269,"title":{},"body":{"components/AddMembersDialogMobileComponent.html":{},"components/MemberListDialogComponent.html":{},"injectables/MessageCrudService.html":{},"injectables/MessageQueriesService.html":{}}}],["yesterday",{"_index":2544,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["yesterday.setdate(yesterday.getdate",{"_index":2545,"title":{},"body":{"classes/SearchFieldBase.html":{}}}],["yesterdaydate",{"_index":760,"title":{},"body":{"classes/BaseChatComponent.html":{},"classes/PrivateMessagesBase.html":{},"classes/SearchFieldBase.html":{},"classes/ThreadChannelBase.html":{},"classes/ThreadMessagesBase.html":{}}}],["z",{"_index":980,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{},"components/ProfilDialogComponent.html":{},"components/VerifyEmailComponent.html":{}}}],["z0",{"_index":1984,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["z]{2",{"_index":1987,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["za",{"_index":1983,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["zeit",{"_index":2040,"title":{},"body":{"components/PasswortResetComponent.html":{}}}],["ziel",{"_index":1580,"title":{},"body":{"components/MemberListDialogComponent.html":{},"interfaces/MemberListDialogData.html":{}}}],["ziffer",{"_index":2099,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zone.js",{"_index":2891,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":2036,"title":{},"body":{"components/PasswortResetComponent.html":{},"components/PrivacyComponent.html":{}}}],["zudem",{"_index":2155,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zum",{"_index":983,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PrivacyComponent.html":{}}}],["zumeist",{"_index":2074,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zur",{"_index":973,"title":{},"body":{"components/ChannelDialogComponent.html":{},"components/PrivacyComponent.html":{}}}],["zurückgesetzt",{"_index":1869,"title":{},"body":{"components/NewPasswortComponent.html":{}}}],["zurücksetzen",{"_index":1889,"title":{},"body":{"components/NewPasswortComponent.html":{},"components/PasswortResetComponent.html":{}}}],["zusammenhang",{"_index":2118,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zweck",{"_index":2144,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zwecke",{"_index":2084,"title":{},"body":{"components/PrivacyComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AddMembersDialogData.html":{"url":"interfaces/AddMembersDialogData.html","title":"interface - AddMembersDialogData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddMembersDialogData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-members-dialog/add-members-dialog.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Data interface if used in a Material Dialog context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            channelName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            filteredMembers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            members\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        channelName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filteredMembers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filteredMembers:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        members\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        members:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nimport { UserService } from '../user.service';\nimport { ChannelService } from '../channel.service';\nimport { SelectedMembersDialogComponent } from '../selected-members-dialog/selected-members-dialog.component';\nimport { MessageService } from '../message.service';\n\n/**\n * Data interface if used in a Material Dialog context.\n */\nexport interface AddMembersDialogData {\n  channelId?: string;\n  channelName?: string;\n  members?: any[];\n  filteredMembers?: any[];\n}\n\n/**\n * A dialog/overlay for adding new members to a channel.\n * Supports Material Dialog, BottomSheet, or cdkOverlay usage.\n */\n@Component({\n  selector: 'app-add-members-dialog',\n  standalone: true,\n  imports: [CommonModule, FormsModule, OverlayModule],\n  templateUrl: './add-members-dialog.component.html',\n  styleUrls: ['./add-members-dialog.component.scss']\n})\nexport class AddMembersDialogComponent implements OnInit {\n\n  /** cdkOverlay input: the channel ID. */\n  @Input() channelId!: string;\n  /** cdkOverlay input: the channel name. */\n  @Input() channelName = '';\n  /** cdkOverlay input: existing channel members. */\n  @Input() members: any[] = [];\n\n  /** Emitted when closing in cdkOverlay mode. */\n  @Output() close = new EventEmitter();\n  /** Emitted if new members were added in cdkOverlay mode. */\n  @Output() membersAdded = new EventEmitter();\n\n  /** Internal search input. */\n  specificMemberName = '';\n  /** Filtered user list while typing. */\n  filteredMembers: any[] = [];\n  /** New members selected for adding. */\n  selectedMembers: any[] = [];\n  /** Controls dropdown visibility. */\n  isMembersListVisible = false;\n  /** All users loaded from the service. */\n  allUsers: any[] = [];\n\n  private unsubscribeAllUsers?: () => void;\n\n  /**\n   * Constructor for multi-context usage (Dialog, BottomSheet, cdkOverlay).\n   */\n  constructor(\n    private userService: UserService,\n    private channelService: ChannelService,\n    private dialog: MatDialog,\n    private messageService: MessageService,\n    @Optional() public dialogRef?: MatDialogRef,\n    @Optional() public bottomSheetRef?: MatBottomSheetRef,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data?: AddMembersDialogData\n  ) {}\n\n  /**\n   * Merges passed-in data and loads users if no filter is provided.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      if (this.data.channelId) this.channelId = this.data.channelId;\n      if (this.data.channelName) this.channelName = this.data.channelName;\n      if (this.data.members) this.members = [...this.data.members];\n      if (this.data.filteredMembers) {\n        this.filteredMembers = [...this.data.filteredMembers];\n      } else {\n        this.filteredMembers = [];\n      }\n    }\n    if (this.filteredMembers.length === 0) this.loadAllUsers();\n\n    this.unsubscribeAllUsers = this.messageService.onAllUsersChanged(\n      (freshUsers) => {\n        // 'freshUsers' enthält jetzt ALLE User.\n        // => Setze in 'this.allUsers' ab und filtere wie bisher:\n        this.allUsers = freshUsers;\n        this.excludeExistingAndSelected();\n        if (!this.data?.filteredMembers || this.filteredMembers.length === 0) {\n          this.filteredMembers = this.allUsers.filter((u) =>\n            !this.members.some((ex) => ex.uid === u.uid)\n          );\n        }\n      }\n    );\n  }\n\n  /**\n   * Loads all users, excluding those already in the channel or selected.\n   */\n  loadAllUsers(): void {\n    this.userService.getAllUsers()\n      .then(users => {\n        this.allUsers = users;\n        this.excludeExistingAndSelected();\n        if (!this.data?.filteredMembers || this.filteredMembers.length === 0) {\n          this.filteredMembers = this.allUsers.filter(u =>\n            !this.members.some(ex => ex.uid === u.uid)\n          );\n        }\n      })\n      .catch(() => {});\n  }\n\n  /**\n   * Excludes users already in 'members' or 'selectedMembers'.\n   */\n  excludeExistingAndSelected(): void {\n    this.filteredMembers = this.allUsers.filter(m =>\n      !this.members.some(ex => ex.name === m.name) &&\n      !this.selectedMembers.some(sel => sel.name === m.name)\n    );\n  }\n\n  /**\n   * Shows the dropdown list, filtering out existing or selected.\n   */\n  showAllMembers(): void {\n    this.isMembersListVisible = true;\n    this.excludeExistingAndSelected();\n  }\n\n  /**\n   * Hides the list shortly after focus is lost.\n   */\n  hideMembersList(): void {\n    setTimeout(() => {\n      this.isMembersListVisible = false;\n    }, 200);\n  }\n\n  /**\n   * Filters members by search input, excluding existing or selected.\n   */\n  onSearchMembers(): void {\n    const term = this.specificMemberName.toLowerCase();\n    this.filteredMembers = this.allUsers.filter(m =>\n      m.name.toLowerCase().includes(term) &&\n      !this.members.some(ex => ex.name === m.name) &&\n      !this.selectedMembers.some(se => se.name === m.name)\n    );\n  }\n\n  /**\n   * Adds a new member to 'selectedMembers' if not already present.\n   */\n  selectMember(member: any): void {\n    if (!this.selectedMembers.some(m => m.name === member.name)) {\n      this.selectedMembers.push(member);\n    }\n    this.specificMemberName = '';\n    this.isMembersListVisible = false;\n    this.excludeExistingAndSelected();\n  }\n\n  /**\n   * Removes a single member from 'selectedMembers'.\n   */\n  removeMember(member: any): void {\n    this.selectedMembers = this.selectedMembers.filter(m => m !== member);\n    this.excludeExistingAndSelected();\n  }\n\n  /**\n   * Saves newly selected members to Firestore or closes if none are selected.\n   */\n  onCreate(): void {\n    const unique = this.selectedMembers.filter(\n      sel => !this.members.some(m => m.name === sel.name)\n    );\n    if (unique.length > 0) {\n      const updated = [...this.members, ...unique];\n      this.channelService.setMembers(this.channelId, updated)\n        .then(() => this.handleMembersSaved(updated))\n        .catch(() => {});\n    } else {\n      this.closeDialogOrSheet();\n    }\n  }\n\n  /**\n   * Opens a nested dialog to manage the full list of selected members.\n   */\n  openMembersDialog(): void {\n    const ref = this.dialog.open(SelectedMembersDialogComponent, {\n      data: { members: this.selectedMembers }\n    });\n    ref.afterClosed().subscribe(result => {\n      if (result) this.selectedMembers = result;\n    });\n  }\n\n  /**\n   * Cancels the action without saving.\n   */\n  onCancel(): void {\n    if (this.dialogRef) this.dialogRef.close();\n    else this.close.emit();\n  }\n\n  /** Handles successful saving of members. */\n  private handleMembersSaved(updated: any[]): void {\n    if (this.dialogRef) {\n      this.dialogRef.close(updated);\n    } else if (this.bottomSheetRef) {\n      this.bottomSheetRef.dismiss(updated);\n    } else {\n      this.membersAdded.emit(updated);\n      this.close.emit();\n    }\n  }\n\n  /** Closes the dialog or sheet if no new members. */\n  private closeDialogOrSheet(): void {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n    } else if (this.bottomSheetRef) {\n      this.bottomSheetRef.dismiss();\n    } else {\n      this.close.emit();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeAllUsers) {\n      this.unsubscribeAllUsers();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddMembersDialogMobileComponent.html":{"url":"components/AddMembersDialogMobileComponent.html","title":"component - AddMembersDialogMobileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddMembersDialogMobileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts\n\n\n\n    \n        Description\n    \n    \n        A bottom sheet dialog for adding members in a mobile-friendly layout.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-members-dialog-mobile\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                            OverlayModule\n                \n            \n\n            \n                styleUrls\n                ./add-members-dialog-mobile.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./add-members-dialog-mobile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allUsers\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                bottomSheetRef\n                            \n                            \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                data\n                            \n                            \n                                filteredMembers\n                            \n                            \n                                isMembersListVisible\n                            \n                            \n                                members\n                            \n                            \n                                selectedMembers\n                            \n                            \n                                specificMemberName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hideMembersList\n                            \n                            \n                                loadAllUsers\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onCancel\n                            \n                            \n                                onCreate\n                            \n                            \n                                onSearchMembers\n                            \n                            \n                                removeMember\n                            \n                            \n                                selectMember\n                            \n                            \n                                showAllMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, channelService: ChannelService, dialog: MatDialog, bottomSheetRef?: MatBottomSheetRef, data?: AddMembersMobileData)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:45\n                            \n                        \n\n                \n                    \n                            Constructor for the bottom sheet usage, optionally receiving data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bottomSheetRef\n                                                  \n                                                        \n                                                                        MatBottomSheetRef\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        AddMembersMobileData\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hideMembersList\n                        \n                    \n                \n            \n            \n                \nhideMembersList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Hides the members list with a brief delay to allow UI interactions.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadAllUsers\n                        \n                    \n                \n            \n            \n                \nloadAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Loads all users, excluding those already in 'members' if needed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:61\n                        \n                    \n\n\n            \n                \n                        Reads optional input data and loads all users if no filtered list was provided.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Cancels the dialog without adding members.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCreate\n                        \n                    \n                \n            \n            \n                \nonCreate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Merges new members into the channel, saves, then closes the bottom sheet.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSearchMembers\n                        \n                    \n                \n            \n            \n                \nonSearchMembers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Filters the user list by the current search term, excluding existing or selected members.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMember\n                        \n                    \n                \n            \n            \n                \nremoveMember(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:136\n                        \n                    \n\n\n            \n                \n                        Removes a previously selected member.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectMember\n                        \n                    \n                \n            \n            \n                \nselectMember(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Selects a member, removing them from 'filteredMembers' and resetting input state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAllMembers\n                        \n                    \n                \n            \n            \n                \nshowAllMembers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Shows the members list overlay, excluding those already in 'members' or 'selectedMembers'.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:43\n                        \n                    \n\n            \n                \n                    A local copy of all known users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        bottomSheetRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatBottomSheetRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:32\n                        \n                    \n\n            \n                \n                    The channel ID required to update members.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AddMembersMobileData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()@Inject(MAT_BOTTOM_SHEET_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:36\n                        \n                    \n\n            \n                \n                    An optional pre-filtered set of members.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMembersListVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:45\n                        \n                    \n\n            \n                \n                    Controls the visibility of the members list overlay.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:34\n                        \n                    \n\n            \n                \n                    The existing members of the channel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:41\n                        \n                    \n\n            \n                \n                    Newly selected members for adding.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        specificMemberName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts:39\n                        \n                    \n\n            \n                \n                    User's search input.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { UserService } from '../user.service';\nimport { ChannelService } from '../channel.service';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\n\n/**\n * Optional data interface if used with MatBottomSheet.\n */\nexport interface AddMembersMobileData {\n  channelId: string;\n  members: any[];\n  filteredMembers: any[];\n}\n\n/**\n * A bottom sheet dialog for adding members in a mobile-friendly layout.\n */\n@Component({\n  selector: 'app-add-members-dialog-mobile',\n  standalone: true,\n  imports: [CommonModule, FormsModule, OverlayModule],\n  templateUrl: './add-members-dialog-mobile.component.html',\n  styleUrls: ['./add-members-dialog-mobile.component.scss']\n})\nexport class AddMembersDialogMobileComponent implements OnInit {\n\n  /** The channel ID required to update members. */\n  channelId = '';\n  /** The existing members of the channel. */\n  members: any[] = [];\n  /** An optional pre-filtered set of members. */\n  filteredMembers: any[] = [];\n\n  /** User's search input. */\n  specificMemberName = '';\n  /** Newly selected members for adding. */\n  selectedMembers: any[] = [];\n  /** A local copy of all known users. */\n  allUsers: any[] = [];\n  /** Controls the visibility of the members list overlay. */\n  isMembersListVisible = false;\n\n  /**\n   * Constructor for the bottom sheet usage, optionally receiving data.\n   */\n  constructor(\n    private userService: UserService,\n    private channelService: ChannelService,\n    private dialog: MatDialog,\n    @Optional() public bottomSheetRef?: MatBottomSheetRef,\n    @Optional() @Inject(MAT_BOTTOM_SHEET_DATA) public data?: AddMembersMobileData\n  ) {}\n\n  /**\n   * Reads optional input data and loads all users if no filtered list was provided.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      this.channelId = this.data.channelId;\n      this.members = [...(this.data.members || [])];\n      this.filteredMembers = [...(this.data.filteredMembers || [])];\n    }\n    if (this.filteredMembers.length === 0) {\n      this.loadAllUsers();\n    }\n  }\n\n  /**\n   * Loads all users, excluding those already in 'members' if needed.\n   */\n  loadAllUsers(): void {\n    this.userService.getAllUsers()\n      .then(users => {\n        this.allUsers = users;\n        if (this.filteredMembers.length === 0) {\n          this.filteredMembers = this.allUsers.filter(\n            u => !this.members.some(m => m.uid === u.uid)\n          );\n        }\n      })\n      .catch(() => {});\n  }\n\n  /**\n   * Filters the user list by the current search term, excluding existing or selected members.\n   */\n  onSearchMembers(): void {\n    const term = this.specificMemberName.toLowerCase();\n    this.filteredMembers = this.allUsers.filter(u =>\n      u.name.toLowerCase().includes(term) &&\n      !this.members.some(m => m.uid === u.uid) &&\n      !this.selectedMembers.some(sel => sel.uid === u.uid)\n    );\n  }\n\n  /**\n   * Shows the members list overlay, excluding those already in 'members' or 'selectedMembers'.\n   */\n  showAllMembers(): void {\n    this.isMembersListVisible = true;\n    if (!this.allUsers || this.allUsers.length === 0) return;\n    this.filteredMembers = this.allUsers.filter(u =>\n      !this.members.some(m => m.uid === u.uid) &&\n      !this.selectedMembers.some(s => s.uid === u.uid)\n    );\n  }\n\n  /**\n   * Hides the members list with a brief delay to allow UI interactions.\n   */\n  hideMembersList(): void {\n    setTimeout(() => {\n      this.isMembersListVisible = false;\n    }, 200);\n  }\n\n  /**\n   * Selects a member, removing them from 'filteredMembers' and resetting input state.\n   */\n  selectMember(user: any): void {\n    if (!this.selectedMembers.some(m => m.uid === user.uid)) {\n      this.selectedMembers.push(user);\n    }\n    this.specificMemberName = '';\n    this.isMembersListVisible = false;\n    this.filteredMembers = this.filteredMembers.filter(u => u.uid !== user.uid);\n  }\n\n  /**\n   * Removes a previously selected member.\n   */\n  removeMember(user: any): void {\n    this.selectedMembers = this.selectedMembers.filter(m => m.uid !== user.uid);\n  }\n\n  /**\n   * Merges new members into the channel, saves, then closes the bottom sheet.\n   */\n  onCreate(): void {\n    const unique = this.selectedMembers.filter(\n      sel => !this.members.some(m => m.uid === sel.uid)\n    );\n    if (unique.length  {\n        this.bottomSheetRef?.dismiss(updated);\n      })\n      .catch(() => {});\n  }\n\n  /**\n   * Cancels the dialog without adding members.\n   */\n  onCancel(): void {\n    this.bottomSheetRef?.dismiss();\n  }\n}\n\n    \n\n    \n        \n  \n  \n    Leute hinzufügen\n    \n  \n\n  \n    \n      \n        \n\n         0 && isMembersListVisible\n          \"\n          [cdkConnectedOverlayHasBackdrop]=\"false\"\n          [cdkConnectedOverlayPositions]=\"[\n            {\n              originX: 'start',\n              originY: 'bottom',\n              overlayX: 'start',\n              overlayY: 'top'\n            }\n          ]\"\n        >\n          \n             0 && isMembersListVisible\">\n              \n                \n                  \n                  \n                  \n                \n                {{ user.name }}\n              \n            \n          \n        \n\n         0\" class=\"selected-member\">\n          \n          {{ selectedMembers[0].name }}\n\n          \n            ×\n          \n\n           1\" class=\"more-members\">\n            +{{ selectedMembers.length - 1 }}\n          \n        \n      \n    \n  \n\n  \n    \n      Hinzufügen\n    \n  \n\n\n    \n\n    \n                \n                    ./add-members-dialog-mobile.component.scss\n                \n                @import \"./../../styles.scss\";\n\n::ng-deep .mat-bottom-sheet-container {\n  min-width: 100vw !important;\n}\n\n.close-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  h1 {\n    margin-right: 20px;\n    font-size: 24px;\n    font-weight: 700;\n    flex-grow: 1;\n    margin: 0;\n  }\n\n  img {\n    cursor: pointer;\n    transition: filter 0.3s ease, background-color 0.3s ease;\n    border-radius: 50%;\n    margin-left: auto;\n\n    &:hover {\n      background-color: $lightblue;\n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n.container {\n  padding: 40px;\n  border-radius: 30px 0px 30px 30px;\n  border: 1px 0px 0px 0px;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n}\n\n.primary-button {\n  background: $button-blue;\n  border: none;\n  border-radius: 100px;\n  color: white;\n  font-size: 18px;\n  font-weight: 700;\n  padding: 12px 25px;\n  width: 147px;\n  height: 49px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background: #5b5ffc;\n  }\n\n  &:disabled {\n    background-color: gray;\n    cursor: not-allowed;\n  }\n}\n\n::ng-deep .mat-mdc-dialog-container {\n  border-radius: 30px 0px 30px 30px !important;\n  width: unset;\n}\n\n::ng-deep .mdc-dialog__surface {\n  border-radius: 30px 0px 30px 30px !important;\n  overflow: hidden;\n}\n\n.input-button-box {\n  gap: 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.member-selection {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.specific-members {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  position: relative;\n\n  input[type=\"text\"] {\n    width: 100%;\n    height: 60px;\n    border: 1px solid #ccc;\n    border-radius: 30px;\n    padding-left: 20px;\n    padding-right: 20px;\n    box-sizing: border-box;\n    transition: border-color 0.3s ease;\n\n    &:hover {\n      border-color: #686868;\n    }\n\n    &:focus {\n      outline: none;\n      border-color: $button-blue;\n    }\n\n    &:not(:focus) {\n      &:has(+ input:focus) {\n        border-color: blue;\n      }\n    }\n  }\n}\n\n.selected-member {\n  display: flex;\n  align-items: center;\n  background-color: $lightblue;\n  padding: 5px 10px;\n  border-radius: 20px;\n  position: absolute;\n  gap: 15px;\n  left: 20px;\n  cursor: pointer;\n\n  .avatar {\n    width: 25px;\n    height: 25px;\n    border-radius: 50%;\n  }\n\n  .remove-btn {\n    background-color: transparent;\n    border: none;\n    color: gray;\n    cursor: pointer;\n    font-size: 20px;\n    margin-left: 5px;\n\n    &:hover {\n      color: $hoverColor;\n      scale: 1.1;\n    }\n  }\n}\n\n.overlay-box {\n  width: 180px;\n  border: 1px solid #ccc;\n  border-radius: 0px 30px 30px 30px;\n  background: white;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n  padding: 10px;\n  margin-top: -30px;\n\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    max-height: 200px;\n    overflow-y: auto;\n  }\n\n  ul li {\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    cursor: pointer;\n\n    &:hover {\n      background-color: $lightblue;\n    }\n\n    .avatar-container {\n      position: relative;\n\n      .avatar {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n      }\n\n      .status-icon {\n        position: absolute;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        border: 2px solid white;\n        bottom: 0;\n        right: 0;\n      }\n    }\n\n    span {\n      font-size: 16px;\n      font-weight: 400;\n    }\n  }\n}\n\n.handle-bar {\n  width: 63px;\n  height: 6px;\n  background: #d9d9d9;\n  border-radius: 3px;\n  margin: 0 auto 10px auto;\n}\n\n.button-box{\n  display: flex;\n  justify-content: flex-end;\n}\n\n@media (min-width: 1278px) {\n  .container {\n    display: none;\n  }\n}\n\n@media (max-width: 1278px) {\n  .container {\n    padding: 30px 16px;\n    gap: 20px;\n  }\n\n  .primary-button:disabled {\n    margin-top: 20px;\n  }\n}\n\n@media (max-width: 768px) {\n  .member-selection {\n    width: 100%;\n  }\n\n  .container {\n    padding: 30px 16px;\n  }\n}\n\n@media (max-width: 390px) {\n  .close-dialog h1 {\n    font-size: 18px;\n  }\n\n  .close-dialog img {\n    width: 30px;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Leute hinzufügen                                   0 && isMembersListVisible          \"          [cdkConnectedOverlayHasBackdrop]=\"false\"          [cdkConnectedOverlayPositions]=\"[            {              originX: \\'start\\',              originY: \\'bottom\\',              overlayX: \\'start\\',              overlayY: \\'top\\'            }          ]\"        >                       0 && isMembersListVisible\">                                                                                                                    {{ user.name }}                                                     0\" class=\"selected-member\">                    {{ selectedMembers[0].name }}                      ×                     1\" class=\"more-members\">            +{{ selectedMembers.length - 1 }}                                          Hinzufügen      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddMembersDialogMobileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AddMembersMobileData.html":{"url":"interfaces/AddMembersMobileData.html","title":"interface - AddMembersMobileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddMembersMobileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-members-dialog-mobile/add-members-dialog-mobile.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Optional data interface if used with MatBottomSheet.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channelId\n                                        \n                                \n                                \n                                        \n                                            filteredMembers\n                                        \n                                \n                                \n                                        \n                                            members\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filteredMembers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filteredMembers:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        members\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        members:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { UserService } from '../user.service';\nimport { ChannelService } from '../channel.service';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\n\n/**\n * Optional data interface if used with MatBottomSheet.\n */\nexport interface AddMembersMobileData {\n  channelId: string;\n  members: any[];\n  filteredMembers: any[];\n}\n\n/**\n * A bottom sheet dialog for adding members in a mobile-friendly layout.\n */\n@Component({\n  selector: 'app-add-members-dialog-mobile',\n  standalone: true,\n  imports: [CommonModule, FormsModule, OverlayModule],\n  templateUrl: './add-members-dialog-mobile.component.html',\n  styleUrls: ['./add-members-dialog-mobile.component.scss']\n})\nexport class AddMembersDialogMobileComponent implements OnInit {\n\n  /** The channel ID required to update members. */\n  channelId = '';\n  /** The existing members of the channel. */\n  members: any[] = [];\n  /** An optional pre-filtered set of members. */\n  filteredMembers: any[] = [];\n\n  /** User's search input. */\n  specificMemberName = '';\n  /** Newly selected members for adding. */\n  selectedMembers: any[] = [];\n  /** A local copy of all known users. */\n  allUsers: any[] = [];\n  /** Controls the visibility of the members list overlay. */\n  isMembersListVisible = false;\n\n  /**\n   * Constructor for the bottom sheet usage, optionally receiving data.\n   */\n  constructor(\n    private userService: UserService,\n    private channelService: ChannelService,\n    private dialog: MatDialog,\n    @Optional() public bottomSheetRef?: MatBottomSheetRef,\n    @Optional() @Inject(MAT_BOTTOM_SHEET_DATA) public data?: AddMembersMobileData\n  ) {}\n\n  /**\n   * Reads optional input data and loads all users if no filtered list was provided.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      this.channelId = this.data.channelId;\n      this.members = [...(this.data.members || [])];\n      this.filteredMembers = [...(this.data.filteredMembers || [])];\n    }\n    if (this.filteredMembers.length === 0) {\n      this.loadAllUsers();\n    }\n  }\n\n  /**\n   * Loads all users, excluding those already in 'members' if needed.\n   */\n  loadAllUsers(): void {\n    this.userService.getAllUsers()\n      .then(users => {\n        this.allUsers = users;\n        if (this.filteredMembers.length === 0) {\n          this.filteredMembers = this.allUsers.filter(\n            u => !this.members.some(m => m.uid === u.uid)\n          );\n        }\n      })\n      .catch(() => {});\n  }\n\n  /**\n   * Filters the user list by the current search term, excluding existing or selected members.\n   */\n  onSearchMembers(): void {\n    const term = this.specificMemberName.toLowerCase();\n    this.filteredMembers = this.allUsers.filter(u =>\n      u.name.toLowerCase().includes(term) &&\n      !this.members.some(m => m.uid === u.uid) &&\n      !this.selectedMembers.some(sel => sel.uid === u.uid)\n    );\n  }\n\n  /**\n   * Shows the members list overlay, excluding those already in 'members' or 'selectedMembers'.\n   */\n  showAllMembers(): void {\n    this.isMembersListVisible = true;\n    if (!this.allUsers || this.allUsers.length === 0) return;\n    this.filteredMembers = this.allUsers.filter(u =>\n      !this.members.some(m => m.uid === u.uid) &&\n      !this.selectedMembers.some(s => s.uid === u.uid)\n    );\n  }\n\n  /**\n   * Hides the members list with a brief delay to allow UI interactions.\n   */\n  hideMembersList(): void {\n    setTimeout(() => {\n      this.isMembersListVisible = false;\n    }, 200);\n  }\n\n  /**\n   * Selects a member, removing them from 'filteredMembers' and resetting input state.\n   */\n  selectMember(user: any): void {\n    if (!this.selectedMembers.some(m => m.uid === user.uid)) {\n      this.selectedMembers.push(user);\n    }\n    this.specificMemberName = '';\n    this.isMembersListVisible = false;\n    this.filteredMembers = this.filteredMembers.filter(u => u.uid !== user.uid);\n  }\n\n  /**\n   * Removes a previously selected member.\n   */\n  removeMember(user: any): void {\n    this.selectedMembers = this.selectedMembers.filter(m => m.uid !== user.uid);\n  }\n\n  /**\n   * Merges new members into the channel, saves, then closes the bottom sheet.\n   */\n  onCreate(): void {\n    const unique = this.selectedMembers.filter(\n      sel => !this.members.some(m => m.uid === sel.uid)\n    );\n    if (unique.length  {\n        this.bottomSheetRef?.dismiss(updated);\n      })\n      .catch(() => {});\n  }\n\n  /**\n   * Cancels the dialog without adding members.\n   */\n  onCancel(): void {\n    this.bottomSheetRef?.dismiss();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            CommonModule\n                            FormsModule\n                \n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firestore\n                            \n                            \n                                items$\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:35\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DABubble'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { IntroComponent } from './intro/intro.component';\nimport { LoginComponent } from './login/login.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HeaderComponent } from './header/header.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { PrivacyComponent } from './privacy/privacy.component';\nimport { ImprintComponent } from './imprint/imprint.component';\nimport { AvatarComponent } from './avatar/avatar.component';\nimport { ChatComponent } from './chat/chat.component';\nimport { RouterLink } from '@angular/router';\nimport { Firestore, collection, collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { PasswortResetComponent } from './passwort-reset/passwort-reset.component';\nimport { NewPasswortComponent } from './new-passwort/new-passwort.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    CommonModule,\n    FormsModule,\n   \n  ],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'DABubble';\n  items$: Observable;\n  firestore: Firestore = inject(Firestore);\n\n  constructor() {\n    const aCollection = collection(this.firestore, 'items');\n    this.items$ = collectionData(aCollection);\n  }\n}\n\n    \n\n    \n        \n\n\n\n\n  \n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppStateService.html":{"url":"injectables/AppStateService.html","title":"injectable - AppStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app-state.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                showWelcomeContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getShowWelcomeContainer\n                            \n                            \n                                setShowWelcomeContainer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getShowWelcomeContainer\n                        \n                    \n                \n            \n            \n                \ngetShowWelcomeContainer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app-state.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowWelcomeContainer\n                        \n                    \n                \n            \n            \n                \nsetShowWelcomeContainer(show: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app-state.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                show\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showWelcomeContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app-state.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppStateService {\n  private showWelcomeContainer: boolean = true;  \n\n  getShowWelcomeContainer(): boolean {\n    return this.showWelcomeContainer;\n  }\n\n  setShowWelcomeContainer(show: boolean): void {\n    this.showWelcomeContainer = show;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AuthActionComponent.html":{"url":"components/AuthActionComponent.html","title":"component - AuthActionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AuthActionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth-action/auth-action.component.ts\n\n\n\n    \n        Description\n    \n    \n        Handles Firebase authentication actions such as password reset and email verification.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-auth-action\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                                HeaderComponent\n                                FooterComponent\n                \n            \n\n            \n                styleUrls\n                ./auth-action.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./auth-action.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loading\n                            \n                            \n                                mode\n                            \n                            \n                                oobCode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleEmailVerification\n                            \n                            \n                                    Async\n                                handlePasswordReset\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, auth: Auth, router: Router, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth-action/auth-action.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFor reading query parameters like mode and oobCode.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Firebase Auth instance.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFor navigation to routes after actions are handled.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nCustom service for updating user info in Firestore.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleEmailVerification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEmailVerification(oobCode: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth-action/auth-action.component.ts:72\n                        \n                    \n\n\n            \n                \n                        Applies the code to verify user email, updates new email if needed, then navigates away.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oobCode\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handlePasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePasswordReset(oobCode: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth-action/auth-action.component.ts:61\n                        \n                    \n\n\n            \n                \n                        Verifies the password reset code, then navigates to 'new-passwort' if valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oobCode\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/auth-action/auth-action.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Reads 'mode' and 'oobCode' from query params and calls the appropriate handler.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/auth-action/auth-action.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/auth-action/auth-action.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oobCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/auth-action/auth-action.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  Auth,\n  updateEmail,\n  verifyPasswordResetCode,\n  applyActionCode\n} from '@angular/fire/auth';\nimport { UserService } from '../user.service';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HeaderComponent } from '../header/header.component';\nimport { FooterComponent } from '../footer/footer.component';\n\n/**\n * Handles Firebase authentication actions such as password reset and email verification.\n */\n@Component({\n  selector: 'app-auth-action',\n  standalone: true,\n  imports: [CommonModule, FormsModule, HeaderComponent, FooterComponent],\n  templateUrl: './auth-action.component.html',\n  styleUrls: ['./auth-action.component.scss']\n})\nexport class AuthActionComponent implements OnInit {\n  mode: string | null = null;\n  oobCode: string | null = null;\n  loading = true;\n\n  /**\n   * @param route - For reading query parameters like mode and oobCode.\n   * @param auth - The Firebase Auth instance.\n   * @param router - For navigation to routes after actions are handled.\n   * @param userService - Custom service for updating user info in Firestore.\n   */\n  constructor(\n    private route: ActivatedRoute,\n    private auth: Auth,\n    private router: Router,\n    private userService: UserService\n  ) {}\n\n  /**\n   * Reads 'mode' and 'oobCode' from query params and calls the appropriate handler.\n   */\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      this.mode = params['mode'];\n      this.oobCode = params['oobCode'];\n      if (this.mode === 'resetPassword') {\n        this.handlePasswordReset(this.oobCode);\n      } else if (this.mode === 'verifyEmail') {\n        this.handleEmailVerification(this.oobCode);\n      }\n    });\n  }\n\n  /**\n   * Verifies the password reset code, then navigates to 'new-passwort' if valid.\n   */\n  async handlePasswordReset(oobCode: string | null): Promise {\n    if (!oobCode) return;\n    try {\n      await verifyPasswordResetCode(this.auth, oobCode);\n      this.router.navigate(['/new-passwort'], { queryParams: { oobCode } });\n    } catch {}\n  }\n\n  /**\n   * Applies the code to verify user email, updates new email if needed, then navigates away.\n   */\n  async handleEmailVerification(oobCode: string | null): Promise {\n    if (!oobCode) return;\n    try {\n      await applyActionCode(this.auth, oobCode);\n      const newEmail = localStorage.getItem('newEmail');\n      const user = this.auth.currentUser;\n      if (user && newEmail) {\n        await updateEmail(user, newEmail);\n        await this.userService.updateEmailInFirestore(user.uid, newEmail);\n        localStorage.removeItem('newEmail');\n      }\n      this.loading = false;\n      this.router.navigate(['/avatar']);\n    } catch {}\n  }\n}\n    \n\n    \n        \n\n  Verifiziere deine E-Mail... Bitte warten.\n\n\n\n    \n\n    \n                \n                    ./auth-action.component.scss\n                \n                \n@import \"./../../styles.scss\";\n\n.container {\n  @include dFlex(center, center, null);\n  width: 100%;\n  background-color: $lightblue;\n  padding: 160px 0;\n  flex-direction: column;\n  min-height: 100vh;\n\n  p {\n    font-size: 50px;\n    color: $hoverColor;\n    font-weight: 700;\n  }\n}\n\n@media (max-width: 920px) {\n  .container {\n    padding: 10rem 2rem;\n    box-sizing: border-box;\n\n    p {\n      font-size: 30px;\n    }\n  }\n}\n\n@media (max-width: 780px) {\n  .container {\n    padding: 10rem 2rem;\n    box-sizing: border-box;\n\n    p {\n      font-size: 20px;\n    }\n  }\n}\n\n@media (max-width: 520px) {\n  .container {\n    padding: 10rem 2rem;\n    box-sizing: border-box;\n\n    p {\n      font-size: 18px;\n    }\n  }\n}\n\n@media (max-width: 390px) {\n  .container {\n    padding: 10rem 2rem;\n    box-sizing: border-box;\n\n    p {\n      font-size: 14px;\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Verifiziere deine E-Mail... Bitte warten.'\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AuthActionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseChatComponent.html":{"url":"classes/BaseChatComponent.html","title":"class - BaseChatComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseChatComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/entwicklerteam/base-chat.component.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                allChannels\n                            \n                            \n                                    Public\n                                allUsers\n                            \n                            \n                                    Public\n                                channels\n                            \n                            \n                                    Public\n                                convertFirestoreTimestampToDate\n                            \n                            \n                                    Public\n                                currentDate\n                            \n                            \n                                    Public\n                                currentDateString\n                            \n                            \n                                    Public\n                                currentMessageId\n                            \n                            \n                                    Public\n                                currentUser\n                            \n                            \n                                    Public\n                                cycleStep\n                            \n                            \n                                    Public\n                                dateObj\n                            \n                            \n                                    Public\n                                dropdownState\n                            \n                            \n                                    Public\n                                formattedDate\n                            \n                            \n                                    Public\n                                formattedTime\n                            \n                            \n                                    Public\n                                getFormattedDate\n                            \n                            \n                                    Public\n                                getFormattedThreadLastResponseTime\n                            \n                            \n                                    Public\n                                getFormattedTime\n                            \n                            \n                                    Protected\n                                hasInitialScrollDone\n                            \n                            \n                                    Public\n                                imageUrl\n                            \n                            \n                                    Public\n                                isAddMembersOverlayOpen\n                            \n                            \n                                    Public\n                                isDesktop\n                            \n                            \n                                    Public\n                                isEmojiPickerVisible\n                            \n                            \n                                    Public\n                                isImageModalOpen\n                            \n                            \n                                    Public\n                                isOverlayOpen\n                            \n                            \n                                    Public\n                                isTextareaExpanded\n                            \n                            \n                                    Public\n                                largeImageUrl\n                            \n                            \n                                    Public\n                                lastOpenedChar\n                            \n                            \n                                    Public\n                                lastUsedEmojisReceived\n                            \n                            \n                                    Public\n                                lastUsedEmojisSent\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                messages\n                            \n                            \n                                    Public\n                                newMessage\n                            \n                            \n                                    Public\n                                privateMessage\n                            \n                            \n                                    Public\n                                replyCountsUnsubscribe\n                            \n                            \n                                    Public\n                                selectedMember\n                            \n                            \n                                    Public\n                                showEditOptions\n                            \n                            \n                                    Public\n                                showLargeImage\n                            \n                            \n                                    Public\n                                showWelcomeContainer\n                            \n                            \n                                    Public\n                                threadTime\n                            \n                            \n                                    Public\n                                tooltipEmoji\n                            \n                            \n                                    Public\n                                tooltipPosition\n                            \n                            \n                                    Public\n                                tooltipSenderName\n                            \n                            \n                                    Public\n                                tooltipVisible\n                            \n                            \n                                    Public\n                                unsubscribeChannels\n                            \n                            \n                                    Public\n                                unsubscribeFromThreadDetails\n                            \n                            \n                                    Public\n                                unsubscribeFromThreadMessages\n                            \n                            \n                                    Public\n                                unsubscribeLiveReplyCounts\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeSubCollection\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeTopLevel\n                            \n                            \n                                    Public\n                                unsubscribeUsers\n                            \n                            \n                                    Public\n                                userMap\n                            \n                            \n                                    Public\n                                yesterDayDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        convertFirestoreTimestampToDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : convertFirestoreTimestampToDate\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : formatDate(new Date(), 'dd.MM.yyyy', 'en')\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentDateString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : new Date().toISOString()\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cycleStep\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dateObj\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dropdownState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"hidden\" | \"user\" | \"channel\"\n\n                    \n                \n                \n                    \n                        Default value : 'hidden'\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formattedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formattedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFormattedDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getFormattedDate\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFormattedThreadLastResponseTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getFormattedThreadLastResponseTime\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFormattedTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getFormattedTime\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasInitialScrollDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | ArrayBuffer | null | undefined\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAddMembersOverlayOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmojiPickerVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isImageModalOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOverlayOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTextareaExpanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        largeImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastOpenedChar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastUsedEmojisReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastUsedEmojisSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        newMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        privateMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        replyCountsUnsubscribe\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedMember\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showEditOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showLargeImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showWelcomeContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        threadTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tooltipEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tooltipPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tooltipSenderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tooltipVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromThreadDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromThreadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeLiveReplyCounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeSubCollection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeTopLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        yesterDayDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : getYesterdayDate()\n                    \n                \n                    \n                        \n                                Defined in src/app/entwicklerteam/base-chat.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { formatDate } from '@angular/common';\nimport { getYesterdayDate } from './date-utils';\nimport { getFormattedDate, getFormattedTime, convertFirestoreTimestampToDate, getFormattedThreadLastResponseTime } from './date-format-utils';\nimport { MessageContent } from '../message.models';\n\nexport class BaseChatComponent {\n  public isDesktop: boolean = false;\n  public message: string = '';\n  public isEmojiPickerVisible: boolean = false;\n  public imageUrl: string | ArrayBuffer | null | undefined = null;\n  public isTextareaExpanded: boolean = false;\n  public yesterDayDate: Date = getYesterdayDate();\n  public isImageModalOpen: boolean = false;\n  public dropdownState: 'hidden' | 'user' | 'channel' = 'hidden';\n  public cycleStep: number = 1;\n  public lastOpenedChar: string = '';\n  public showEditOptions: boolean = false;\n  public newMessage: string = '';\n  public privateMessage: string = '';\n  public showWelcomeContainer: boolean = false;\n  public tooltipVisible: boolean = false;\n  public tooltipPosition: { x: number, y: number } = { x: 0, y: 0 };\n  public tooltipEmoji: string = '';\n  public tooltipSenderName: string = '';\n  public showLargeImage: boolean = false;\n  public largeImageUrl: string | null = null;\n  public isOverlayOpen: boolean = false;\n  public isAddMembersOverlayOpen: boolean = false;\n  public  lastUsedEmojisSent: string[] = [];\n  public lastUsedEmojisReceived: string[] = [];\n  public  currentMessageId: string | null = null;\n  public selectedMember: any = null;\n\n\n  public allChannels: any[] = [];\n  public channels: { id: string; name: string; members: any[]; description?: string; createdBy?: string }[] = [];\n  public messages: Array = [];\n  public members: any[] = [];\n  public allUsers: any[] = [];\n  public userMap: { [uid: string]: { name: string; avatarUrl: string } | undefined } = {};\n\n\n  public currentUser: any;\n  public currentDate: string = formatDate(new Date(), 'dd.MM.yyyy', 'en');\n  public currentDateString: string = new Date().toISOString();\n  public formattedDate: string = '';\n  public formattedTime: string = '';\n  public dateObj: Date | null = null;\n  public threadTime: string = '';\n\n  \n  public getFormattedDate = getFormattedDate;\n  public getFormattedTime = getFormattedTime;\n  public convertFirestoreTimestampToDate = convertFirestoreTimestampToDate;\n  public getFormattedThreadLastResponseTime = getFormattedThreadLastResponseTime;\n\n \n  public unsubscribeFromThreadMessages: (() => void) | null = null;\n  public unsubscribeLiveReplyCounts: (() => void) | null = null;\n  public unsubscribeFromThreadDetails: (() => void) | null = null;\n  public replyCountsUnsubscribe: (() => void) | null = null;\n  public unsubscribeChannels: (() => void) | null = null;\n  public unsubscribeUsers: (() => void) | null = null;\n  public unsubscribeTopLevel?: Subscription;\n  public unsubscribeSubCollection?: Subscription;\n  protected hasInitialScrollDone: boolean = false; \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BroadcastContext.html":{"url":"interfaces/BroadcastContext.html","title":"interface - BroadcastContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BroadcastContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/search-field/search-field.messaging.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentUser\n                                        \n                                \n                                \n                                        \n                                            imageUrl\n                                        \n                                \n                                \n                                        \n                                            isEmojiPickerVisible\n                                        \n                                \n                                \n                                        \n                                            messageService\n                                        \n                                \n                                \n                                        \n                                            messageToAll\n                                        \n                                \n                                \n                                        \n                                            resetTextareaHeightFn\n                                        \n                                \n                                \n                                        \n                                            scrollToBottomFn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imageUrl:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isEmojiPickerVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmojiPickerVisible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messageService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messageService:         MessageService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MessageService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messageToAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messageToAll:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetTextareaHeightFn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resetTextareaHeightFn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollToBottomFn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollToBottomFn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { formatDate } from '@angular/common';\nimport { MessageService } from '../message.service';\n\nexport interface BroadcastContext {\n  currentUser: any;\n  messageToAll: string;\n  imageUrl: string | null;\n  isEmojiPickerVisible: boolean;\n  resetTextareaHeightFn: (textArea: HTMLTextAreaElement) => void;\n  scrollToBottomFn: () => void;\n  messageService: MessageService;\n}\n\nexport async function sendMessageToAllCompletely(\n  context: BroadcastContext,\n  textArea: HTMLTextAreaElement,\n  selectedRecipients: any[],\n  shouldCancelBroadcastFn: () => boolean\n): Promise {\n  if (shouldCancelBroadcastFn()) return;\n\n  const channels = selectedRecipients.filter((r) => r.type === 'channel');\n  const users = selectedRecipients.filter((r) => r.type === 'user');\n\n  await sendToAllUsers(context, users);\n\n  if (channels.length) {\n    for (const ch of channels) {\n      await sendChannelMessageToSingleChannel(context, ch);\n    }\n  }\n\n  finishBroadcast(context, textArea);\n  clearBroadcastInput(context, textArea);\n}\n\nexport async function sendChannelMessageToSingleChannel(\n  context: BroadcastContext,\n  ch: any\n): Promise {\n  const text = context.messageToAll.trim();\n  const image = typeof context.imageUrl === 'string' ? context.imageUrl : '';\n  const channelMsg = {\n    channelId: ch.id,\n    senderId: context.currentUser.id,\n    senderName: context.currentUser.name || 'Unbekannt',\n    date: formatDate(new Date(), 'dd.MM.yyyy', 'en'),\n    time: new Date().toLocaleTimeString(),\n    timestamp: new Date(),\n    content: {\n      text,\n      image,\n      emojis: [],\n    },\n    messageFormat: 'text',\n  };\n  await context.messageService.sendChannelMessage(channelMsg);\n}\n\nexport async function sendToAllUsers(\n  context: BroadcastContext,\n  users: any[]\n): Promise {\n  for (const u of users) {\n    await sendToSingleRecipient(context, u);\n  }\n}\n\nexport async function sendToSingleRecipient(\n  context: BroadcastContext,\n  recipient: any\n): Promise {\n  if (recipient.type === 'user') {\n    const convId = context.messageService.generateConversationId(\n      context.currentUser.id,\n      recipient.id\n    );\n    const msgData = createBroadcastMessageData(context, convId, recipient.id);\n    await context.messageService.sendMessage(msgData);\n  }\n}\n\nexport function createBroadcastMessageData(\n  context: BroadcastContext,\n  conversationId: string,\n  recipientId: string\n) {\n  return {\n    type: 'private' as const,\n    conversationId,\n    content: {\n      text: context.messageToAll.trim(),\n      image: typeof context.imageUrl === 'string' ? context.imageUrl : '',\n      emojis: [],\n    },\n    date: formatDate(new Date(), 'dd.MM.yyyy', 'en'),\n    timestamp: new Date(),\n    time: new Date().toLocaleTimeString(),\n    senderId: context.currentUser.id,\n    senderName: context.currentUser.name || 'Unbekannt',\n    senderAvatar: context.currentUser.avatarUrl || '',\n    recipientId,\n  };\n}\n\nexport function finishBroadcast(\n  context: BroadcastContext,\n  textArea: HTMLTextAreaElement\n): void {\n  context.messageToAll = '';\n  context.imageUrl = null;\n  if (textArea) context.resetTextareaHeightFn(textArea);\n  context.isEmojiPickerVisible = false;\n  context.scrollToBottomFn();\n}\n\nexport function clearBroadcastInput(\n  context: BroadcastContext,\n  textArea: HTMLTextAreaElement\n): void {\n  context.messageToAll = '';\n  context.imageUrl = null;\n  if (textArea) context.resetTextareaHeightFn(textArea);\n  context.isEmojiPickerVisible = false;\n  context.scrollToBottomFn();\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChannelDialogComponent.html":{"url":"components/ChannelDialogComponent.html","title":"component - ChannelDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChannelDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/channel-dialog/channel-dialog.component.ts\n\n\n\n    \n        Description\n    \n    \n        Dialog component for creating a new channel. Users can specify a channel\nname and optionally a description. If valid, the channel is added via\nChannelService, and members can be chosen from another dialog.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-channel-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatFormFieldModule\n                            MatInputModule\n                            MatButtonModule\n                            FormsModule\n                            MatDialogModule\n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./channel-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./channel-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelName\n                            \n                            \n                                channelNameExists\n                            \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                description\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                isChannelNameValid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onChannelNameChange\n                            \n                            \n                                onCreate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any, dialog: MatDialog, channelService: ChannelService)\n                    \n                \n                        \n                            \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to this dialog instance\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Data passed in from the caller\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Angular Material dialog service\n\n                                                        \n                                                \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for channel operations\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-dialog/channel-dialog.component.ts:133\n                        \n                    \n\n\n            \n                \n                        Closes the current dialog without creating/updating a channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-dialog/channel-dialog.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that runs after component initialization.\nNo additional logic here.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChannelNameChange\n                        \n                    \n                \n            \n            \n                \nonChannelNameChange(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-dialog/channel-dialog.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Checks whether the new channel name has >=3 trimmed characters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user's input for channel name\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCreate\n                        \n                    \n                \n            \n            \n                \nonCreate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-dialog/channel-dialog.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Creates a new channel if valid and not already taken.\nOpens a member-selection dialog (MembersDialogComponent) if\nthe name is valid and unique, then adds the channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:56\n                        \n                    \n\n            \n                \n                    The new channel's name input by the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:61\n                        \n                    \n\n            \n                \n                    Indicates whether a channel with the same name already exists.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:81\n                        \n                    \n\n            \n                \n                    Data passed in from the caller\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:71\n                        \n                    \n\n            \n                \n                    Optional description for the new channel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:80\n                        \n                    \n\n            \n                \n                    Reference to this dialog instance\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isChannelNameValid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/channel-dialog/channel-dialog.component.ts:66\n                        \n                    \n\n            \n                \n                    True if the channel name is considered valid (>=3 chars).\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  Component,\n  OnInit,\n  Inject\n} from '@angular/core';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n  MatDialog\n} from '@angular/material/dialog';\nimport {\n  MatFormFieldModule\n} from '@angular/material/form-field';\nimport {\n  MatInputModule\n} from '@angular/material/input';\nimport {\n  MatButtonModule\n} from '@angular/material/button';\nimport {\n  FormsModule\n} from '@angular/forms';\nimport {\n  MatDialogModule\n} from '@angular/material/dialog';\nimport {\n  CommonModule\n} from '@angular/common';\n\nimport { MembersDialogComponent } from '../members-dialog/members-dialog.component';\nimport { ChannelService } from '../channel.service';\n\n/**\n * Dialog component for creating a new channel. Users can specify a channel\n * name and optionally a description. If valid, the channel is added via\n * ChannelService, and members can be chosen from another dialog.\n */\n@Component({\n  selector: 'app-channel-dialog',\n  templateUrl: './channel-dialog.component.html',\n  styleUrls: ['./channel-dialog.component.scss'],\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    FormsModule,\n    MatDialogModule,\n    CommonModule\n  ]\n})\nexport class ChannelDialogComponent implements OnInit {\n  /**\n   * The new channel's name input by the user.\n   */\n  channelName = '';\n\n  /**\n   * Indicates whether a channel with the same name already exists.\n   */\n  channelNameExists = false;\n\n  /**\n   * True if the channel name is considered valid (>=3 chars).\n   */\n  isChannelNameValid = false;\n\n  /**\n   * Optional description for the new channel.\n   */\n  description = '';\n\n  /**\n   * @param dialogRef Reference to this dialog instance\n   * @param data      Data passed in from the caller\n   * @param dialog    The Angular Material dialog service\n   * @param channelService Service for channel operations\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dialog: MatDialog,\n    private channelService: ChannelService\n  ) {}\n\n  /**\n   * Lifecycle hook that runs after component initialization.\n   * No additional logic here.\n   */\n  ngOnInit(): void {}\n\n  /**\n   * Checks whether the new channel name has >=3 trimmed characters.\n   * @param value The user's input for channel name\n   */\n  onChannelNameChange(value: string): void {\n    this.isChannelNameValid = value.trim().length >= 3;\n  }\n\n  /**\n   * Creates a new channel if valid and not already taken.\n   * Opens a member-selection dialog (MembersDialogComponent) if\n   * the name is valid and unique, then adds the channel.\n   */\n  onCreate(): void {\n    if (!this.isChannelNameValid) return;\n    const allChannels = this.channelService.getChannels();\n    const nameExists = allChannels.some(\n      c => c.name.toLowerCase() === this.channelName.toLowerCase()\n    );\n    if (nameExists) {\n      this.channelNameExists = true;\n      return;\n    }\n    this.channelNameExists = false;\n    const membersDialog = this.dialog.open(MembersDialogComponent, {\n      data: { channelName: this.channelName }\n    });\n    membersDialog.afterClosed().subscribe(result => {\n      if (!result?.selectedMembers) return;\n      this.channelService.addChannel({\n        name: this.channelName,\n        members: result.selectedMembers,\n        description: this.description\n      });\n    });\n    this.dialogRef.close();\n  }\n\n  /**\n   * Closes the current dialog without creating/updating a channel.\n   */\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n}\n\n\n\n\n\n    \n\n    \n        \n  \n    Channel erstellen\n    \n  \n  \n    \n      Channels dienen deinem Team zur Kommunikation. Am besten sollten sie\n      themenbezogen sein, z. B. #marketing zum Beispiel.\n    \n\n    Channel-Name\n    \n      \n      \n    \n    \n      Channel-Name existiert bereits\n    \n\n    \n      Beschreibung\n      (optional)\n    \n    \n      \n    \n  \n\n  \n    \n      Erstellen\n    \n  \n\n\n    \n\n    \n                \n                    ./channel-dialog.component.scss\n                \n                @import \"./../../styles.scss\";\n\nmat-form-field {\n  width: 100%;\n}\n\nmat-dialog-content {\n  padding-bottom: 20px;\n}\n\nmat-dialog-actions {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.mat-mdc-form-field-input-control.mdc-text-field__input,\n.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control {\n  font-size: 18px;\n  font-weight: 400;\n}\n\nlabel {\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n}\n\n.optional {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 5px;\n}\n\n.close-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  h1 {\n    margin-right: 20px;\n    font-size: 24px;\n    font-weight: 700;\n  }\n\n  img {\n    cursor: pointer;\n    transition: filter 0.3s ease, background-color 0.3s ease;\n    border-radius: 50%;\n\n    &:hover {\n      background-color: $lightblue;\n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n.custom-input {\n  position: relative;\n  border-radius: 40px;\n  padding-top: 25px;\n\n  .input-icon {\n    position: absolute;\n    left: 40px;\n    top: 65%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    transition: filter 0.3s ease;\n  }\n\n  input {\n    background: $lightblue;\n    border-radius: 100px;\n    color: black;\n    font-size: 18px;\n    font-weight: 400;\n    height: 60px;\n    width: 100%;\n    border: 1px solid transparent;\n    cursor: pointer;\n    box-sizing: border-box;\n    max-width: 792px;\n    padding: 1.125rem 2rem 1.125rem 5.375rem;\n\n    &:hover {\n      border-color: #686868;\n      transition: border-color 0.3s;\n    }\n\n    &:focus,\n    &:focus-within {\n      outline: none;\n      border-color: $button-blue;\n    }\n  }\n}\n\n.error-message {\n  min-height: 24px;\n  margin-top: 5px;\n  p {\n    margin: 0;\n    padding-left: 20px;\n    color: red;\n  }\n}\n\n.description-input {\n  textarea {\n    background: $lightblue;\n    border-radius: 100px;\n    color: black;\n    font-size: 18px;\n    font-weight: 700;\n    height: 65px;\n    width: 100%;\n    border: 1px solid transparent;\n    cursor: pointer;\n    box-sizing: border-box;\n    max-width: 792px;\n    resize: none;\n    overflow-x: hidden;\n    overflow-y: auto;\n    padding: 10px 20px;\n    padding-top: 1.2rem;\n    font-family: \"Nunito\", sans-serif;\n\n    &::placeholder {\n      font-family: \"Nunito\", \"Noto Color Emoji\", \"Segoe UI Emoji\", sans-serif;\n      font-size: 18px;\n      font-weight: 400;\n    }\n\n    &:hover {\n      border-color: #686868;\n      transition: border-color 0.3s;\n    }\n\n    &:focus,\n    &:focus-within {\n      outline: none;\n      border-color: $button-blue;\n    }\n\n    &:not(:focus) {\n      &:has(+ input:focus) {\n        border-color: blue;\n      }\n    }\n  }\n}\n\n.container {\n  max-width: 792px;\n  padding: 40px;\n  border-radius: 40px 0px 0px 0px;\n}\n\n.primary-button {\n  background: $button-blue;\n  border: none;\n  border-radius: 100px;\n  color: white;\n  font-size: 18px;\n  font-weight: 700;\n  padding: 12px 25px;\n  width: 125px;\n  height: 49px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background: #5b5ffc;\n  }\n\n  &:disabled {\n    background-color: #686868;\n    cursor: not-allowed;\n  }\n}\n\n.mat-mdc-dialog-actions {\n  padding: 20px 0;\n  justify-content: flex-end;\n}\n\n::ng-deep .mat-mdc-dialog-container {\n  border-radius: 30px !important;\n}\n\n::ng-deep .mdc-dialog__surface {\n  border-radius: 30px !important;\n  overflow: hidden;\n}\n\n::ng-deep.mat-mdc-dialog-content .mdc-dialog__content {\n  padding: 0;\n}\n\n::ng-deep.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content {\n  padding: 0;\n}\n\n::ng-deep.mat-mdc-dialog-title,\n.mdc-dialog__title,\n.mat-mdc-dialog-container .mat-mdc-dialog-content,\n.mdc-dialog .mdc-dialog__content {\n  padding: 0;\n  margin: 0;\n}\n\n::ng-deep.mat-mdc-dialog-title,\n.mdc-dialog__title {\n  margin: 0 0 20px !important ;\n}\n\n.mdc-dialog__content > :first-child {\n  font-size: 18px;\n  color: black;\n}\n\n@media (max-width: 868px) {\n  .container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    border-radius: 0;\n    max-width: 100%;\n    padding: 20px;\n    overflow-y: auto;\n    box-sizing: border-box;\n    background-color: white;\n  }\n\n  .mdc-dialog__content > :first-child {\n    font-size: 17px;\n  }\n\n  .custom-input .input-icon {\n    left: 10px;\n  }\n\n  .custom-input input {\n    padding: 1.125rem 2.3rem;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Channel erstellen                  Channels dienen deinem Team zur Kommunikation. Am besten sollten sie      themenbezogen sein, z. B. #marketing zum Beispiel.        Channel-Name                              Channel-Name existiert bereits              Beschreibung      (optional)                                Erstellen      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChannelDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChannelEmojiService.html":{"url":"injectables/ChannelEmojiService.html","title":"injectable - ChannelEmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChannelEmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/channel-emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastUsedEmojis\n                            \n                            \n                                    Async\n                                saveLastUsedEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/channel-emoji.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLastUsedEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastUsedEmojis(channelId: string, type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-emoji.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveLastUsedEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveLastUsedEmojis(channelId: string, lastUsedEmojis: string[], type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-emoji.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lastUsedEmojis\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Firestore, doc, getDoc, updateDoc } from '@angular/fire/firestore';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelEmojiService {\n  constructor(private firestore: Firestore) {}\n\n  async saveLastUsedEmojis(\n    channelId: string,\n    lastUsedEmojis: string[],\n    type: 'sent' | 'received'\n  ): Promise {\n    if (!channelId) return;\n\n    const channelDocRef = doc(this.firestore, 'channels', channelId);\n    try {\n      if (type === 'sent') {\n        await updateDoc(channelDocRef, { lastUsedEmojisSent: lastUsedEmojis });\n      } else {\n        await updateDoc(channelDocRef, {\n          lastUsedEmojisReceived: lastUsedEmojis,\n        });\n      }\n    } catch (error) {}\n  }\n\n  async getLastUsedEmojis(\n    channelId: string,\n    type: 'sent' | 'received'\n  ): Promise {\n    if (!channelId) return;\n\n    const channelDocRef = doc(this.firestore, 'channels', channelId);\n    const channelDoc = await getDoc(channelDocRef);\n\n    if (channelDoc.exists()) {\n      const data = channelDoc.data();\n      return type === 'sent'\n        ? data['lastUsedEmojisSent'] || []\n        : data['lastUsedEmojisReceived'] || [];\n    } else {\n      return [];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChannelMembershipService.html":{"url":"injectables/ChannelMembershipService.html","title":"injectable - ChannelMembershipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChannelMembershipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/channel-membership.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ensureCreatorInChannel\n                            \n                            \n                                    Private\n                                filterOutLeavingUser\n                            \n                            \n                                    Private\n                                    Async\n                                handleChannelLeaving\n                            \n                            \n                                    Async\n                                leaveChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/channel-membership.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureCreatorInChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureCreatorInChannel(channel: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-membership.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterOutLeavingUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterOutLeavingUser(channelData: any, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-membership.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleChannelLeaving\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleChannelLeaving(channelData: any, channelDocRef: any, channelId: string, userId: string, removeChannelLocally: (channelId: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-membership.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelDocRef\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                removeChannelLocally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveChannel(channelId: string, userId: string, removeChannelLocally: (channelId: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-membership.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                removeChannelLocally\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  doc,\n  getDoc,\n  updateDoc,\n  deleteDoc,\n} from '@angular/fire/firestore';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelMembershipService {\n  constructor(private firestore: Firestore, private userService: UserService) {}\n\n  async ensureCreatorInChannel(channel: {\n    name: string;\n    members: any[];\n    description?: string;\n    createdBy?: string;\n  }): Promise {\n    const currentUid = this.userService.getCurrentUserId();\n    if (!currentUid) return;\n\n    const alreadyHasCreator = channel.members.some((m) => m.uid === currentUid);\n    if (!alreadyHasCreator) {\n      const userData = await this.userService.getUserById(currentUid);\n      channel.members.push({ uid: currentUid, ...userData });\n    }\n  }\n\n  async leaveChannel(\n    channelId: string,\n    userId: string,\n    removeChannelLocally: (channelId: string) => void\n  ): Promise {\n    try {\n      const channelDocRef = doc(this.firestore, 'channels', channelId);\n      const docSnap = await getDoc(channelDocRef);\n      if (!docSnap.exists()) return;\n\n      await this.handleChannelLeaving(\n        docSnap.data(),\n        channelDocRef,\n        channelId,\n        userId,\n        removeChannelLocally\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async handleChannelLeaving(\n    channelData: any,\n    channelDocRef: any,\n    channelId: string,\n    userId: string,\n    removeChannelLocally: (channelId: string) => void\n  ): Promise {\n    const { updatedMembers, updatedMembersUid } = this.filterOutLeavingUser(\n      channelData,\n      userId\n    );\n\n    if (updatedMembers.length > 0) {\n      await updateDoc(channelDocRef, {\n        members: updatedMembers,\n        membersUid: updatedMembersUid,\n      });\n    } else {\n      await deleteDoc(channelDocRef);\n    }\n\n    removeChannelLocally(channelId);\n  }\n\n  private filterOutLeavingUser(\n    channelData: any,\n    userId: string\n  ): { updatedMembers: any[]; updatedMembersUid: string[] } {\n    const members = channelData['members'] || [];\n    const membersUid = channelData['membersUid'] || [];\n\n    const updatedMembers = members.filter(\n      (member: any) => member.uid !== userId\n    );\n    const updatedMembersUid = membersUid.filter(\n      (uid: string) => uid !== userId\n    );\n\n    return { updatedMembers, updatedMembersUid };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChannelMessageData.html":{"url":"interfaces/ChannelMessageData.html","title":"interface - ChannelMessageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChannelMessageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message.models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            messageFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            senderAvatar\n                                        \n                                \n                                \n                                        \n                                            senderId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            senderName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            time\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messageFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messageFormat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderAvatar\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderAvatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Message {\n  id?: string;\n  content: MessageContent;\n  timestamp: any;\n  senderId: string;\n  time: string;\n  date?: string | { seconds: number; nanoseconds: number };\n  recipientId?: string;\n  channelId?: string;\n  conversationId?: string;\n  formattedDate?: string;\n  replyCount?: number;\n  lastResponseTime?: any;\n  channelName?: string;\n  threadChannelId?: string;\n  parentId?: string;\n  isHighlighted?: boolean;\n  isEditing?: boolean;\n  isEmojiPickerVisible?: boolean;\n  showAllEmojisList?: boolean;\n  expanded?: boolean;\n  type?: string;\n  threadId?: string;\n  lastReplyTime?: any;\n  recipientName?: string;\n  showDateSeparator?: boolean; \n  edited?: boolean;\n}\nexport interface MessageContent {\n  text?: string;\n  image?: string | ArrayBuffer | null;\n  emojis?: Array;\n  edited?: boolean;\n}\n\nexport interface FirestoreMessageData {\n  content?: {\n    emojis?: Array;\n  };\n}\nexport interface ChannelMessageData {\n  channelId?: string;\n  date?: string;\n  time?: string;\n  timestamp?: any;\n  senderId: string;\n  senderName?: string;\n  senderAvatar?: string ;\n  content: {\n    text: string;\n    image?: string;\n    emojis?: any[];\n  };\n  messageFormat: string; \n}\n\n\n\nexport type ReplyCountsMap = Record;\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChannelMsgService.html":{"url":"injectables/ChannelMsgService.html","title":"injectable - ChannelMsgService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChannelMsgService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/channel-msg.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getChannelMessagesLive\n                            \n                            \n                                    Public\n                                    Async\n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/channel-msg.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannelMessagesLive\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannelMessagesLive(channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-msg.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessage(channelId: string, messageId: string, updatedContent: literal type, markEdited: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-msg.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedContent\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                markEdited\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  doc,\n  updateDoc,\n  serverTimestamp,\n} from '@angular/fire/firestore';\nimport { query, where, orderBy, collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelMsgService {\n  constructor(private firestore: Firestore) {}\n\n  public getChannelMessagesLive(channelId: string): Observable {\n    const messagesRef = collection(this.firestore, 'messages');\n    const q = query(\n      messagesRef,\n      where('channelId', '==', channelId),\n      orderBy('timestamp', 'asc')\n    );\n    return collectionData(q, { idField: 'id' }) as Observable;\n  }\n\n  public async updateMessage(\n    channelId: string,\n    messageId: string,\n    updatedContent: { text?: string; image?: string | null; emojis?: any[] },\n    markEdited: boolean\n  ): Promise {\n    const messageDocRef = doc(this.firestore, 'messages', messageId);\n    const updateData: any = { content: updatedContent };\n\n    if (markEdited) {\n      updateData.edited = true;\n      updateData.editedAt = serverTimestamp();\n    }\n    await updateDoc(messageDocRef, updateData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChannelQueriesService.html":{"url":"injectables/ChannelQueriesService.html","title":"injectable - ChannelQueriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChannelQueriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/channel-queries.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildChannelsByNameQuery\n                            \n                            \n                                    Private\n                                    Async\n                                executeChannelsByNameQuery\n                            \n                            \n                                    Async\n                                getChannelsByName\n                            \n                            \n                                    Async\n                                getUsersByFirstLetter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/channel-queries.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildChannelsByNameQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildChannelsByNameQuery(channelName: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-queries.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        executeChannelsByNameQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeChannelsByNameQuery(q: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-queries.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                q\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getChannelsByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannelsByName(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-queries.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersByFirstLetter\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersByFirstLetter(firstLetter: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/channel-queries.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                firstLetter\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  getDocs,\n  query,\n  where,\n} from '@angular/fire/firestore';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelQueriesService {\n  constructor(private firestore: Firestore, private userService: UserService) {}\n\n  async getChannelsByName(channelName: string): Promise {\n    const currentUserId = this.userService.getCurrentUserId();\n    if (!currentUserId) return [];\n\n    const qRef = this.buildChannelsByNameQuery(channelName, currentUserId);\n    return await this.executeChannelsByNameQuery(qRef);\n  }\n\n  async getUsersByFirstLetter(firstLetter: string): Promise {\n    const usersCollection = collection(this.firestore, 'users');\n    const qRef = query(\n      usersCollection,\n      where('name', '>=', firstLetter),\n      where('name', ' ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private buildChannelsByNameQuery(channelName: string, userId: string) {\n    const coll = collection(this.firestore, 'channels');\n    return query(\n      coll,\n      where('name', '>=', channelName),\n      where('name', ' {\n    try {\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map((docSnap: any) => ({\n        id: docSnap.id,\n        ...docSnap.data(),\n      }));\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DirectMessagesComponent.html":{"url":"components/DirectMessagesComponent.html","title":"component - DirectMessagesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DirectMessagesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/direct-messages/direct-messages.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-direct-messages\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./direct-messages.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./direct-messages.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUserStatus\n                            \n                            \n                                inactivityTimeout\n                            \n                            \n                                isChannelsVisible\n                            \n                            \n                                members\n                            \n                            \n                                userIsActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleUserActivity\n                            \n                            \n                                    Private\n                                listenForAuthChanges\n                            \n                            \n                                    Private\n                                loadMembers\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDirectMessage\n                            \n                            \n                                    Private\n                                resetInactivityTimer\n                            \n                            \n                                    Private\n                                    Async\n                                setUserAsInactive\n                            \n                            \n                                toggleChannels\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                memberSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown\n                            \n                            \n                                document:mousemove\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, messageService: MessageService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/direct-messages/direct-messages.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        memberSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/direct-messages/direct-messages.component.ts:22\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown\n                        \n                    \n                \n            \n            \n                \ndocument:keydown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        document:mousemove\n                        \n                    \n                \n            \n            \n                \ndocument:mousemove()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:72\n                        \n                    \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleUserActivity\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUserActivity()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:mousemove')@HostListener('document:keydown')\n                \n            \n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:72\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        listenForAuthChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    listenForAuthChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMembers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDirectMessage\n                        \n                    \n                \n            \n            \n                \nopenDirectMessage(member: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resetInactivityTimer\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetInactivityTimer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setUserAsInactive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUserAsInactive()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChannels\n                        \n                    \n                \n            \n            \n                \ntoggleChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/direct-messages/direct-messages.component.ts:114\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Abwesend'\n                    \n                \n                    \n                        \n                                Defined in src/app/direct-messages/direct-messages.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inactivityTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/direct-messages/direct-messages.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isChannelsVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/direct-messages/direct-messages.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/direct-messages/direct-messages.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userIsActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/direct-messages/direct-messages.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  Component,\n  OnInit,\n  HostListener,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { UserService } from '../user.service';\nimport { MessageService } from '../message.service';\nimport { getAuth, onAuthStateChanged } from '@angular/fire/auth';\n\n@Component({\n  selector: 'app-direct-messages',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './direct-messages.component.html',\n  styleUrls: ['./direct-messages.component.scss'],\n})\nexport class DirectMessagesComponent implements OnInit {\n  @Output() memberSelected = new EventEmitter();\n  members: any[] = [];\n  isChannelsVisible: boolean = false;\n\n  inactivityTimeout: any;\n  currentUserStatus: string = 'Abwesend';\n  userIsActive: boolean = true;\n\n  constructor(\n    private userService: UserService,\n    private messageService: MessageService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.loadMembers();\n\n    this.messageService.onAllUsersChanged((allUsers) => {\n      const auth = getAuth();\n      const currentUid = auth.currentUser?.uid;\n      this.members = allUsers\n        .filter((m) => m.id !== currentUid)\n        .map((m) => ({\n          ...m,\n          userStatus: m.isOnline ? 'Aktiv' : 'Abwesend',\n        }));\n    });\n\n    this.listenForAuthChanges();\n    this.resetInactivityTimer();\n  }\n\n  private loadMembers(): void {\n    this.userService\n      .getAllUsers()\n      .then((data) => {\n        const auth = getAuth();\n        const currentUid = auth.currentUser?.uid;\n        this.members = data\n          .filter((m) => m.id !== currentUid)\n          .map((m) => ({\n            ...m,\n            userStatus: m.isOnline ? 'Aktiv' : 'Abwesend',\n          }));\n      })\n      .catch(() => {});\n  }\n\n  @HostListener('document:mousemove')\n  @HostListener('document:keydown')\n  handleUserActivity(): void {\n    this.resetInactivityTimer();\n  }\n\n  private resetInactivityTimer(): void {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (currentUser && !this.userIsActive) {\n      this.userIsActive = true;\n      this.messageService.setUserOnlineStatus(currentUser.uid, true);\n    }\n    if (this.inactivityTimeout) clearTimeout(this.inactivityTimeout);\n\n    this.inactivityTimeout = setTimeout(() => {\n      this.setUserAsInactive();\n    }, 50000);\n  }\n\n  private async setUserAsInactive(): Promise {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (currentUser && this.userIsActive) {\n      this.userIsActive = false;\n      await this.messageService.setUserOnlineStatus(currentUser.uid, false);\n    }\n  }\n\n  private listenForAuthChanges(): void {\n    const auth = getAuth();\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.uid) {\n        await this.messageService.setUserOnlineStatus(user.uid, true);\n        this.resetInactivityTimer();\n      } else {\n        const current = auth.currentUser;\n        if (current) {\n          await this.messageService.setUserOnlineStatus(current.uid, false);\n        }\n      }\n    });\n  }\n\n  toggleChannels(): void {\n    this.isChannelsVisible = !this.isChannelsVisible;\n  }\n\n  openDirectMessage(member: any): void {\n    this.memberSelected.emit(member);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n\n      \n        \n\n        Direktnachrichten\n      \n    \n\n    \n      \n        \n          \n            \n\n            \n            \n          \n          {{ member.name }}\n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./direct-messages.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.selection {\n  display: flex;\n  flex-direction: column;\n\n  .channel-box {\n    display: flex;\n    flex-direction: column;\n    cursor: pointer;\n    gap: 25px;\n\n    .hover-container {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n\n      &:hover {\n        img {\n          filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n            saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n        }\n\n        h1 {\n          color: $hoverColor;\n        }\n      }\n\n      img {\n        width: 24px;\n        height: 24px;\n        object-fit: cover;\n        transition: filter 0.3s ease, transform 0.3s ease;\n      }\n\n      h1 {\n        font-size: 20px;\n        font-weight: 700;\n        transition: color 0.3s ease, transform 0.3s ease;\n      }\n    }\n\n    .work-box {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 10px;\n    }\n\n    .channel-left {\n      transition: transform 0.3s ease;\n\n      &.rotate-down {\n        transform: rotate(180deg);\n      }\n    }\n  }\n\n  .mitglieder {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    padding-left: 35px;\n    cursor: pointer;\n    border-radius: 50px;\n    transition: background-color 0.3s ease;\n    width: fit-content;\n    height: 58px;\n\n    .avatar-container {\n      position: relative;\n      display: inline-block;\n    }\n\n    .status-icon {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 16px;\n      height: 16px;\n      border-radius: 50%;\n      background-color: white;\n      border: 2px solid white;\n    }\n\n    img {\n      width: 50px;\n      height: 50px;\n      object-fit: cover;\n      border-radius: 50%;\n    }\n\n    h2 {\n      font-size: 18px;\n      font-weight: 400;\n      padding: 10px 15px;\n      transition: background-color 0.3s ease;\n      border-radius: 50px;\n      display: inline-block;   \n      width: 100%;\n      max-width: 150px;            \n      white-space: nowrap;    \n      overflow: hidden;        \n      text-overflow: ellipsis; \n    }\n    \n    &:hover {\n      background-color: $lightblue;\n      padding-right: 30px;\n      border-radius: 100px;\n    }\n  }\n}\n\n.mitglieder-box {\n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n}\n\n@media (max-width: 1278px) {\n  .selection .mitglieder {\n    .status-icon {\n      width: 14px;\n      height: 14px;\n    }\n\n    h2 {\n      font-size: 17px !important;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  Direktnachrichten                                                                                              {{ member.name }}                    '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DirectMessagesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditState.html":{"url":"interfaces/EditState.html","title":"interface - EditState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EditState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/search-field/search-field.editing.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentMessageId\n                                        \n                                \n                                \n                                        \n                                            originalMessage\n                                        \n                                \n                                \n                                        \n                                            showEditOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentMessageId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentMessageId:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalMessage:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showEditOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showEditOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EditState {\n  currentMessageId: string | null;\n  showEditOptions: boolean;\n  originalMessage: any | null;\n}\n\nexport function toggleEditOptionsHelper(\n  currentMsgId: string | null,\n  targetMsgId: string,\n  currentShowEdit: boolean\n): EditState {\n  if (currentMsgId === targetMsgId && currentShowEdit) {\n    return {\n      currentMessageId: null,\n      showEditOptions: false,\n      originalMessage: null,\n    };\n  } else {\n    return {\n      currentMessageId: targetMsgId,\n      showEditOptions: true,\n      originalMessage: null,\n    };\n  }\n}\n\nexport function startEditingHelper(msg: any): any {\n  msg.isEditing = true;\n  return { ...msg };\n}\n\nexport function toggleEditMessageHelper(msg: any): any {\n  msg.isEditing = true;\n  return { ...msg };\n}\n\nexport function cancelEditingHelper(\n  msg: any,\n  originalMessage: any\n): { updatedMsg: any; restoredOriginal: any } {\n  msg.isEditing = false;\n  if (originalMessage) {\n    msg.content = { ...originalMessage.content };\n    return { updatedMsg: msg, restoredOriginal: null };\n  }\n  return { updatedMsg: msg, restoredOriginal: originalMessage };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EmojiContext.html":{"url":"interfaces/EmojiContext.html","title":"interface - EmojiContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EmojiContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/search-field/search-field.emoji.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentUser\n                                        \n                                \n                                \n                                        \n                                            lastUsedEmojisReceived\n                                        \n                                \n                                \n                                        \n                                            lastUsedEmojisSent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastUsedEmojisReceived\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastUsedEmojisReceived:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastUsedEmojisSent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastUsedEmojisSent:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EmojiContext {\n  currentUser: any;\n  lastUsedEmojisSent: string[];\n  lastUsedEmojisReceived: string[];\n}\n\nexport async function loadLastUsedEmojis(\n  context: EmojiContext,\n  getMessagesOnce: (mode: string, conversationId: string) => Promise,\n  conversationId: string\n): Promise {\n  if (!conversationId) return;\n\n  try {\n    const messages = await getMessagesOnce('private', conversationId);\n    const lastMessages = messages.slice(-10);\n\n    context.lastUsedEmojisSent = [];\n    context.lastUsedEmojisReceived = [];\n\n    lastMessages.forEach((msg: any) => {\n      if (msg.content?.emojis) {\n        if (msg.senderId === context.currentUser.id) {\n          context.lastUsedEmojisSent.push(\n            ...msg.content.emojis.map((e: any) => e.emoji)\n          );\n        } else {\n          context.lastUsedEmojisReceived.push(\n            ...msg.content.emojis.map((e: any) => e.emoji)\n          );\n        }\n      }\n    });\n\n    context.lastUsedEmojisSent = [...new Set(context.lastUsedEmojisSent)].slice(\n      0,\n      5\n    );\n    context.lastUsedEmojisReceived = [\n      ...new Set(context.lastUsedEmojisReceived),\n    ].slice(0, 5);\n  } catch (error) {}\n}\n\nexport function addEmojiToMessage(\n  context: EmojiContext,\n  event: any,\n  msg: any\n): void {\n  if (!msg.content.emojis) {\n    msg.content.emojis = [];\n  }\n  const newEmoji = event.emoji.native;\n  const existingEmoji = msg.content.emojis.find(\n    (e: any) => e.emoji === newEmoji\n  );\n\n  if (existingEmoji) {\n    existingEmoji.count += 1;\n  } else {\n    msg.content.emojis.push({ emoji: newEmoji, count: 1 });\n  }\n\n  if (msg.senderName === context.currentUser?.name) {\n    if (!context.lastUsedEmojisSent.includes(newEmoji)) {\n      context.lastUsedEmojisSent = [\n        newEmoji,\n        ...context.lastUsedEmojisSent,\n      ].slice(0, 2);\n    }\n  } else {\n    if (!context.lastUsedEmojisReceived.includes(newEmoji)) {\n      context.lastUsedEmojisReceived = [\n        newEmoji,\n        ...context.lastUsedEmojisReceived,\n      ].slice(0, 2);\n    }\n  }\n}\n\nexport async function closeEmojiPicker(\n  msg: any,\n  updateMessageFn: (id: string, data: any) => Promise\n): Promise {\n  msg.isEmojiPickerVisible = false;\n  try {\n    await updateMessageFn(msg.id, { 'content.emojis': msg.content.emojis });\n  } catch (error) {}\n}\n\nexport function processEmojisFromMessages(\n  context: EmojiContext,\n  lastMessages: any[]\n): void {\n  context.lastUsedEmojisSent = [];\n  context.lastUsedEmojisReceived = [];\n\n  lastMessages.forEach((msg: any) => {\n    if (msg.content?.emojis) {\n      if (msg.senderId === context.currentUser.id) {\n        context.lastUsedEmojisSent.push(\n          ...msg.content.emojis.map((e: any) => e.emoji)\n        );\n      } else {\n        context.lastUsedEmojisReceived.push(\n          ...msg.content.emojis.map((e: any) => e.emoji)\n        );\n      }\n    }\n  });\n}\n\nexport function limitTopEmojis(context: EmojiContext): void {\n  context.lastUsedEmojisSent = [...new Set(context.lastUsedEmojisSent)].slice(\n    0,\n    5\n  );\n  context.lastUsedEmojisReceived = [\n    ...new Set(context.lastUsedEmojisReceived),\n  ].slice(0, 5);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreMessageData.html":{"url":"interfaces/FirestoreMessageData.html","title":"interface - FirestoreMessageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreMessageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message.models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            content\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Message {\n  id?: string;\n  content: MessageContent;\n  timestamp: any;\n  senderId: string;\n  time: string;\n  date?: string | { seconds: number; nanoseconds: number };\n  recipientId?: string;\n  channelId?: string;\n  conversationId?: string;\n  formattedDate?: string;\n  replyCount?: number;\n  lastResponseTime?: any;\n  channelName?: string;\n  threadChannelId?: string;\n  parentId?: string;\n  isHighlighted?: boolean;\n  isEditing?: boolean;\n  isEmojiPickerVisible?: boolean;\n  showAllEmojisList?: boolean;\n  expanded?: boolean;\n  type?: string;\n  threadId?: string;\n  lastReplyTime?: any;\n  recipientName?: string;\n  showDateSeparator?: boolean; \n  edited?: boolean;\n}\nexport interface MessageContent {\n  text?: string;\n  image?: string | ArrayBuffer | null;\n  emojis?: Array;\n  edited?: boolean;\n}\n\nexport interface FirestoreMessageData {\n  content?: {\n    emojis?: Array;\n  };\n}\nexport interface ChannelMessageData {\n  channelId?: string;\n  date?: string;\n  time?: string;\n  timestamp?: any;\n  senderId: string;\n  senderName?: string;\n  senderAvatar?: string ;\n  content: {\n    text: string;\n    image?: string;\n    emojis?: any[];\n  };\n  messageFormat: string; \n}\n\n\n\nexport type ReplyCountsMap = Record;\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [RouterLink],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n  \n    Impressum\n    Datenschutz\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Impressum    Datenschutz  '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showRegister\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToSignup\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hideContentContainer\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        hideContentContainer\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:15\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToSignup\n                        \n                    \n                \n            \n            \n                \nnavigateToSignup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showRegister\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n  showRegister = true;\n\n  @Input() hideContentContainer = false;\n\n  constructor(private router: Router) {}\n  ngOnInit(): void {\n    this.showRegister =\n      this.router.url !== '/signup' && this.router.url !== '/avatar';\n  }\n\n  navigateToSignup() {\n    this.router.navigate(['/signup']);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Neu bei DABubble?\n      Konto erstellen\n    \n  \n\n  \n    \n      \n    \n\n    DABubble\n  \n\n\n    \n\n    \n                \n                    ./header.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  position: relative;\n\n  .register {\n    @include dFlex(null, flex-end, 10px, null);\n    flex-direction: column;\n    padding: 4rem 2rem;\n    .box {\n      @include dFlex(null, flex-end, 5px, null);\n      flex-direction: column;\n    }\n\n    h3 {\n      margin: 0;\n      color: black;\n      font-size: 18px;\n      font-weight: 400;\n    }\n\n    button {\n      color: $middleblue;\n      border: none;\n      border-radius: 100px;\n      padding: 10px 15px;\n      cursor: pointer;\n      font-size: 18px;\n      font-weight: 400;\n      background-color: $lightblue;\n      transition: border-color 0.3s ease-in-out;\n      border: 1px solid transparent;\n\n      &:hover {\n        border-color: $button-blue;\n        transform: scale(1.01);\n        transition: transform 0.3s ease-in-out;\n      }\n    }\n  }\n}\n\nh1 {\n  color: black;\n  font-size: 32px;\n  font-family: \"Nunito\", sans-serif;\n  font-weight: 700;\n  margin-left: 20px;\n  margin: 0;\n}\n\n.container-box {\n  @include dFlex(null, null, 0px);\n  flex-direction: column;\n\n  img {\n    width: 70px;\n  }\n}\n\n.content-container {\n  @include dFlex(null, null, 16px);\n  padding: 4rem 2rem;\n  position: absolute;\n  top: 0;\n  opacity: 1;\n  align-items: center;\n}\n\n@keyframes moveDiagonal {\n  from {\n    opacity: 0;\n    transform: translate(-50%, -50%);\n  }\n  to {\n    opacity: 1;\n    transform: translate(-50vw, -50vh);\n  }\n}\n\n@keyframes moveVertical {\n  from {\n    opacity: 0;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(-50vh);\n  }\n}\n\n@media (max-width: 850px) {\n  .content-container {\n    @include dFlex(center, center, null);\n    max-width: 0px;\n    padding: 4rem 0rem;\n    //animation: moveVertical 1s ease-in-out forwards;\n  }\n\n  .container .register {\n    display: none;\n  }\n\n  .container-box {\n    img {\n      width: 56px;\n    }\n  }\n\n  .container {\n    padding: 4rem 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Neu bei DABubble?      Konto erstellen                          DABubble  '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImprintComponent.html":{"url":"components/ImprintComponent.html","title":"component - ImprintComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImprintComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/imprint/imprint.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-imprint\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FooterComponent\n                                HeaderComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./imprint.component.html\n            \n\n\n\n            \n                styleUrl\n                ./imprint.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/app/imprint/imprint.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/imprint/imprint.component.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/imprint/imprint.component.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { HeaderComponent } from '../header/header.component';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-imprint',\n  standalone: true,\n  imports: [FooterComponent,HeaderComponent],\n  templateUrl: './imprint.component.html',\n  styleUrl: './imprint.component.scss'\n})\nexport class ImprintComponent implements OnInit {\n\n  constructor(private location: Location){}\n\n  ngOnInit(): void {\n  }\n\n  goBack(){\n    this.location.back();\n  }\n}\n\n    \n\n    \n        \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n                \n              \n            \n          \n          \n            \n              Impressum\n              \n            \n            Angaben gemäß § 5 TMG\n            Vertreten durch:\n            Selcuk Kocyigit\n            \n\n            Contact\n            \n              Hochfelder Str.33\n              47226 Duisburg\n              Germany\n            \n            E-mail: info&#64;selcuk-kocyigit.de\n            \n              https://www.e-recht24.de\n            \n          \n        \n      \n    \n  \n\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                              Impressum                                      Angaben gemäß § 5 TMG            Vertreten durch:            Selcuk Kocyigit                        Contact                          Hochfelder Str.33              47226 Duisburg              Germany                        E-mail: info@selcuk-kocyigit.de                          https://www.e-recht24.de                                            '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImprintComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InnerChannelComponent.html":{"url":"components/InnerChannelComponent.html","title":"component - InnerChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  InnerChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/inner-channel/inner-channel.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-inner-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatDialogModule\n                \n            \n\n            \n                styleUrls\n                ./inner-channel.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./inner-channel.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelNameExists\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                    \n                                entwicklerteamComponent\n                            \n                            \n                                entwicklerTeams\n                            \n                            \n                                isChannelsVisible\n                            \n                            \n                                selectedChannel\n                            \n                            \n                                showWelcomeContainer\n                            \n                            \n                                    Private\n                                unsubscribeFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildNewChannel\n                            \n                            \n                                    Async\n                                createChannel\n                            \n                            \n                                    Private\n                                doesChannelNameExist\n                            \n                            \n                                    Private\n                                ensureCurrentUserIncluded\n                            \n                            \n                                    Async\n                                leaveChannel\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                            \n                                selectChannel\n                            \n                            \n                                toggleChannels\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                channelSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, channelService: ChannelService, userService: UserService, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/inner-channel/inner-channel.component.ts:62\n                            \n                        \n\n                \n                    \n                            Constructor injecting services for dialogs, channel data, user data,\nand change detection if needed.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        channelSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/inner-channel/inner-channel.component.ts:39\n                            \n                        \n                \n                    \n                        Event emitted when a new channel is selected, passing that channel data.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildNewChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildNewChannel(name: string, members: any[], creatorName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:142\n                        \n                    \n\n\n            \n                \n                        Builds a new channel object with a random ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                members\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                creatorName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChannel(name: string, members: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:100\n                        \n                    \n\n\n            \n                \n                        Creates a new channel with the given name and members.\nChecks for duplicates, ensures current user is included,\nand saves the channel in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                members\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        doesChannelNameExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    doesChannelNameExist(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Checks if a channel name already exists in the current array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ensureCurrentUserIncluded\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureCurrentUserIncluded(members: any[], userData: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Ensures the current user is in the members array; returns the updated array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                members\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userData\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveChannel(channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:187\n                        \n                    \n\n\n            \n                \n                        Allows the user to leave a channel, removing them from Firestore,\nupdating local state, and emitting null as the current channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Loads channels on init, then subscribes to currentChannels\nto filter those that include the current user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Opens a dialog for channel creation (ChannelDialogComponent),\nthen calls createChannel upon successful dialog close.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectChannel\n                        \n                    \n                \n            \n            \n                \nselectChannel(channel: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:159\n                        \n                    \n\n\n            \n                \n                        Selects the specified channel, informs the ChannelService,\nand emits an event to notify other components.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChannels\n                        \n                    \n                \n            \n            \n                \ntoggleChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/inner-channel/inner-channel.component.ts:179\n                        \n                    \n\n\n            \n                \n                        Toggles visibility of the channel list UI.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelNameExists\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:54\n                        \n                    \n\n            \n                \n                    Flag indicating if a channel name already exists.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        entwicklerteamComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EntwicklerteamComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(EntwicklerteamComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:34\n                        \n                    \n\n            \n                \n                    A ViewChild reference to the EntwicklerteamComponent for interacting with its instance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entwicklerTeams\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:45\n                        \n                    \n\n            \n                \n                    Array of channels (teams) that the current user is a member of.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isChannelsVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:42\n                        \n                    \n\n            \n                \n                    Whether the channel list is visible or collapsed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:60\n                        \n                    \n\n            \n                \n                    Stores the currently selected channel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showWelcomeContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:57\n                        \n                    \n\n            \n                \n                    Whether the welcome screen is shown if no channel is selected.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubscribeFn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/inner-channel/inner-channel.component.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  Component,\n  ViewChild,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { ChannelDialogComponent } from '../channel-dialog/channel-dialog.component';\nimport { EntwicklerteamComponent } from '../entwicklerteam/entwicklerteam.component';\nimport { ChannelService } from '../channel.service';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-inner-channel',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule],\n  templateUrl: './inner-channel.component.html',\n  styleUrls: ['./inner-channel.component.scss'],\n})\nexport class InnerChannelComponent implements OnInit, OnDestroy {\n  /**\n   * A ViewChild reference to the EntwicklerteamComponent for interacting with its instance.\n   */\n  @ViewChild(EntwicklerteamComponent)\n  entwicklerteamComponent!: EntwicklerteamComponent;\n\n  /**\n   * Event emitted when a new channel is selected, passing that channel data.\n   */\n  @Output() channelSelected = new EventEmitter();\n\n  /** Whether the channel list is visible or collapsed. */\n  isChannelsVisible = true;\n\n  /** Array of channels (teams) that the current user is a member of. */\n  entwicklerTeams: {\n    id: string;\n    name: string;\n    members: any[];\n    description?: string;\n    createdBy?: string;\n  }[] = [];\n\n  /** Flag indicating if a channel name already exists. */\n  channelNameExists = false;\n\n  /** Whether the welcome screen is shown if no channel is selected. */\n  showWelcomeContainer = false;\n\n  /** Stores the currently selected channel. */\n  selectedChannel: any = null;\n\n  private unsubscribeFn = () => {};\n\n  /**\n   * Constructor injecting services for dialogs, channel data, user data,\n   * and change detection if needed.\n   */\n  constructor(\n    public dialog: MatDialog,\n    private channelService: ChannelService,\n    private userService: UserService,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Loads channels on init, then subscribes to currentChannels\n   * to filter those that include the current user.\n   */\n\n  ngOnInit() {\n    this.unsubscribeFn = this.channelService.listenChannelsLive(\n      (allChannels) => {\n        const userId = this.userService.getCurrentUserId();\n        this.entwicklerTeams = allChannels.filter((ch) =>\n          ch.membersUid.includes(userId)\n        );\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeFn();\n  }\n\n  /**\n   * Creates a new channel with the given name and members.\n   * Checks for duplicates, ensures current user is included,\n   * and saves the channel in Firestore.\n   */\n  async createChannel(name: string, members: any[]): Promise {\n    const userData = await this.userService.getCurrentUserData();\n    if (!userData) return;\n    if (this.doesChannelNameExist(name)) {\n      this.channelNameExists = true;\n      return;\n    }\n    this.channelNameExists = false;\n    members = this.ensureCurrentUserIncluded(members, userData);\n    const newChannel = this.buildNewChannel(name, members, userData.name);\n    this.entwicklerTeams.push(newChannel);\n    await this.channelService.addChannel(newChannel);\n    this.channelService.changeChannel(newChannel);\n  }\n\n  /**\n   * Checks if a channel name already exists in the current array.\n   */\n  private doesChannelNameExist(name: string): boolean {\n    return this.entwicklerTeams.some(\n      (ch) => ch.name.toLowerCase() === name.toLowerCase()\n    );\n  }\n\n  /**\n   * Ensures the current user is in the members array; returns the updated array.\n   */\n  private ensureCurrentUserIncluded(\n    members: any[],\n    userData: { uid: string; name?: string }\n  ): any[] {\n    const { uid, name = 'Unbekannt' } = userData;\n    const isAlreadyIncluded = members.some((m: any) => m.uid === uid);\n    if (!isAlreadyIncluded) {\n      members.push({ uid, name });\n    }\n    return members;\n  }\n\n  /**\n   * Builds a new channel object with a random ID.\n   */\n  private buildNewChannel(\n    name: string,\n    members: any[],\n    creatorName: string\n  ): any {\n    return {\n      id: Math.random().toString(36).substring(2, 15),\n      name,\n      members,\n      createdBy: creatorName || 'Unbekannt',\n    };\n  }\n\n  /**\n   * Selects the specified channel, informs the ChannelService,\n   * and emits an event to notify other components.\n   */\n  selectChannel(channel: any): void {\n    this.channelService.changeChannel(channel);\n    this.channelSelected.emit(channel);\n  }\n\n  /**\n   * Opens a dialog for channel creation (ChannelDialogComponent),\n   * then calls createChannel upon successful dialog close.\n   */\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ChannelDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result)\n        this.createChannel(result.channelName, result.selectedMembers);\n    });\n  }\n\n  /**\n   * Toggles visibility of the channel list UI.\n   */\n  toggleChannels(): void {\n    this.isChannelsVisible = !this.isChannelsVisible;\n  }\n\n  /**\n   * Allows the user to leave a channel, removing them from Firestore,\n   * updating local state, and emitting null as the current channel.\n   */\n  async leaveChannel(channelId: string): Promise {\n    const userId = this.userService.getCurrentUserId();\n    if (!userId) return;\n    try {\n      await this.channelService.leaveChannel(channelId, userId);\n      this.entwicklerTeams = this.entwicklerTeams.filter(\n        (ch) => ch.id !== channelId\n      );\n      this.channelSelected.emit(null);\n    } catch (_error) {}\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n\n      \n        \n\n        Channels\n      \n    \n    \n      \n    \n  \n\n  \n     0\">\n      \n        \n        {{ team.name }}\n      \n    \n\n    \n      \n      Channel hinzufügen\n    \n  \n\n\n    \n\n    \n                \n                    ./inner-channel.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.selection {\n  display: flex;\n  flex-direction: column;\n  gap: 25px;\n\n  .channel-box {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n\n    h1 {\n      margin-left: 10px;\n    }\n\n    .hover-container {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n\n      &:hover {\n        img {\n          filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n            saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n        }\n\n        h1 {\n          color: $hoverColor;\n        }\n      }\n\n      img {\n        width: 24px;\n        height: 24px;\n        object-fit: cover;\n        transition: filter 0.3s ease, transform 0.3s ease;\n      }\n\n      h1 {\n        font-size: 24px;\n        font-weight: 700;\n        transition: color 0.3s ease, transform 0.3s ease;\n        margin: 0;\n      }\n    }\n\n    .work-box {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 10px;\n    }\n\n    .edit-channel {\n      width: 40px;\n      height: 40px;\n      margin-left: auto;\n      cursor: pointer;\n      border-radius: 50%;\n      transition: background-color 0.3s ease, transform 0.3s ease;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      &:hover {\n        background-color: $lightblue;\n\n        img {\n          filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n            saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n        }\n      }\n\n      img {\n        width: 24px;\n        height: 24px;\n        object-fit: cover;\n        transition: filter 0.3s ease;\n        cursor: pointer;\n      }\n    }\n  }\n\n  .entwickler-box {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 0 0 0 40px;\n    border-radius: 100px;\n    transition: background-color 0.3s ease, transform 0.3s ease;\n    width: 100%;\n    height: 33px;\n    max-width: 206px;\n    cursor: pointer;\n\n    &:hover {\n      background-color: $lightblue;\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n\n    img {\n      width: 24px;\n      height: 24px;\n      object-fit: cover;\n      transition: filter 0.3s ease;\n      cursor: pointer;\n    }\n\n    p {\n      font-size: 18px;\n    }\n\n    &.selected {\n      background-color: $lightblue; \n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n\n      p {\n        color: $hoverColor;\n      }\n    }\n  }\n\n  .add-channel {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 0 0 0 40px;\n    cursor: pointer;\n    font-size: 18px;\n\n    p {\n      margin: 0;\n    }\n\n    &:hover {\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n        scale: (1.1);\n      }\n\n      p {\n        color: $hoverColor;\n      }\n    }\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  .entwickler-box,\n  .add-channel {\n    transition: max-height 0.3s ease, opacity 0.3s ease;\n    overflow: hidden;\n    max-height: 500px; \n    opacity: 1;\n  }\n\n  .entwickler-box.ng-leave,\n  .add-channel.ng-leave {\n    max-height: 0;\n    opacity: 0;\n  }\n\n  .entwickler-box.ng-enter,\n  .add-channel.ng-enter {\n    max-height: 500px;\n    opacity: 1;\n  }\n\n  .channel-left {\n    transition: transform 0.3s ease; \n\n    &.rotate-down {\n      transform: rotate(180deg); \n    }\n  }\n\n  .channel-distanz {\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n  }\n\n  .channel-detail-distanz {\n    display: flex;\n    flex-direction: column;\n    gap: 13px;\n  }\n\n  @media (max-width: 1200px) {\n    .channel-box,\n    .hover-container,\n    h1 {\n      font-size: 20px !important;\n    }\n\n    .entwickler-box,\n    p {\n      font-size: 17px !important;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  Channels                                 0\">                      {{ team.name }}                          Channel hinzufügen      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InnerChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IntroComponent.html":{"url":"components/IntroComponent.html","title":"component - IntroComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IntroComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/intro/intro.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-intro\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./intro.component.html\n            \n\n\n\n            \n                styleUrl\n                ./intro.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/intro/intro.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/intro/intro.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-intro',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './intro.component.html',\n  styleUrl: './intro.component.scss',\n})\nexport class IntroComponent implements OnInit {\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {\n    setTimeout(() => {\n      this.router.navigate(['/login']);\n    }, 4000);\n  }\n}\n\n    \n\n    \n        \n\n\n  \n    \n  \n  DABubble\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          DABubble'\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IntroComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Member.html":{"url":"interfaces/Member.html","title":"interface - Member","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Member\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/member.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Member {\n    id: string;      \n    name: string;\n    image: string;\n    email?: string;   \n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MemberListDialogComponent.html":{"url":"components/MemberListDialogComponent.html","title":"component - MemberListDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MemberListDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/member-list-dialog/member-list-dialog.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-member-list-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            OverlayModule\n                \n            \n\n            \n                styleUrls\n                ./member-list-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./member-list-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                data\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                dialogRef\n                            \n                            \n                                    Private\n                                    Optional\n                                unsubscribeAllUsers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onCancel\n                            \n                            \n                                openAddMembersOverlayMethod\n                            \n                            \n                                openProfileDialog\n                            \n                            \n                                removeMember\n                            \n                            \n                                startPrivateChat\n                            \n                            \n                                updateChannelMembers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                openAddMembersOverlay\n                            \n                            \n                                openPrivateChat\n                            \n                            \n                                openProfileRequested\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(channelService: ChannelService, messageService: MessageService, dialogRef?: MatDialogRef, data?: MemberListDialogData)\n                    \n                \n                        \n                            \n                                Defined in src/app/member-list-dialog/member-list-dialog.component.ts:66\n                            \n                        \n\n                \n                    \n                            Constructor injecting services and optional references for Material Dialog usage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for channel-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nReference to the Material Dialog, if used.\n\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        MemberListDialogData\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional data passed in via MAT_DIALOG_DATA, if used.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        channelId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:40\n                            \n                        \n                \n                    \n                        The channel ID if used in an overlay context. If data is passed\nvia Material Dialog, it may also come from MAT_DIALOG_DATA.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        members\n                    \n                \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:45\n                            \n                        \n                \n                    \n                        An array of member objects belonging to the channel.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        close\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:50\n                            \n                        \n                \n                    \n                        Emitted when closing the overlay (in cdk Overlay context).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openAddMembersOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:55\n                            \n                        \n                \n                    \n                        Emitted when requesting the addition of new members (desktop overlay).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openPrivateChat\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:60\n                            \n                        \n                \n                    \n                        Emitted when starting a private chat with a specific member (in cdk overlay).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openProfileRequested\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-list-dialog/member-list-dialog.component.ts:65\n                            \n                        \n                \n                    \n                        Emitted when opening a profile is requested (desktop overlay).\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:186\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that runs after component initialization.\nLoads channel ID and members from the injected dialog data if provided.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Closes either the Material Dialog or emits a close event for cdk Overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddMembersOverlayMethod\n                        \n                    \n                \n            \n            \n                \nopenAddMembersOverlayMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:178\n                        \n                    \n\n\n            \n                \n                        Requests opening an \"Add Members\" overlay or dialog,\ndepending on whether we're in a Material Dialog context or an overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfileDialog\n                        \n                    \n                \n            \n            \n                \nopenProfileDialog(member: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:165\n                        \n                    \n\n\n            \n                \n                        Opens a profile dialog for the given member. For Material Dialog, closes\nwith member data; for an overlay, emits an event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe member object for profile display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMember\n                        \n                    \n                \n            \n            \n                \nremoveMember(member: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Removes a member from the channel, then updates Firestore via ChannelService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe member object to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startPrivateChat\n                        \n                    \n                \n            \n            \n                \nstartPrivateChat(member: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Begins a private chat with the selected member. In a Material Dialog,\nit closes with data, and in an overlay context, it emits an event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe member object to start a chat with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChannelMembers\n                        \n                    \n                \n            \n            \n                \nupdateChannelMembers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-list-dialog/member-list-dialog.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Updates the channel's member list in Firestore through the ChannelService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MemberListDialogData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()@Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/member-list-dialog/member-list-dialog.component.ts:80\n                        \n                    \n\n            \n                \n                    - Optional data passed in via MAT_DIALOG_DATA, if used.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/member-list-dialog/member-list-dialog.component.ts:79\n                        \n                    \n\n            \n                \n                    - Reference to the Material Dialog, if used.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        unsubscribeAllUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/member-list-dialog/member-list-dialog.component.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, Optional, Inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ChannelService } from '../channel.service';\nimport { MessageService } from '../message.service';\n\n\n/**\n * Optional interface if Material Dialog is used and data is passed.\n */\nexport interface MemberListDialogData {\n  channelId?: string;\n  members?: any[];\n}\n\n@Component({\n  selector: 'app-member-list-dialog',\n  standalone: true,\n  imports: [CommonModule, OverlayModule],\n  templateUrl: './member-list-dialog.component.html',\n  styleUrls: ['./member-list-dialog.component.scss']\n})\nexport class MemberListDialogComponent implements OnInit {\n\n  /**\n   * The channel ID if used in an overlay context. If data is passed\n   * via Material Dialog, it may also come from MAT_DIALOG_DATA.\n   */\n  @Input() channelId!: string;\n\n  /**\n   * An array of member objects belonging to the channel.\n   */\n  @Input() members: any[] = [];\n\n  /**\n   * Emitted when closing the overlay (in cdk Overlay context).\n   */\n  @Output() close = new EventEmitter();\n\n  /**\n   * Emitted when requesting the addition of new members (desktop overlay).\n   */\n  @Output() openAddMembersOverlay = new EventEmitter();\n\n  /**\n   * Emitted when starting a private chat with a specific member (in cdk overlay).\n   */\n  @Output() openPrivateChat = new EventEmitter();\n\n  /**\n   * Emitted when opening a profile is requested (desktop overlay).\n   */\n  @Output() openProfileRequested = new EventEmitter();\n  private unsubscribeAllUsers?: () => void;\n\n\n  /**\n   * Constructor injecting services and optional references for Material Dialog usage.\n   *\n   * @param {ChannelService} channelService - Service for channel-related operations.\n   * @param {MatDialogRef} dialogRef - Reference to the Material Dialog, if used.\n   * @param {MemberListDialogData} data - Optional data passed in via MAT_DIALOG_DATA, if used.\n   */\n  constructor(\n    private channelService: ChannelService,\n    private messageService: MessageService,  \n    @Optional() public dialogRef?: MatDialogRef,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data?: MemberListDialogData\n  ) {}\n\n  /**\n   * Lifecycle hook that runs after component initialization.\n   * Loads channel ID and members from the injected dialog data if provided.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      if (this.data.channelId) {\n        this.channelId = this.data.channelId;\n      }\n      if (this.data.members) {\n        this.members = this.data.members;\n      }\n    }\n\n    this.unsubscribeAllUsers = this.messageService.onAllUsersChanged(\n      (allUsers) => {\n        // Filtere allUsers auf diejenigen, die in this.members enthalten sind\n        // (falls dein Ziel ist: \"members\" = Channel-Mitglieder + deren Live-Status)\n        this.members = allUsers.filter((user) =>\n          this.members.some((m) => m.uid === user.uid)\n        );\n      }\n    );\n  }\n\n  /**\n   * Removes a member from the channel, then updates Firestore via ChannelService.\n   *\n   * @param {any} member - The member object to remove.\n   */\n  removeMember(member: any): void {\n    this.members = this.members.filter(m => m !== member);\n    this.updateChannelMembers();\n  }\n\n  /**\n   * Updates the channel's member list in Firestore through the ChannelService.\n   */\n  updateChannelMembers(): void {\n    if (!this.channelId) return;\n    this.channelService.setMembers(this.channelId, this.members)\n      .then(() => {\n       \n      })\n      .catch(() => {\n       \n      });\n  }\n\n  /**\n   * Closes either the Material Dialog or emits a close event for cdk Overlay.\n   */\n  onCancel(): void {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n    } else {\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Begins a private chat with the selected member. In a Material Dialog,\n   * it closes with data, and in an overlay context, it emits an event.\n   *\n   * @param {any} member - The member object to start a chat with.\n   */\n  startPrivateChat(member: any) {\n    const payload = { id: member.uid, name: member.name };\n    if (this.dialogRef) {\n      this.dialogRef.close({ openChatWith: payload });\n    } else {\n      this.openPrivateChat.emit(payload);\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Opens a profile dialog for the given member. For Material Dialog, closes\n   * with member data; for an overlay, emits an event.\n   *\n   * @param {any} member - The member object for profile display.\n   */\n  openProfileDialog(member: any) {\n    if (this.dialogRef) {\n      this.dialogRef.close({ openProfile: member });\n    } else {\n      this.openProfileRequested.emit(member);\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Requests opening an \"Add Members\" overlay or dialog,\n   * depending on whether we're in a Material Dialog context or an overlay.\n   */\n  openAddMembersOverlayMethod() {\n    if (this.dialogRef) {\n      this.dialogRef.close({ addMembers: true });\n    } else {\n      this.openAddMembersOverlay.emit();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeAllUsers) {\n      this.unsubscribeAllUsers();\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \n        \n  \n    \n      Mitglieder\n      \n    \n    \n      \n        \n          \n          \n          \n        \n        {{ member.name }}\n\n      \n      \n        \n          \n        \n        Mitglieder Hinzufügen\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./member-list-dialog.component.scss\n                \n                @import \"./../../styles.scss\";\n\nul {\n  list-style-type: none;\n  padding: 0;\n  gap: 13px;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  padding: 0 20px;\n  gap: 15px;\n  width: fit-content;\n  border-radius: 100px;\n  transition: background-color 0.3s ease, color 0.3s ease;\n\n  .text-truncate {\n    display: inline-block;\n    max-width: 220px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1;\n    min-width: 0;\n  }\n\n  &:hover {\n    background-color: $lightblue;\n    border-radius: 100px;\n  }\n}\n\nspan {\n  font-size: 18px;\n  font-weight: 400;\n  color: black;\n  transition: color 0.3s ease;\n}\n\n.avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.container {\n  padding: 40px;\n  gap: 20px;\n  border-radius: 30px 0px 30px 30px;\n  border: 1px 0px 0px 0px;\n  gap: 20px;\n  display: flex;\n  flex-direction: column;\n  height: 411px;\n  overflow-y: overlay;\n  overflow-x: hidden;\n  background-color: white;\n  max-width: 335px;\n}\n\n.container:hover {\n  scrollbar-color: $hoverColor white;\n}\n\n.close-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  h1 {\n    margin-right: 20px;\n    font-size: 24px;\n    font-weight: 700;\n    flex-grow: 1;\n  }\n\n  img {\n    cursor: pointer;\n    transition: filter 0.3s ease, background-color 0.3s ease;\n    border-radius: 50%;\n    margin-left: auto;\n    &:hover {\n      background-color: $lightblue;\n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n::ng-deep .mat-mdc-dialog-container {\n  border-radius: 30px 0 30px 30px !important;\n  width: unset;\n}\n\n::ng-deep .mdc-dialog__surface {\n  border-radius: 30px 0 30px 30px !important;\n  overflow: hidden;\n}\n\n.member-box {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 0 29px;\n  width: fit-content;\n  border-radius: 100px;\n  transition: background-color 0.3s ease, color 0.3s ease;\n\n  .img-container {\n    width: 32px;\n    height: 32px;\n    background-color: $lightblue;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    transition: background-color 0.3s ease;\n\n    img {\n      width: 24px;\n      height: 24px;\n      transition: filter 0.3s ease, transform 0.3s ease;\n    }\n  }\n\n  h2 {\n    font-size: 18px;\n    font-weight: 400;\n    color: #333;\n    transition: color 0.3s ease;\n  }\n\n  &:hover {\n    background-color: $lightblue;\n    border-radius: 100px;\n\n    h2 {\n      color: $hoverColor;\n    }\n\n    .img-container {\n      background-color: transparent;\n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n.avatar-container {\n  position: relative;\n\n  .status-icon {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    border: 2px solid white;\n  }\n}\n\n@media (max-width: 1278px) {\n  .container {\n    height: 371px;\n    overflow-y: overlay;\n    overflow-x: hidden;\n    padding: 20px 16px;\n    max-width: 398px;\n  }\n\n  @media (max-width: 390px) {\n    .close-dialog h1 {\n      font-size: 18px;\n    }\n\n    .close-dialog img {\n      width: 30px;\n    }\n\n    .member-box .img-container {\n      width: 30px;\n    }\n    .member-box h2 {\n      font-size: 16px;\n    }\n\n    .member-box {\n      width: 100%;\n      gap: 10px;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Mitglieder                                                                          {{ member.name }}                                              Mitglieder Hinzufügen            '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MemberListDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemberListDialogData.html":{"url":"interfaces/MemberListDialogData.html","title":"interface - MemberListDialogData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MemberListDialogData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/member-list-dialog/member-list-dialog.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Optional interface if Material Dialog is used and data is passed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            members\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        members\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        members:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter, Optional, Inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ChannelService } from '../channel.service';\nimport { MessageService } from '../message.service';\n\n\n/**\n * Optional interface if Material Dialog is used and data is passed.\n */\nexport interface MemberListDialogData {\n  channelId?: string;\n  members?: any[];\n}\n\n@Component({\n  selector: 'app-member-list-dialog',\n  standalone: true,\n  imports: [CommonModule, OverlayModule],\n  templateUrl: './member-list-dialog.component.html',\n  styleUrls: ['./member-list-dialog.component.scss']\n})\nexport class MemberListDialogComponent implements OnInit {\n\n  /**\n   * The channel ID if used in an overlay context. If data is passed\n   * via Material Dialog, it may also come from MAT_DIALOG_DATA.\n   */\n  @Input() channelId!: string;\n\n  /**\n   * An array of member objects belonging to the channel.\n   */\n  @Input() members: any[] = [];\n\n  /**\n   * Emitted when closing the overlay (in cdk Overlay context).\n   */\n  @Output() close = new EventEmitter();\n\n  /**\n   * Emitted when requesting the addition of new members (desktop overlay).\n   */\n  @Output() openAddMembersOverlay = new EventEmitter();\n\n  /**\n   * Emitted when starting a private chat with a specific member (in cdk overlay).\n   */\n  @Output() openPrivateChat = new EventEmitter();\n\n  /**\n   * Emitted when opening a profile is requested (desktop overlay).\n   */\n  @Output() openProfileRequested = new EventEmitter();\n  private unsubscribeAllUsers?: () => void;\n\n\n  /**\n   * Constructor injecting services and optional references for Material Dialog usage.\n   *\n   * @param {ChannelService} channelService - Service for channel-related operations.\n   * @param {MatDialogRef} dialogRef - Reference to the Material Dialog, if used.\n   * @param {MemberListDialogData} data - Optional data passed in via MAT_DIALOG_DATA, if used.\n   */\n  constructor(\n    private channelService: ChannelService,\n    private messageService: MessageService,  \n    @Optional() public dialogRef?: MatDialogRef,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data?: MemberListDialogData\n  ) {}\n\n  /**\n   * Lifecycle hook that runs after component initialization.\n   * Loads channel ID and members from the injected dialog data if provided.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      if (this.data.channelId) {\n        this.channelId = this.data.channelId;\n      }\n      if (this.data.members) {\n        this.members = this.data.members;\n      }\n    }\n\n    this.unsubscribeAllUsers = this.messageService.onAllUsersChanged(\n      (allUsers) => {\n        // Filtere allUsers auf diejenigen, die in this.members enthalten sind\n        // (falls dein Ziel ist: \"members\" = Channel-Mitglieder + deren Live-Status)\n        this.members = allUsers.filter((user) =>\n          this.members.some((m) => m.uid === user.uid)\n        );\n      }\n    );\n  }\n\n  /**\n   * Removes a member from the channel, then updates Firestore via ChannelService.\n   *\n   * @param {any} member - The member object to remove.\n   */\n  removeMember(member: any): void {\n    this.members = this.members.filter(m => m !== member);\n    this.updateChannelMembers();\n  }\n\n  /**\n   * Updates the channel's member list in Firestore through the ChannelService.\n   */\n  updateChannelMembers(): void {\n    if (!this.channelId) return;\n    this.channelService.setMembers(this.channelId, this.members)\n      .then(() => {\n       \n      })\n      .catch(() => {\n       \n      });\n  }\n\n  /**\n   * Closes either the Material Dialog or emits a close event for cdk Overlay.\n   */\n  onCancel(): void {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n    } else {\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Begins a private chat with the selected member. In a Material Dialog,\n   * it closes with data, and in an overlay context, it emits an event.\n   *\n   * @param {any} member - The member object to start a chat with.\n   */\n  startPrivateChat(member: any) {\n    const payload = { id: member.uid, name: member.name };\n    if (this.dialogRef) {\n      this.dialogRef.close({ openChatWith: payload });\n    } else {\n      this.openPrivateChat.emit(payload);\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Opens a profile dialog for the given member. For Material Dialog, closes\n   * with member data; for an overlay, emits an event.\n   *\n   * @param {any} member - The member object for profile display.\n   */\n  openProfileDialog(member: any) {\n    if (this.dialogRef) {\n      this.dialogRef.close({ openProfile: member });\n    } else {\n      this.openProfileRequested.emit(member);\n      this.close.emit();\n    }\n  }\n\n  /**\n   * Requests opening an \"Add Members\" overlay or dialog,\n   * depending on whether we're in a Material Dialog context or an overlay.\n   */\n  openAddMembersOverlayMethod() {\n    if (this.dialogRef) {\n      this.dialogRef.close({ addMembers: true });\n    } else {\n      this.openAddMembersOverlay.emit();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeAllUsers) {\n      this.unsubscribeAllUsers();\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MemberSectionDialogComponent.html":{"url":"components/MemberSectionDialogComponent.html","title":"component - MemberSectionDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MemberSectionDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/member-section-dialog/member-section-dialog.component.ts\n\n\n\n    \n        Description\n    \n    \n        The MemberSectionDialogComponent is a dialog that displays\na list of members and allows the user to pick one. Once\nselected, it emits the chosen member and closes the dialog.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-member-section-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n            \n                styleUrls\n                ./member-section-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./member-section-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onCancel\n                            \n                            \n                                selectMember\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                memberSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/member-section-dialog/member-section-dialog.component.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor that receives the members array from the dialog data.\n  Reference to the current dialog.\n  Data injected into the dialog, expected to contain members.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                  Reference to the current dialog.\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                  Data injected into the dialog, expected to contain members.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        memberSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/member-section-dialog/member-section-dialog.component.ts:30\n                            \n                        \n                \n                    \n                        Emits an event containing the selected member's UID and name.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-section-dialog/member-section-dialog.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Closes the dialog without selecting any member.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectMember\n                        \n                    \n                \n            \n            \n                \nselectMember(member: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/member-section-dialog/member-section-dialog.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Selects a member, closing the dialog and emitting memberSelected\nif the member data is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe chosen member object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/member-section-dialog/member-section-dialog.component.ts:47\n                        \n                    \n\n            \n                \n                      Data injected into the dialog, expected to contain `members`.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/member-section-dialog/member-section-dialog.component.ts:46\n                        \n                    \n\n            \n                \n                      Reference to the current dialog.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/member-section-dialog/member-section-dialog.component.ts:35\n                        \n                    \n\n            \n                \n                    The list of members provided to the dialog.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * The MemberSectionDialogComponent is a dialog that displays \n * a list of members and allows the user to pick one. Once \n * selected, it emits the chosen member and closes the dialog.\n */\n@Component({\n  selector: 'app-member-section-dialog',\n  standalone: true,\n  templateUrl: './member-section-dialog.component.html',\n  styleUrls: ['./member-section-dialog.component.scss'],\n  imports: [CommonModule, FormsModule]\n})\nexport class MemberSectionDialogComponent {\n  /**\n   * Emits an event containing the selected member's UID and name.\n   */\n  @Output() memberSelected = new EventEmitter();\n\n  /**\n   * The list of members provided to the dialog.\n   */\n  members: any[] = [];\n\n  /**\n   * Constructor that receives the members array from the dialog data.\n   *\n   * @param {MatDialogRef} dialogRef \n   *   Reference to the current dialog.\n   * @param {any} data \n   *   Data injected into the dialog, expected to contain `members`.\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.members = data.members || [];\n  }\n\n  /**\n   * Selects a member, closing the dialog and emitting `memberSelected` \n   * if the member data is valid.\n   *\n   * @param {any} member - The chosen member object.\n   */\n  selectMember(member: any): void {\n    if (member && member.uid && member.name) {\n      this.dialogRef.close(); \n      this.memberSelected.emit({ uid: member.uid, name: member.name });\n    } else {\n    }\n  }\n\n  /**\n   * Closes the dialog without selecting any member.\n   */\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n      \n      {{ member.name }}\n    \n  \n\n\n    \n\n    \n                \n                    ./member-section-dialog.component.scss\n                \n                @import \"./../../styles.scss\";\n\nul {\n  list-style-type: none;\n  padding: 0;\n  gap: 13px;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  padding: 0 20px;\n  gap: 15px;\n  width: fit-content;\n  border-radius: 100px;\n  transition: background-color 0.3s ease, color 0.3s ease;\n\n  &:hover {\n    background-color: $lightblue;\n    border-radius: 100px;\n  }\n}\n\nspan {\n  font-size: 18px;\n  font-weight: 400;\n  color: black;\n  transition: color 0.3s ease;\n}\n\n.avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.container {\n  padding: 40px;\n  gap: 20px;\n  border-radius: 40px 0px 0px 0px;\n  border: 1px 0px 0px 0px;\n  gap: 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.avatar-container {\n  position: relative;\n}\n\n::ng-deep .mat-mdc-dialog-container {\n  border-radius: 30px 30px 30px 0px !important;\n}\n\n::ng-deep .mdc-dialog__surface {\n  border-radius: 0px 30px 30px 30px !important;\n  overflow: hidden;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{ member.name }}      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MemberSectionDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Message.html":{"url":"interfaces/Message.html","title":"interface - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message.models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            channelName\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            conversationId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            edited\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expanded\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formattedDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isEditing\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isEmojiPickerVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isHighlighted\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastReplyTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastResponseTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parentId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            recipientId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            recipientName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            replyCount\n                                        \n                                \n                                \n                                        \n                                            senderId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showAllEmojisList\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDateSeparator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threadChannelId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threadId\n                                        \n                                \n                                \n                                        \n                                            time\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        channelName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         MessageContent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MessageContent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        conversationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conversationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     string | literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edited\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edited:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expanded\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expanded:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formattedDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formattedDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isEditing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEditing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isEmojiPickerVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmojiPickerVisible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isHighlighted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isHighlighted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastReplyTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastReplyTime:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastResponseTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastResponseTime:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parentId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recipientId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recipientId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recipientName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recipientName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replyCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        replyCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showAllEmojisList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showAllEmojisList:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDateSeparator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDateSeparator:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threadChannelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threadChannelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Message {\n  id?: string;\n  content: MessageContent;\n  timestamp: any;\n  senderId: string;\n  time: string;\n  date?: string | { seconds: number; nanoseconds: number };\n  recipientId?: string;\n  channelId?: string;\n  conversationId?: string;\n  formattedDate?: string;\n  replyCount?: number;\n  lastResponseTime?: any;\n  channelName?: string;\n  threadChannelId?: string;\n  parentId?: string;\n  isHighlighted?: boolean;\n  isEditing?: boolean;\n  isEmojiPickerVisible?: boolean;\n  showAllEmojisList?: boolean;\n  expanded?: boolean;\n  type?: string;\n  threadId?: string;\n  lastReplyTime?: any;\n  recipientName?: string;\n  showDateSeparator?: boolean; \n  edited?: boolean;\n}\nexport interface MessageContent {\n  text?: string;\n  image?: string | ArrayBuffer | null;\n  emojis?: Array;\n  edited?: boolean;\n}\n\nexport interface FirestoreMessageData {\n  content?: {\n    emojis?: Array;\n  };\n}\nexport interface ChannelMessageData {\n  channelId?: string;\n  date?: string;\n  time?: string;\n  timestamp?: any;\n  senderId: string;\n  senderName?: string;\n  senderAvatar?: string ;\n  content: {\n    text: string;\n    image?: string;\n    emojis?: any[];\n  };\n  messageFormat: string; \n}\n\n\n\nexport type ReplyCountsMap = Record;\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessageContent.html":{"url":"interfaces/MessageContent.html","title":"interface - MessageContent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MessageContent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message.models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            edited\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emojis\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            image\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edited\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edited:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emojis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emojis:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:     string | ArrayBuffer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | ArrayBuffer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Message {\n  id?: string;\n  content: MessageContent;\n  timestamp: any;\n  senderId: string;\n  time: string;\n  date?: string | { seconds: number; nanoseconds: number };\n  recipientId?: string;\n  channelId?: string;\n  conversationId?: string;\n  formattedDate?: string;\n  replyCount?: number;\n  lastResponseTime?: any;\n  channelName?: string;\n  threadChannelId?: string;\n  parentId?: string;\n  isHighlighted?: boolean;\n  isEditing?: boolean;\n  isEmojiPickerVisible?: boolean;\n  showAllEmojisList?: boolean;\n  expanded?: boolean;\n  type?: string;\n  threadId?: string;\n  lastReplyTime?: any;\n  recipientName?: string;\n  showDateSeparator?: boolean; \n  edited?: boolean;\n}\nexport interface MessageContent {\n  text?: string;\n  image?: string | ArrayBuffer | null;\n  emojis?: Array;\n  edited?: boolean;\n}\n\nexport interface FirestoreMessageData {\n  content?: {\n    emojis?: Array;\n  };\n}\nexport interface ChannelMessageData {\n  channelId?: string;\n  date?: string;\n  time?: string;\n  timestamp?: any;\n  senderId: string;\n  senderName?: string;\n  senderAvatar?: string ;\n  content: {\n    text: string;\n    image?: string;\n    emojis?: any[];\n  };\n  messageFormat: string; \n}\n\n\n\nexport type ReplyCountsMap = Record;\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageCrudService.html":{"url":"injectables/MessageCrudService.html","title":"injectable - MessageCrudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageCrudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message-crud.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildMessagePayload\n                            \n                            \n                                    Private\n                                buildQueryByType\n                            \n                            \n                                    Private\n                                buildQueryForId\n                            \n                            \n                                    Private\n                                    Async\n                                commitMessage\n                            \n                            \n                                    Async\n                                getMessage\n                            \n                            \n                                getMessages\n                            \n                            \n                                    Async\n                                getMessagesOnce\n                            \n                            \n                                    Private\n                                mapMessagesOnce\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                    Private\n                                validateThreadChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/message-crud.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildMessagePayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildMessagePayload(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildQueryByType\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildQueryByType(type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildQueryForId\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildQueryForId(type: \"private\" | \"thread\" | \"thread-channel\", id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        commitMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    commitMessage(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessage(type: \"private\" | \"channel\" | \"thread\" | \"thread-channel\", messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"channel\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(channelId: string, threadChannelId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                threadChannelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMessagesOnce\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessagesOnce(type: \"private\" | \"thread\" | \"thread-channel\", id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapMessagesOnce\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapMessagesOnce(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateThreadChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateThreadChannel(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-crud.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  addDoc,\n  query,\n  where,\n  getDocs,\n  doc,\n  orderBy,\n  getDoc,\n} from '@angular/fire/firestore';\nimport { serverTimestamp } from 'firebase/firestore';\nimport { Observable } from 'rxjs';\nimport { collectionData } from '@angular/fire/firestore';\nimport { MessageContent, Message } from './message.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageCrudService {\n  constructor(private firestore: Firestore) {}\n\n  async sendMessage(data: {\n    type: 'thread' | 'private' | 'thread-channel';\n    threadChannelId?: string;\n    conversationId?: string;\n    channelId?: string;\n    content?: MessageContent;\n    senderId?: string;\n    parentId?: string;\n    senderName?: string;\n    senderAvatar?: string;\n    recipientId?: string;\n  }): Promise {\n    this.validateThreadChannel(data);\n    const messagePayload = this.buildMessagePayload(data);\n    return await this.commitMessage(messagePayload);\n  }\n\n  getMessages(channelId: string, threadChannelId?: string): Observable {\n    const messagesCollection = collection(this.firestore, 'messages');\n    let qRef;\n    if (threadChannelId) {\n      qRef = query(\n        messagesCollection,\n        where('threadChannelId', '==', threadChannelId),\n        orderBy('timestamp', 'asc')\n      );\n    } else {\n      qRef = query(\n        messagesCollection,\n        where('channelId', '==', channelId),\n        where('threadChannelId', '==', null),\n        orderBy('timestamp', 'asc')\n      );\n    }\n    return collectionData(qRef, { idField: 'id' }) as Observable;\n  }\n\n  async getMessagesOnce(\n    type: 'private' | 'thread' | 'thread-channel',\n    id?: string\n  ): Promise {\n    const queryRef = id\n      ? this.buildQueryForId(type, id)\n      : this.buildQueryByType(type);\n    const snapshot = await getDocs(queryRef);\n    return this.mapMessagesOnce(snapshot);\n  }\n\n  private async commitMessage(payload: any): Promise {\n    const messagesRef = collection(this.firestore, 'messages');\n    const docRef = await addDoc(messagesRef, payload);\n    return docRef.id;\n  }\n\n  async getMessage(\n    type: 'private' | 'channel' | 'thread' | 'thread-channel',\n    messageId: string\n  ): Promise {\n    try {\n      const docRef = doc(this.firestore, 'messages', messageId);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        const data = docSnap.data();\n        return {\n          ...data,\n          id: docSnap.id,\n          timestamp: data['timestamp']?.toDate(),\n        } as Message;\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  private validateThreadChannel(data: any): void {\n    if (data.type === 'thread-channel' && !data.threadChannelId) {\n      throw new Error('Missing `threadChannelId` for thread-channel message');\n    }\n  }\n\n  private buildMessagePayload(data: any): any {\n    return {\n      ...data,\n      timestamp: serverTimestamp(),\n      channelId: data.channelId ?? null,\n      threadChannelId: data.threadChannelId ?? null,\n    };\n  }\n\n  private buildQueryForId(\n    type: 'private' | 'thread' | 'thread-channel',\n    id: string\n  ) {\n    const messagesRef = collection(this.firestore, 'messages');\n    let filterField = '';\n    if (type === 'private') filterField = 'conversationId';\n    else if (type === 'thread-channel') filterField = 'threadChannelId';\n    else filterField = 'threadId';\n\n    return query(\n      messagesRef,\n      where('type', '==', type),\n      where(filterField, '==', id),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private buildQueryByType(type: 'private' | 'thread' | 'thread-channel') {\n    const messagesRef = collection(this.firestore, 'messages');\n    return query(\n      messagesRef,\n      where('type', '==', type),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private mapMessagesOnce(snapshot: any): any[] {\n    return snapshot.docs.map((docSnap: any) => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        ...data,\n        time: data['timestamp']?.toDate?.() ?? null,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageQueriesService.html":{"url":"injectables/MessageQueriesService.html","title":"injectable - MessageQueriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageQueriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/message-queries.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildListenForMessagesQuery\n                            \n                            \n                                    Private\n                                buildListenMessagesQuery\n                            \n                            \n                                    Private\n                                buildPrivateQuery\n                            \n                            \n                                    Private\n                                buildQueryByType\n                            \n                            \n                                    Private\n                                buildQueryForId\n                            \n                            \n                                    Private\n                                buildThreadChannelQuery\n                            \n                            \n                                    Private\n                                buildThreadQuery\n                            \n                            \n                                    Public\n                                getMessages\n                            \n                            \n                                    Public\n                                    Async\n                                getMessagesOnce\n                            \n                            \n                                    Public\n                                listenForMessages\n                            \n                            \n                                    Public\n                                listenMessages\n                            \n                            \n                                    Private\n                                mapMessagesDocs\n                            \n                            \n                                    Private\n                                mapMessagesOnce\n                            \n                            \n                                    Private\n                                mapSnapshotDocs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/message-queries.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildListenForMessagesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildListenForMessagesQuery(type: \"private\" | \"thread\" | \"thread-channel\", parentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildListenMessagesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildListenMessagesQuery(type: \"private\" | \"thread\" | \"thread-channel\", id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildPrivateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildPrivateQuery(messagesRef: any, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messagesRef\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildQueryByType\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildQueryByType(type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildQueryForId\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildQueryForId(type: \"private\" | \"thread\" | \"thread-channel\", id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildThreadChannelQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildThreadChannelQuery(messagesRef: any, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messagesRef\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildThreadQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildThreadQuery(messagesRef: any, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messagesRef\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessages(channelId: string, threadChannelId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                threadChannelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getMessagesOnce\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessagesOnce(type: \"private\" | \"thread\" | \"thread-channel\", id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    listenForMessages(type: \"private\" | \"thread\" | \"thread-channel\", parentId: string, callback: (messages: any[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        listenMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    listenMessages(type: \"private\" | \"thread\" | \"thread-channel\", id: string, callback: (messages: any[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapMessagesDocs\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapMessagesDocs(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapMessagesOnce\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapMessagesOnce(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapSnapshotDocs\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapSnapshotDocs(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/message-queries.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  query,\n  where,\n  orderBy,\n  onSnapshot,\n} from '@angular/fire/firestore';\nimport { getDocs } from '@angular/fire/firestore';\nimport { collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageQueriesService {\n  constructor(private firestore: Firestore) {}\n\n  private buildListenForMessagesQuery(\n    type: 'private' | 'thread' | 'thread-channel',\n    parentId: string\n  ) {\n    const ref = collection(this.firestore, 'messages');\n    let baseQ = query(ref, where('type', '==', type));\n    if (type === 'thread-channel') {\n      baseQ = query(baseQ, where('threadChannelId', '==', parentId));\n    } else {\n      baseQ = query(baseQ, where('parentId', '==', parentId));\n    }\n    return query(baseQ, orderBy('timestamp', 'asc'));\n  }\n\n  public getMessages(\n    channelId: string,\n    threadChannelId?: string\n  ): Observable {\n    const messagesCollection = collection(this.firestore, 'messages');\n    let qRef;\n    if (threadChannelId) {\n      qRef = query(\n        messagesCollection,\n        where('threadChannelId', '==', threadChannelId),\n        orderBy('timestamp', 'asc')\n      );\n    } else {\n      qRef = query(\n        messagesCollection,\n        where('channelId', '==', channelId),\n        where('threadChannelId', '==', null),\n        orderBy('timestamp', 'asc')\n      );\n    }\n    return collectionData(qRef, { idField: 'id' }) as Observable;\n  }\n\n  public async getMessagesOnce(\n    type: 'private' | 'thread' | 'thread-channel',\n    id?: string\n  ): Promise {\n    const queryRef = id\n      ? this.buildQueryForId(type, id)\n      : this.buildQueryByType(type);\n    const snapshot = await getDocs(queryRef);\n    return this.mapMessagesOnce(snapshot);\n  }\n\n  public listenMessages(\n    type: 'private' | 'thread' | 'thread-channel',\n    id: string,\n    callback: (messages: any[]) => void\n  ): () => void {\n    const queryRef = this.buildListenMessagesQuery(type, id);\n    if (!queryRef) return () => {};\n    const unsubscribe = onSnapshot(\n      queryRef,\n      (snapshot) => callback(this.mapMessagesDocs(snapshot)),\n      () => {}\n    );\n    return unsubscribe;\n  }\n\n  private buildListenMessagesQuery(\n    type: 'private' | 'thread' | 'thread-channel',\n    id: string\n  ) {\n    const messagesRef = collection(this.firestore, 'messages');\n\n    if (type === 'private') {\n      return this.buildPrivateQuery(messagesRef, id);\n    } else if (type === 'thread') {\n      return this.buildThreadQuery(messagesRef, id);\n    } else if (type === 'thread-channel') {\n      return this.buildThreadChannelQuery(messagesRef, id);\n    }\n    return null;\n  }\n\n  private buildPrivateQuery(messagesRef: any, id: string) {\n    return query(\n      messagesRef,\n      where('type', '==', 'private'),\n      where('conversationId', '==', id),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private buildThreadQuery(messagesRef: any, id: string) {\n    return query(\n      messagesRef,\n      where('type', '==', 'thread'),\n      where('threadId', '==', id),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private buildThreadChannelQuery(messagesRef: any, id: string) {\n    return query(\n      messagesRef,\n      where('type', '==', 'thread-channel'),\n      where('threadChannelId', '==', id),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private mapMessagesDocs(snapshot: any): any[] {\n    return snapshot.docs.map((docSnap: any) => ({\n      id: docSnap.id,\n      ...docSnap.data(),\n    }));\n  }\n\n  public listenForMessages(\n    type: 'private' | 'thread' | 'thread-channel',\n    parentId: string,\n    callback: (messages: any[]) => void\n  ): () => void {\n    const queryRef = this.buildListenForMessagesQuery(type, parentId);\n    const unsubscribe = onSnapshot(queryRef, (snap) =>\n      callback(this.mapSnapshotDocs(snap))\n    );\n    return unsubscribe;\n  }\n\n  private mapSnapshotDocs(snapshot: any): any[] {\n    return snapshot.docs.map((docSnap: any) => ({\n      id: docSnap.id,\n      ...docSnap.data(),\n    }));\n  }\n\n  private buildQueryForId(\n    type: 'private' | 'thread' | 'thread-channel',\n    id: string\n  ) {\n    const messagesRef = collection(this.firestore, 'messages');\n    let filterField = '';\n    if (type === 'private') filterField = 'conversationId';\n    else if (type === 'thread-channel') filterField = 'threadChannelId';\n    else filterField = 'threadId';\n\n    return query(\n      messagesRef,\n      where('type', '==', type),\n      where(filterField, '==', id),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private buildQueryByType(type: 'private' | 'thread' | 'thread-channel') {\n    const messagesRef = collection(this.firestore, 'messages');\n    return query(\n      messagesRef,\n      where('type', '==', type),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private mapMessagesOnce(snapshot: any): any[] {\n    return snapshot.docs.map((docSnap: any) => ({\n      id: docSnap.id,\n      ...docSnap.data(),\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MyState.html":{"url":"interfaces/MyState.html","title":"interface - MyState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MyState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/entwicklerteam/entwicklerteam-private-methods.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EntwicklerteamComponent\n            \n\n\n\n\n    \n\n\n    \n        import { EntwicklerteamComponent } from './entwicklerteam.component'\n\nexport interface MyState extends EntwicklerteamComponent {}\n\nexport function unsubscribeFromBoth(c: MyState): void {\n  if (c.unsubscribeTopLevel) {\n    c.unsubscribeTopLevel.unsubscribe()\n    c.unsubscribeTopLevel = undefined\n  }\n  if (c.unsubscribeSubCollection) {\n    c.unsubscribeSubCollection.unsubscribe()\n    c.unsubscribeSubCollection = undefined\n  }\n}\n\nexport function initChannel(c: MyState, ch: any): void {\n  c.channels = [\n    { id: ch.id, name: ch.name, members: ch.members, description: ch.description, createdBy: ch.createdBy || '' }\n  ]\n  c.channels = c.channels.map(x => x.id === ch.id ? { ...x, members: ch.members, name: ch.name } : x)\n  c.selectedChannel = ch\n  \n\n  loadLastUsedEmojis(c, ch.id)\n  setTimeout(() => {\n    if (!c.dialog.openDialogs.length) c.onFocusTextArea()\n  }, 0)\n}\n\nexport function loadLastUsedEmojis(c: MyState, channelId: string): void {\n  c.channelService.getLastUsedEmojis(channelId, 'sent').then(s => { c.lastUsedEmojisSent = s || [] })\n  c.channelService.getLastUsedEmojis(channelId, 'received').then(r => { c.lastUsedEmojisReceived = r || [] })\n}\n\nexport function connectReplyCountsToMessages(c: MyState, msgs: any[]): void {\n  msgs.forEach(msg => {\n    const tId = msg.threadId || msg.parentId || msg.id\n    if (!tId) return\n    c.messageService.loadReplyCountsLive([tId], 'thread-channel', rc => {\n      const { count, lastResponseTime } = rc[tId] || { count: 0, lastResponseTime: null }\n      msg.replyCount = count\n      msg.threadLastResponseTime = lastResponseTime || msg.threadLastResponseTime\n      if (msg.threadLastResponseTime) msg.lastReplyTime = new Date(msg.threadLastResponseTime)\n    })\n  })\n}\n\nexport function findEmojiIndex(c: MyState, message: any, e: string): number {\n  if (!message?.content?.emojis) return -1\n  return message.content.emojis.findIndex((x: any) => x.emoji === e)\n}\n\nexport function removeEmojiAtIndex(c: MyState, message: any, i: number): void {\n  message.content.emojis.splice(i, 1)\n}\n\nexport function updateMessageInFirestore(c: MyState, message: any): void {\n  if (!message.id) {\n    c.hideTooltip()\n    return\n  }\n  c.messageService\n    .updateMessage(message.id, { content: message.content })\n    .then(() => c.hideTooltip())\n    .catch(() => c.hideTooltip())\n}\n\nexport function removeEmojiFromMessage(c: MyState, message: any, e: string): void {\n  const i = findEmojiIndex(c, message, e)\n  if (i === -1) return\n  removeEmojiAtIndex(c, message, i)\n  updateMessageInFirestore(c, message)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewPasswortComponent.html":{"url":"components/NewPasswortComponent.html","title":"component - NewPasswortComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NewPasswortComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-passwort/new-passwort.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-passwort\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                                HeaderComponent\n                                FooterComponent\n                            RouterModule\n                \n            \n\n            \n                styleUrls\n                ./new-passwort.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./new-passwort.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                newPasswordForm\n                            \n                            \n                                    Private\n                                oobCode\n                            \n                            \n                                submitted\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getErrorMessage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, fb: FormBuilder, router: Router, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-passwort/new-passwort.component.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nUtility for creating and managing form controls.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular router for navigation.\n\n\n                                                        \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nUsed to read the query parameters (oobCode).\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \ngetErrorMessage(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/new-passwort/new-passwort.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Retrieves a user-friendly error message based on Firebase's error codes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object caught during password reset.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nA descriptive error message for display.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/new-passwort/new-passwort.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the component by subscribing\nto query parameters and form value changes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/new-passwort/new-passwort.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Called when the user submits the form. Validates password\nmatch and uses Firebase Auth to confirm the password reset\nif valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatch\n                        \n                    \n                \n            \n            \n                \npasswordsMatch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/new-passwort/new-passwort.component.ts:131\n                        \n                    \n\n\n            \n                \n                        Checks if newPassword and confirmPassword fields contain the same value.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nTrue if both fields match; false otherwise.\n\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/new-passwort/new-passwort.component.ts:41\n                        \n                    \n\n            \n                \n                    Displays any error message encountered during the password reset process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPasswordForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/new-passwort/new-passwort.component.ts:36\n                        \n                    \n\n            \n                \n                    A reactive form group containing newPassword and confirmPassword fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oobCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/new-passwort/new-passwort.component.ts:51\n                        \n                    \n\n            \n                \n                    The out-of-band code (oobCode) passed through query parameters for password reset.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/new-passwort/new-passwort.component.ts:56\n                        \n                    \n\n            \n                \n                    Indicates whether the form has been submitted (used to manage error resetting).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/new-passwort/new-passwort.component.ts:46\n                        \n                    \n\n            \n                \n                    Displays a success message once the password is successfully reset.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Auth, confirmPasswordReset } from '@angular/fire/auth';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HeaderComponent } from '../header/header.component';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-new-passwort',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HeaderComponent,\n    FooterComponent,\n    RouterModule\n  ],\n  templateUrl: './new-passwort.component.html',\n  styleUrls: ['./new-passwort.component.scss']\n})\nexport class NewPasswortComponent implements OnInit {\n  /**\n   * A reactive form group containing newPassword and confirmPassword fields.\n   */\n  newPasswordForm: FormGroup;\n\n  /**\n   * Displays any error message encountered during the password reset process.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Displays a success message once the password is successfully reset.\n   */\n  successMessage: string = '';\n\n  /**\n   * The out-of-band code (oobCode) passed through query parameters for password reset.\n   */\n  private oobCode: string | null = null;\n\n  /**\n   * Indicates whether the form has been submitted (used to manage error resetting).\n   */\n  submitted: boolean = false;\n\n  /**\n   * @param {Auth} auth - Firebase Auth instance.\n   * @param {FormBuilder} fb - Utility for creating and managing form controls.\n   * @param {Router} router - The Angular router for navigation.\n   * @param {ActivatedRoute} route - Used to read the query parameters (oobCode).\n   */\n  constructor(\n    private auth: Auth,\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.newPasswordForm = this.fb.group({\n      newPassword: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Lifecycle hook that initializes the component by subscribing \n   * to query parameters and form value changes.\n   */\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.oobCode = params['oobCode'] || null;\n    });\n\n    this.newPasswordForm.valueChanges.subscribe(() => {\n      if (this.submitted) {\n        this.errorMessage = '';\n      }\n    });\n  }\n\n  /**\n   * Called when the user submits the form. Validates password \n   * match and uses Firebase Auth to confirm the password reset \n   * if valid.\n   */\n  async onSubmit() {\n    this.submitted = true;\n\n    if (!this.passwordsMatch()) {\n      this.errorMessage = 'Die Passwörter stimmen nicht überein.';\n      return;\n    }\n\n    if (this.newPasswordForm.valid && this.oobCode) {\n      const newPassword = this.newPasswordForm.value.newPassword;\n\n      try {\n        await confirmPasswordReset(this.auth, this.oobCode, newPassword);\n        this.successMessage = 'Ihr Passwort wurde zurückgesetzt.';\n        this.errorMessage = '';\n        this.newPasswordForm.reset();\n        this.submitted = false;\n\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 3000);\n      } catch (error: any) {\n        this.successMessage = '';\n        this.errorMessage = this.getErrorMessage(error);\n        this.newPasswordForm.reset();\n      }\n    }\n  }\n\n  /**\n   * Checks if newPassword and confirmPassword fields contain the same value.\n   *\n   * @returns {boolean} - True if both fields match; false otherwise.\n   */\n  passwordsMatch(): boolean {\n    const password = this.newPasswordForm.get('newPassword')?.value;\n    const confirmPassword = this.newPasswordForm.get('confirmPassword')?.value;\n    return password === confirmPassword;\n  }\n\n  /**\n   * Retrieves a user-friendly error message based on Firebase's error codes.\n   *\n   * @param {any} error - The error object caught during password reset.\n   * @returns {string} - A descriptive error message for display.\n   */\n  getErrorMessage(error: any): string {\n    switch (error.code) {\n      case 'auth/invalid-action-code':\n        return 'Der Link ist ungültig oder abgelaufen.';\n      case 'auth/expired-action-code':\n        return 'Der Link ist abgelaufen.';\n      default:\n        return 'Ein unbekannter Fehler ist aufgetreten.';\n    }\n  }\n}\n\n\n\n    \n\n    \n        \n  \n  \n    \n      \n        \n          \n            Passwort zurücksetzen\n            \n              \n                \n              \n            \n          \n        \n\n        \n          \n            \n          \n\n          \n            \n          \n\n          \n            {{ errorMessage }}\n          \n\n          \n            {{ errorMessage }}\n          \n\n          \n            \n              Passwort ändern\n            \n          \n        \n      \n    \n    \n      \n      \n        {{ successMessage }}\n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./new-passwort.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.page {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.container {\n  @include dFlex(center, center, null);\n  width: 100%;\n  background-color: $lightblue;\n  flex-direction: column;\n  flex: 1;\n  padding: 2rem;\n  box-sizing: border-box;\n}\n\n.login-container {\n  text-align: center;\n  background-color: white;\n  border-radius: 30px;\n  box-shadow: 0px 2px 10px 0px #00000014;\n  max-width: 692px;\n  width: 100%;\n  position: relative;\n\n  .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 40px 40px;\n\n    .box {\n      @include dFlex(null, null, 20px);\n      flex-direction: column;\n      max-width: 512px;\n      width: 100%;\n    }\n\n    .konto-container {\n      @include dFlex(null, center, null);\n      flex-direction: row-reverse;\n    }\n\n    .image-container {\n      position: absolute;\n      top: 45px;\n      left: 32px;\n      border-radius: 50%;\n      width: 40px;\n      height: 40px;\n      transition: background-color 0.3s;\n      overflow: hidden;\n      z-index: 1;\n      align-content: center;\n\n      &:hover {\n        filter: brightness(100%);\n        background-color: $lightblue;\n      }\n\n      img {\n        object-fit: cover;\n        border-radius: 50%;\n        transition: transform 0.3s;\n        cursor: pointer;\n\n        &:hover {\n          filter: brightness(0) saturate(100%) invert(35%) sepia(62%)\n            saturate(2733%) hue-rotate(225deg) brightness(93%) contrast(104%);\n        }\n      }\n    }\n\n    h2 {\n      color: $button-blue;\n      font-size: 46px;\n      font-weight: 700;\n      margin: 0;\n      flex-grow: 1;\n      text-align: center;\n      max-width: 491px;\n      width: 100%;\n      line-height: 55.2px;\n    }\n\n    p {\n      color: black;\n      font-size: 20px;\n      font-weight: 400;\n      margin: 0;\n    }\n\n    a {\n      color: $middleblue;\n      font-size: 18px;\n      font-weight: 400;\n      text-decoration: none;\n      transition: background-color 0.3s, border-radius 0.3s, padding 0.3s;\n    }\n\n    .button-container {\n      @include dFlex(flex-end, null, null);\n      max-width: 500px;\n      width: 100%;\n\n      .error-message p {\n        color: red !important;\n        font-weight: bold;\n        width: 70%;\n      }\n\n      .success-message p {\n        color: green;\n        font-weight: bold;\n      }\n    }\n\n    form {\n      max-width: 500px;\n      width: 100%;\n\n      input {\n        background: $lightblue;\n        border-radius: 100px;\n        color: #686868;\n        font-size: 18px;\n        font-weight: 500;\n        height: 60px;\n        width: 100%;\n        border: 1px solid transparent;\n        cursor: pointer;\n        box-sizing: border-box;\n        max-width: 500px;\n        padding: 18px 40px;\n\n        &:hover {\n          border-color: #686868;\n          transition: border-color 0.3s;\n        }\n\n        &:focus,\n        &:focus-within {\n          outline: none;\n          border-color: $button-blue;\n        }\n\n        &:not(:focus) {\n          &:has(+ input:focus) {\n            border-color: blue;\n          }\n        }\n      }\n\n      .error-message {\n        font-size: 14px;\n        color: #ed1e79;\n        font-weight: 400;\n        text-align: left;\n        text-align: center;\n        width: 100%;\n        max-width: 320px;\n        align-items: flex-end;\n        display: flex;\n        padding-left:50px;\n      }\n\n      .input-container {\n        margin-top: 40px;\n      }\n    }\n  }\n}\n\n.button-anmelden {\n  width: 188px;\n  font-size: 16px;\n  margin-top: 40px;\n}\n\n.registration-ok {\n  gap: 28px;\n}\n\n@media (max-width: 1278px) {\n   .container{\n      padding:8px 0 0 0;\n    }\n}\n\n@media (max-width: 780px) {\n  .login-container .login .image-container {\n    width: unset;\n  }\n\n  .box {\n    @include dFlex(null, null, 10px);\n    flex-direction: column;\n    max-width: 345px;\n    width: 100px;\n  }\n\n  .login-container .login .image-container {\n    left: 22px;\n  }\n\n  .login-container {\n    width: unset;\n  }\n\n  .container {\n    box-sizing: border-box;\n  }\n\n  .login-container .login p {\n    margin: 0 auto;\n    padding: unset;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    max-width: 320px;\n  }\n\n  .login-container .login form .error-message {\n    font-size: 11px;\n  }\n\n  .login-container .login form .input-container input {\n    font-size: 14px;\n  }\n\n  .login-container .login form .input-container {\n    margin-top: 20px;\n  }\n\n  .button-container {\n    gap: 30px;\n  }\n\n  .login-container .login .box {\n    gap: 20px;\n    max-width: 346px;\n  }\n\n  .login-container .login form {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .login-container .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .login-container .login h2 {\n    line-height: 35.2px;\n  }\n\n  .login-container .login h2 {\n    font-size: 36px;\n  }\n}\n\n@media (max-width: 780px) {\n  .button-anmelden {\n    margin-top: 20px;\n  }\n}\n\n@media (max-width: 520px) {\n  .login-container .login .image-container {\n    top: unset;\n  }\n\n  .registration-ok {\n    padding: unset;\n    gap: unset;\n    img {\n      padding: 10px;\n    }\n  }\n\n  .login-container .login h2 {\n    font-size: 30px;\n    width: 100%;\n    max-width: 300px;\n    line-height: 35.2px;\n  }\n\n  .login-container .login .box {\n    gap: 10px;\n  }\n\n  .login-container .login .image-container {\n    height: 30px;\n  }\n\n  .login-container .login .konto-container {\n    flex-direction: column;\n  }\n\n  .login-container .login p {\n    width: 300px;\n    justify-content: center;\n  }\n\n  .login-container .login .button-container {\n    gap: 10px;\n  }\n\n  .login-container .login {\n    padding: unset;\n  }\n\n  .login-container {\n    padding: 20px;\n  }\n\n  .login-container .login form .input-container input {\n    height: 40px;\n  }\n\n  .login-container .login form {\n    max-width: 300px;\n  }\n}\n\n@media (max-width: 390px) {\n  .login-container .login {\n    width: 260px;\n  }\n\n  .login-container .login p {\n    width: 260px;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            Passwort zurücksetzen                                                                                                                                                                                    {{ errorMessage }}                                {{ errorMessage }}                                              Passwort ändern                                                                {{ successMessage }}              '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewPasswortComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PasswortResetComponent.html":{"url":"components/PasswortResetComponent.html","title":"component - PasswortResetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PasswortResetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/passwort-reset/passwort-reset.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-passwort-reset\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                                HeaderComponent\n                                FooterComponent\n                            RouterModule\n                \n            \n\n            \n                styleUrls\n                ./passwort-reset.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./passwort-reset.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailPattern\n                            \n                            \n                                errorMessage\n                            \n                            \n                                filledStates\n                            \n                            \n                                isSmallScreen\n                            \n                            \n                                resetPasswordForm\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkEmailExists\n                            \n                            \n                                emailValidator\n                            \n                            \n                                getErrorMessage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBlur\n                            \n                            \n                                onFocus\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, auth: Auth, router: Router, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirestore service for database checks.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth service for password reset.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nUtility for constructing the reactive form.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkEmailExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkEmailExists(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Checks Firestore to see if the given email exists in the 'users' collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nTrue if email is found, otherwise false.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailValidator\n                        \n                    \n                \n            \n            \n                \nemailValidator(control: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Validates an email string using a regex pattern.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \nError object if invalid, or null if valid.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \ngetErrorMessage(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:209\n                        \n                    \n\n\n            \n                \n                        Translates Firebase error codes into user-friendly messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe caught error object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nA string describing the error.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that currently has no additional logic.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBlur\n                        \n                    \n                \n            \n            \n                \nonBlur(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Marks the specified form field as filled or unfilled on blur,\nbased on whether it has a value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the form field.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onFocus\n                        \n                    \n                \n            \n            \n                \nonFocus(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:131\n                        \n                    \n\n\n            \n                \n                        Marks the specified form field as filled and clears error messages if focusing on email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the form field.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:172\n                        \n                    \n\n\n            \n                \n                        Submits the form, checks if email exists, and if valid,\nsends a reset email. Displays success or error messages as needed,\nand navigates to '/new-passwort' after a short delay.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(email: string, actionCodeSettings: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/passwort-reset/passwort-reset.component.ts:159\n                        \n                    \n\n\n            \n                \n                        Sends a password reset email using Firebase Auth.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's email for reset.\n\n\n                                            \n                                        \n                                        \n                                                actionCodeSettings\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdditional settings for reset links.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailPattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:69\n                        \n                    \n\n            \n                \n                    A regex pattern for validating emails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds any error message that occurs during the reset process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filledStates\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:64\n                        \n                    \n\n            \n                \n                    Tracks which fields are filled for styling purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSmallScreen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:74\n                        \n                    \n\n            \n                \n                    Boolean to determine if the screen width is below 780px (mobile styling).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:49\n                        \n                    \n\n            \n                \n                    The reactive form containing the email field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/passwort-reset/passwort-reset.component.ts:59\n                        \n                    \n\n            \n                \n                    Holds a success message once the reset email is sent.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ReactiveFormsModule,\n  FormBuilder,\n  FormGroup,\n  Validators,\n  AbstractControl,\n  ValidationErrors\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Auth, sendPasswordResetEmail } from '@angular/fire/auth';\nimport { HeaderComponent } from '../header/header.component';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule } from '@angular/router';\nimport {\n  Firestore,\n  query,\n  where,\n  getDocs,\n  collection\n} from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-passwort-reset',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HeaderComponent,\n    FooterComponent,\n    RouterModule\n  ],\n  templateUrl: './passwort-reset.component.html',\n  styleUrls: ['./passwort-reset.component.scss']\n})\nexport class PasswortResetComponent implements OnInit {\n  /**\n   * The reactive form containing the email field.\n   */\n  resetPasswordForm: FormGroup;\n\n  /**\n   * Holds any error message that occurs during the reset process.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds a success message once the reset email is sent.\n   */\n  successMessage: string = '';\n\n  /**\n   * Tracks which fields are filled for styling purposes.\n   */\n  filledStates: { [key: string]: boolean } = {};\n\n  /**\n   * A regex pattern for validating emails.\n   */\n  emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  /**\n   * Boolean to determine if the screen width is below 780px (mobile styling).\n   */\n  isSmallScreen: boolean = window.innerWidth } - True if email is found, otherwise false.\n   */\n  async checkEmailExists(email: string): Promise {\n    const usersCollection = collection(this.firestore, 'users');\n    const q = query(usersCollection, where('email', '==', email));\n    const querySnapshot = await getDocs(q);\n\n    return !querySnapshot.empty;\n  }\n\n  /**\n   * Marks the specified form field as filled and clears error messages if focusing on email.\n   *\n   * @param {string} field - The name of the form field.\n   */\n  onFocus(field: string) {\n    this.filledStates[field + 'Filled'] = true;\n\n    if (field === 'email') {\n      this.errorMessage = '';\n      this.successMessage = '';\n    }\n  }\n\n  /**\n   * Marks the specified form field as filled or unfilled on blur,\n   * based on whether it has a value.\n   *\n   * @param {string} field - The name of the form field.\n   */\n  onBlur(field: string) {\n    this.filledStates[field + 'Filled'] = Boolean(\n      this.resetPasswordForm.get(field)?.value\n    );\n  }\n\n  /**\n   * Sends a password reset email using Firebase Auth.\n   *\n   * @param {string} email - The user's email for reset.\n   * @param {any} actionCodeSettings - Additional settings for reset links.\n   */\n \n  async resetPassword(email: string, actionCodeSettings: any): Promise {\n    try {\n      await sendPasswordResetEmail(this.auth, email, actionCodeSettings);\n    } catch (error: any) {\n      throw new Error(this.getErrorMessage(error));\n    }\n  }\n  \n  /**\n   * Submits the form, checks if email exists, and if valid,\n   * sends a reset email. Displays success or error messages as needed,\n   * and navigates to '/new-passwort' after a short delay.\n   */\n  async onSubmit() {\n    if (this.resetPasswordForm.valid) {\n      const email = this.resetPasswordForm.value.email;\n\n      const emailExists = await this.checkEmailExists(email);\n      if (!emailExists) {\n        this.errorMessage = 'Diese E-Mail-Adresse ist nicht registriert.';\n        return;\n      }\n\n      const actionCodeSettings = {\n        url: 'http://localhost:4200/new-passwort',\n        handleCodeInApp: true\n      };\n\n      try {\n        await this.resetPassword(email, actionCodeSettings);\n        this.successMessage = 'E-Mail gesendet';\n        this.errorMessage = '';\n        setTimeout(() => {\n          this.successMessage = '';\n          this.router.navigate(['/new-passwort']);\n        }, 3000);\n      } catch (error: any) {\n        this.successMessage = '';\n        this.errorMessage = error.message;\n      }\n    }\n  }\n\n  /**\n   * Translates Firebase error codes into user-friendly messages.\n   *\n   * @param {any} error - The caught error object.\n   * @returns {string} - A string describing the error.\n   */\n \n  getErrorMessage(error: any): string {\n    switch (error.code) {\n      case 'auth/invalid-email':\n        return 'Die angegebene E-Mail-Adresse ist ungültig.';\n      case 'auth/user-not-found':\n        return 'Es gibt keinen Benutzer mit dieser E-Mail-Adresse.';\n      case 'auth/too-many-requests':\n        return 'Zu viele Anfragen in kurzer Zeit. Bitte versuche es später erneut.';\n      default:\n        return 'Ein unbekannter Fehler ist aufgetreten.';\n    }\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n        \n          \n            Passwort zurücksetzen\n            \n              \n                \n              \n            \n          \n          Bitte geben Sie Ihre E-Mail-Adresse ein.\n        \n\n        \n          \n            \n\n            \n          \n          \n            \n              {{ errorMessage }}\n            \n          \n          \n            \n              *Bitte füllen Sie das E-Mail-Feld aus.\n            \n            \n              Diese E-Mail-Adresse ist leider ungültig.\n            \n          \n          \n            \n              Wir senden Ihnen eine E-Mail, über die Sie Ihre Passwort ändern\n              können.\n            \n          \n\n          \n            \n              E-Mail senden\n            \n          \n        \n      \n    \n    \n      \n      \n        {{ successMessage }}\n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./passwort-reset.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.page {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.container {\n  @include dFlex(center, center, null);\n  width: 100%;\n  background-color: $lightblue;\n  flex-direction: column;\n  flex: 1;\n  padding: 2rem;\n  box-sizing: border-box;\n}\n\n.login-container {\n  text-align: center;\n  background-color: white;\n  border-radius: 30px;\n  box-shadow: 0px 2px 10px 0px #00000014;\n  max-width: 698px;\n  width: 100%;\n  position: relative;\n\n  .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 40px 40px;\n\n    .box {\n      @include dFlex(null, null, 20px);\n      flex-direction: column;\n      max-width: 512px;\n      width: 100%;\n    }\n\n    .konto-container {\n      @include dFlex(null, center, null);\n      flex-direction: row-reverse;\n    }\n\n    .image-container {\n      position: absolute;\n      top: 45px;\n      left: 32px;\n      border-radius: 50%;\n      width: 40px;\n      height: 40px;\n      transition: background-color 0.3s;\n      overflow: hidden;\n      z-index: 1;\n      align-content: center;\n\n      &:hover {\n        filter: brightness(100%);\n        background-color: $lightblue;\n      }\n\n      img {\n        object-fit: cover;\n        border-radius: 50%;\n        transition: transform 0.3s;\n        cursor: pointer;\n\n        &:hover {\n          filter: brightness(0) saturate(100%) invert(35%) sepia(62%)\n            saturate(2733%) hue-rotate(225deg) brightness(93%) contrast(104%);\n        }\n      }\n    }\n\n    h2 {\n      color: $button-blue;\n      font-size: 46px;\n      font-weight: 700;\n      margin: 0;\n      flex-grow: 1;\n      text-align: center;\n      max-width: 491px;\n      width: 100%;\n      line-height: 55.2px;\n    }\n\n    p {\n      color: black;\n      font-size: 20px;\n      font-weight: 400;\n      margin: 0;\n    }\n\n    a {\n      color: $middleblue;\n      font-size: 18px;\n      font-weight: 400;\n      text-decoration: none;\n      transition: background-color 0.3s, border-radius 0.3s, padding 0.3s;\n    }\n\n    .button-container {\n      @include dFlex(flex-end, null, null);\n      max-width: 500px;\n      width: 100%;\n\n      .error-message p {\n        color: red !important;\n        font-weight: bold;\n        width: 70%;\n      }\n\n      .success-message p {\n        color: green;\n        font-weight: bold;\n      }\n    }\n\n    form {\n      max-width: 500px;\n      width: 100%;\n\n      input {\n        background: $lightblue;\n        border-radius: 100px;\n        color: #686868;\n        font-size: 18px;\n        font-weight: 500;\n        height: 60px;\n        width: 100%;\n        border: 1px solid transparent;\n        cursor: pointer;\n        box-sizing: border-box;\n        max-width: 500px;\n\n        &:hover {\n          border-color: #686868;\n          transition: border-color 0.3s;\n        }\n\n        &:focus,\n        &:focus-within {\n          outline: none;\n          border-color: $button-blue;\n        }\n\n        &:not(:focus) {\n          &:has(+ input:focus) {\n            border-color: blue;\n          }\n        }\n      }\n\n      .privacy-box {\n        @include dFlex(center, center, 8px);\n        width: 100%;\n\n        p {\n          @include dFlex(null, center, 4px);\n          color: #686868;\n          font-size: 20px;\n          font-weight: 400;\n          width: 100%;\n          max-width: 354px;\n          margin-top: 40px;\n        }\n      }\n\n      .error-message {\n        font-size: 14px;\n        color: #ed1e79;\n        font-weight: 400;\n        text-align: left;\n        text-align: center;\n        width: 100%;\n        max-width: 320px;\n        align-items: flex-end;\n        display: flex;\n        padding-left:50px;\n      }\n\n      .input-container {\n        margin-top: 40px;\n      }\n\n      .email-icon {\n        padding-left: 70px;\n      }\n    }\n  }\n}\n\n.icon-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  img {\n    position: absolute;\n    left: 15px;\n    width: 24px;\n    height: 24px;\n  }\n\n  input,\n  button {\n    padding-left: 50px;\n    height: 50px;\n    border-radius: 100px;\n    border: 1px solid #ccc;\n    width: 100%;\n  }\n}\n\n.button-anmelden {\n  width: 170px;\n  font-size: 16px;\n  margin-top: 40px;\n}\n\n.registration-ok {\n  max-width: 441px;\n  gap: 28px;\n}\n\n@media (max-width: 1278px) {\n  .registration-ok {\n    max-width: 269px !important;\n    width: 100%;\n    gap: 18px;\n  }\n\n  .container{\n  //  flex:none;\n     padding:8px 0 0 0 ;\n   }\n}\n\n@media (max-width: 780px) {\n  .login-container .login {\n    form {\n      .privacy-box p {\n        margin-top: 20px;\n        font-size: 14px;\n      }\n    }\n  }\n\n  .login-container .login .image-container {\n    width: unset;\n  }\n\n  .box {\n    @include dFlex(null, null, 10px);\n    flex-direction: column;\n    max-width: 345px;\n    width: 100px;\n  }\n\n  .login-container .login .image-container {\n    left: 22px;\n  }\n\n  .login-container {\n    width: unset;\n  }\n\n  .container {\n    box-sizing: border-box;\n  }\n\n  .login-container .login p {\n    margin: 0 auto;\n    padding: unset;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    max-width: 320px;\n  }\n\n  .login-container .login form .error-message {\n    font-size: 11px;\n  }\n\n  .login-container .login form .input-container input {\n    font-size: 14px;\n  }\n\n  .login-container .login form .input-container {\n    margin-top: 20px;\n  }\n\n  .button-container {\n    gap: 30px;\n  }\n\n  .login-container .login .box {\n    gap: 20px;\n    max-width: 346px;\n  }\n\n  .login-container .login form {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .login-container .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .login-container .login h2 {\n    line-height: 35.2px;\n  }\n\n  .login-container .login h2 {\n    font-size: 36px;\n  }\n\n  .button-anmelden {\n    margin-top: 20px;\n  }\n}\n\n@media (max-width: 520px) {\n  .login-container .login .image-container {\n    top: unset;\n  }\n\n  .registration-ok {\n    padding: unset;\n  }\n\n  .login-container .login h2 {\n    font-size: 30px;\n    width: 100%;\n    max-width: 300px;\n    line-height: 35.2px;\n  }\n\n  .login-container .login .box {\n    gap: 10px;\n  }\n\n  .login-container .login .image-container {\n    height: 30px;\n  }\n\n  .login-container .login .konto-container {\n    flex-direction: column;\n  }\n\n  .login-container .login p {\n    width: 300px;\n    justify-content: center;\n  }\n\n  .login-container .login .button-container {\n    gap: 10px;\n  }\n\n  .login-container .login {\n    padding: unset;\n  }\n\n  .login-container {\n    padding: 20px;\n  }\n\n  .login-container .login form .input-container input {\n    height: 40px;\n  }\n\n  .login-container .login form {\n    max-width: 300px;\n  }\n}\n\n@media (max-width: 390px) {\n  .login-container .login {\n    width: 260px;\n  }\n\n  .login-container .login p {\n    width: 260px;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            Passwort zurücksetzen                                                                                        Bitte geben Sie Ihre E-Mail-Adresse ein.                                                                                                {{ errorMessage }}                                                          *Bitte füllen Sie das E-Mail-Feld aus.                                      Diese E-Mail-Adresse ist leider ungültig.                                                          Wir senden Ihnen eine E-Mail, über die Sie Ihre Passwort ändern              können.                                                          E-Mail senden                                                                {{ successMessage }}              '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PasswortResetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyComponent.html":{"url":"components/PrivacyComponent.html","title":"component - PrivacyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/privacy/privacy.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FooterComponent\n                                HeaderComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/app/privacy/privacy.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/privacy/privacy.component.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/privacy/privacy.component.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { HeaderComponent } from '../header/header.component';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-privacy',\n  standalone: true,\n  imports: [FooterComponent,HeaderComponent],\n  templateUrl: './privacy.component.html',\n  styleUrl: './privacy.component.scss'\n})\nexport class PrivacyComponent implements OnInit  {\n\n  constructor(private location: Location){}\n  \n  ngOnInit(): void {\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n    \n\n    \n        \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n          \n           \n            \n              Datenschutzerklärung\n              \n            \n            \n              \n                Personenbezogene Daten (nachfolgend zumeist nur „Daten“ genannt)\n                werden von uns nur im Rahmen der Erforderlichkeit sowie zum\n                Zwecke der Bereitstellung eines funktionsfähigen und\n                nutzerfreundlichen Internetauftritts, inklusive seiner Inhalte\n                und der dort angebotenen Leistungen, verarbeitet.\n              \n\n              \n                Gemäß Art. 4 Ziffer 1. der Verordnung (EU) 2016/679, also der\n                Datenschutz-Grundverordnung (nachfolgend nur „DSGVO“ genannt),\n                gilt als „Verarbeitung“ jeder mit oder ohne Hilfe\n                automatisierter Verfahren ausgeführter Vorgang oder jede solche\n                Vorgangsreihe im Zusammenhang mit personenbezogenen Daten, wie\n                das Erheben, das Erfassen, die Organisation, das Ordnen, die\n                Speicherung, die Anpassung oder Veränderung, das Auslesen, das\n                Abfragen, die Verwendung, die Offenlegung durch Übermittlung,\n                Verbreitung oder eine andere Form der Bereitstellung, den\n                Abgleich oder die Verknüpfung, die Einschränkung, das Löschen\n                oder die Vernichtung.\n              \n\n              \n                Mit der nachfolgenden Datenschutzerklärung informieren wir Sie\n                insbesondere über Art, Umfang, Zweck, Dauer und Rechtsgrundlage\n                der Verarbeitung personenbezogener Daten, soweit wir entweder\n                allein oder gemeinsam mit anderen über die Zwecke und Mittel der\n                Verarbeitung entscheiden. Zudem informieren wir Sie nachfolgend\n                über die von uns zu Optimierungszwecken sowie zur Steigerung der\n                Nutzungsqualität eingesetzten Fremdkomponenten, soweit hierdurch\n                Dritte Daten in wiederum eigener Verantwortung verarbeiten.\n              \n            \n\n            \n              Unsere Datenschutzerklärung ist wie folgt gegliedert:\n\n              \n                I. Informationen über uns als Verantwortliche,\n                II. Rechte der Nutzer und Betroffenen, \n                III. Informationen zur Datenverarbeitung,\n              \n            \n\n            \n              I. Informationen über uns als Verantwortliche,\n\n              \n                Verantwortlicher Anbieter dieses Internetauftritts im\n                datenschutzrechtlichen Sinne ist:,\n              \n\n              Selcuk Kocyigit\n              Hochfelder Str.33\n              47226 Duisburg\n\n              Telefon: 017643203362E-Mail: selcuk.80&#64;outlook.de\n\n              II. Rechte der Nutzer und Betroffenen,\n\n              \n                Mit Blick auf die nachfolgend noch näher beschriebene\n                Datenverarbeitung haben die Nutzer und Betroffenen das Recht,\n              \n              \n                \n                  auf Bestätigung, ob sie betreffende Daten verarbeitet werden,\n                  auf Auskunft über die verarbeiteten Daten, auf weitere\n                  Informationen über die Datenverarbeitung sowie auf Kopien der\n                  Daten (vgl. auch Art. 15 DSGVO);,\n                \n\n                \n                  auf Berichtigung oder Vervollständigung unrichtiger bzw.\n                  unvollständiger Daten (vgl. auch Art. 16 DSGVO);,\n                \n\n                \n                  auf unverzügliche Löschung der sie betreffenden Daten (vgl.\n                  auch Art. 17 DSGVO), oder, alternativ, soweit eine weitere\n                  Verarbeitung gemäß Art. 17 Abs. 3 DSGVO erforderlich ist, auf\n                  Einschränkung der Verarbeitung nach Maßgabe von Art. 18\n                  DSGVO;,\n                \n\n                \n                  auf Erhalt der sie betreffenden und von ihnen bereitgestellten\n                  Daten und auf Übermittlung dieser Daten an andere\n                  Anbieter/Verantwortliche (vgl. auch Art. 20 DSGVO);,\n                \n\n                \n                  auf Beschwerde gegenüber der Aufsichtsbehörde, sofern sie der\n                  Ansicht sind, dass die sie betreffenden Daten durch den\n                  Anbieter unter Verstoß gegen datenschutzrechtliche\n                  Bestimmungen verarbeitet werden (vgl. auch Art. 77 DSGVO).,\n                \n              \n              \n                Darüber hinaus ist der Anbieter dazu verpflichtet, alle\n                Empfänger, denen gegenüber Daten durch den Anbieter offengelegt\n                worden sind, über jedwede Berichtigung oder Löschung von Daten\n                oder die Einschränkung der Verarbeitung, die aufgrund der\n                Artikel 16, 17 Abs. 1, 18 DSGVO erfolgt, zu unterrichten. Diese\n                Verpflichtung besteht jedoch nicht, soweit diese Mitteilung\n                unmöglich oder mit einem unverhältnismäßigen Aufwand verbunden\n                ist. Unbeschadet dessen hat der Nutzer ein Recht auf Auskunft\n                über diese Empfänger.,\n              \n\n              \n                Ebenfalls haben die Nutzer und Betroffenen nach Art. 21 DSGVO\n                  das Recht auf Widerspruch gegen die künftige Verarbeitung der\n                  sie betreffenden Daten, sofern die Daten durch den Anbieter\n                  nach Maßgabe von Art. 6 Abs. 1 lit. f) DSGVO verarbeitet\n                  werden. Insbesondere ist ein Widerspruch gegen die\n                  Datenverarbeitung zum Zwecke der Direktwerbung\n                  statthaft.,\n              \n\n              III. Informationen zur Datenverarbeitung,\n\n              \n                Ihre bei Nutzung unseres Internetauftritts verarbeiteten Daten\n                werden gelöscht oder gesperrt, sobald der Zweck der Speicherung\n                entfällt, der Löschung der Daten keine gesetzlichen\n                Aufbewahrungspflichten entgegenstehen und nachfolgend keine\n                anderslautenden Angaben zu einzelnen Verarbeitungsverfahren\n                gemacht werden.\",\n              \n\n              Kontaktanfragen / Kontaktmöglichkeit,\n\n              \n                \n                  Sofern Sie per Kontaktformular oder E-Mail mit uns in Kontakt\n                  treten, werden die dabei von Ihnen angegebenen Daten zur\n                  Bearbeitung Ihrer Anfrage genutzt. Die Angabe der Daten ist\n                  zur Bearbeitung und Beantwortung Ihre Anfrage erforderlich –\n                  ohne deren Bereitstellung können wir Ihre Anfrage nicht oder\n                  allenfalls eingeschränkt beantworten.,\n                \n                \n                  Rechtsgrundlage für diese Verarbeitung ist Art. 6 Abs. 1 lit.\n                  b DSGVO.,\n                \n                \n                  Ihre Daten werden gelöscht, sofern Ihre Anfrage abschließend\n                  beantwortet worden ist und der Löschung keine gesetzlichen\n                  Aufbewahrungspflichten entgegenstehen, wie bspw. bei einer\n                  sich etwaig anschließenden Vertragsabwicklung.,\n                \n              \n\n              \n                \n                  Muster-Datenschutzerklärung,\n\n                der,\n                \n                  Anwaltskanzlei Weiß & Partner\n                \n              \n            \n          \n        \n      \n    \n  \n\n\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                 Datenschutzerklärung                                                                    Personenbezogene Daten (nachfolgend zumeist nur „Daten“ genannt)                werden von uns nur im Rahmen der Erforderlichkeit sowie zum                Zwecke der Bereitstellung eines funktionsfähigen und                nutzerfreundlichen Internetauftritts, inklusive seiner Inhalte                und der dort angebotenen Leistungen, verarbeitet.                                            Gemäß Art. 4 Ziffer 1. der Verordnung (EU) 2016/679, also der                Datenschutz-Grundverordnung (nachfolgend nur „DSGVO“ genannt),                gilt als „Verarbeitung“ jeder mit oder ohne Hilfe                automatisierter Verfahren ausgeführter Vorgang oder jede solche                Vorgangsreihe im Zusammenhang mit personenbezogenen Daten, wie                das Erheben, das Erfassen, die Organisation, das Ordnen, die                Speicherung, die Anpassung oder Veränderung, das Auslesen, das                Abfragen, die Verwendung, die Offenlegung durch Übermittlung,                Verbreitung oder eine andere Form der Bereitstellung, den                Abgleich oder die Verknüpfung, die Einschränkung, das Löschen                oder die Vernichtung.                                            Mit der nachfolgenden Datenschutzerklärung informieren wir Sie                insbesondere über Art, Umfang, Zweck, Dauer und Rechtsgrundlage                der Verarbeitung personenbezogener Daten, soweit wir entweder                allein oder gemeinsam mit anderen über die Zwecke und Mittel der                Verarbeitung entscheiden. Zudem informieren wir Sie nachfolgend                über die von uns zu Optimierungszwecken sowie zur Steigerung der                Nutzungsqualität eingesetzten Fremdkomponenten, soweit hierdurch                Dritte Daten in wiederum eigener Verantwortung verarbeiten.                                                    Unsere Datenschutzerklärung ist wie folgt gegliedert:                              I. Informationen über uns als Verantwortliche,                II. Rechte der Nutzer und Betroffenen,                 III. Informationen zur Datenverarbeitung,                                                    I. Informationen über uns als Verantwortliche,                              Verantwortlicher Anbieter dieses Internetauftritts im                datenschutzrechtlichen Sinne ist:,                            Selcuk Kocyigit              Hochfelder Str.33              47226 Duisburg              Telefon: 017643203362E-Mail: selcuk.80@outlook.de              II. Rechte der Nutzer und Betroffenen,                              Mit Blick auf die nachfolgend noch näher beschriebene                Datenverarbeitung haben die Nutzer und Betroffenen das Recht,                                                              auf Bestätigung, ob sie betreffende Daten verarbeitet werden,                  auf Auskunft über die verarbeiteten Daten, auf weitere                  Informationen über die Datenverarbeitung sowie auf Kopien der                  Daten (vgl. auch Art. 15 DSGVO);,                                                  auf Berichtigung oder Vervollständigung unrichtiger bzw.                  unvollständiger Daten (vgl. auch Art. 16 DSGVO);,                                                  auf unverzügliche Löschung der sie betreffenden Daten (vgl.                  auch Art. 17 DSGVO), oder, alternativ, soweit eine weitere                  Verarbeitung gemäß Art. 17 Abs. 3 DSGVO erforderlich ist, auf                  Einschränkung der Verarbeitung nach Maßgabe von Art. 18                  DSGVO;,                                                  auf Erhalt der sie betreffenden und von ihnen bereitgestellten                  Daten und auf Übermittlung dieser Daten an andere                  Anbieter/Verantwortliche (vgl. auch Art. 20 DSGVO);,                                                  auf Beschwerde gegenüber der Aufsichtsbehörde, sofern sie der                  Ansicht sind, dass die sie betreffenden Daten durch den                  Anbieter unter Verstoß gegen datenschutzrechtliche                  Bestimmungen verarbeitet werden (vgl. auch Art. 77 DSGVO).,                                                            Darüber hinaus ist der Anbieter dazu verpflichtet, alle                Empfänger, denen gegenüber Daten durch den Anbieter offengelegt                worden sind, über jedwede Berichtigung oder Löschung von Daten                oder die Einschränkung der Verarbeitung, die aufgrund der                Artikel 16, 17 Abs. 1, 18 DSGVO erfolgt, zu unterrichten. Diese                Verpflichtung besteht jedoch nicht, soweit diese Mitteilung                unmöglich oder mit einem unverhältnismäßigen Aufwand verbunden                ist. Unbeschadet dessen hat der Nutzer ein Recht auf Auskunft                über diese Empfänger.,                                            Ebenfalls haben die Nutzer und Betroffenen nach Art. 21 DSGVO                  das Recht auf Widerspruch gegen die künftige Verarbeitung der                  sie betreffenden Daten, sofern die Daten durch den Anbieter                  nach Maßgabe von Art. 6 Abs. 1 lit. f) DSGVO verarbeitet                  werden. Insbesondere ist ein Widerspruch gegen die                  Datenverarbeitung zum Zwecke der Direktwerbung                  statthaft.,                            III. Informationen zur Datenverarbeitung,                              Ihre bei Nutzung unseres Internetauftritts verarbeiteten Daten                werden gelöscht oder gesperrt, sobald der Zweck der Speicherung                entfällt, der Löschung der Daten keine gesetzlichen                Aufbewahrungspflichten entgegenstehen und nachfolgend keine                anderslautenden Angaben zu einzelnen Verarbeitungsverfahren                gemacht werden.\",                            Kontaktanfragen / Kontaktmöglichkeit,                                                Sofern Sie per Kontaktformular oder E-Mail mit uns in Kontakt                  treten, werden die dabei von Ihnen angegebenen Daten zur                  Bearbeitung Ihrer Anfrage genutzt. Die Angabe der Daten ist                  zur Bearbeitung und Beantwortung Ihre Anfrage erforderlich –                  ohne deren Bereitstellung können wir Ihre Anfrage nicht oder                  allenfalls eingeschränkt beantworten.,                                                  Rechtsgrundlage für diese Verarbeitung ist Art. 6 Abs. 1 lit.                  b DSGVO.,                                                  Ihre Daten werden gelöscht, sofern Ihre Anfrage abschließend                  beantwortet worden ist und der Löschung keine gesetzlichen                  Aufbewahrungspflichten entgegenstehen, wie bspw. bei einer                  sich etwaig anschließenden Vertragsabwicklung.,                                                                              Muster-Datenschutzerklärung,                der,                                  Anwaltskanzlei Weiß & Partner                                                                          '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrivateMessagesBase.html":{"url":"classes/PrivateMessagesBase.html","title":"class - PrivateMessagesBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrivateMessagesBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/private-messages/private-messages-base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allChannels\n                            \n                            \n                                allUsers\n                            \n                            \n                                conversationId\n                            \n                            \n                                currentDate\n                            \n                            \n                                currentMessageId\n                            \n                            \n                                currentUser\n                            \n                            \n                                cycleStep\n                            \n                            \n                                dropdownState\n                            \n                            \n                                    Public\n                                hasScrolledOnChange\n                            \n                            \n                                imageUrl\n                            \n                            \n                                    Public\n                                isChatChanging\n                            \n                            \n                                isDesktop\n                            \n                            \n                                isEmojiPickerVisible\n                            \n                            \n                                isImageModalOpen\n                            \n                            \n                                isTextareaExpanded\n                            \n                            \n                                largeImageUrl\n                            \n                            \n                                lastOpenedChar\n                            \n                            \n                                lastUsedEmojisReceived\n                            \n                            \n                                lastUsedEmojisSent\n                            \n                            \n                                latestTimestamp\n                            \n                            \n                                message\n                            \n                            \n                                originalMessage\n                            \n                            \n                                parentMessage\n                            \n                            \n                                privateMessage\n                            \n                            \n                                privateMessages\n                            \n                            \n                                recipientAvatarUrl\n                            \n                            \n                                recipientStatus\n                            \n                            \n                                    Public\n                                replyCache\n                            \n                            \n                                selectedMember\n                            \n                            \n                                selectedThread\n                            \n                            \n                                showEditOptions\n                            \n                            \n                                showLargeImage\n                            \n                            \n                                showUserDropdown\n                            \n                            \n                                tooltipEmoji\n                            \n                            \n                                tooltipPosition\n                            \n                            \n                                tooltipSenderName\n                            \n                            \n                                tooltipVisible\n                            \n                            \n                                    Public\n                                unsubscribeChannels\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeEmojiListener\n                            \n                            \n                                    Public\n                                unsubscribeFromPrivateMessages\n                            \n                            \n                                    Public\n                                unsubscribeFromThreadDetails\n                            \n                            \n                                    Public\n                                unsubscribeFromThreadMessages\n                            \n                            \n                                    Public\n                                unsubscribeLiveReplyCounts\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeRecipient\n                            \n                            \n                                    Public\n                                unsubscribeUsers\n                            \n                            \n                                userMap\n                            \n                            \n                                yesterdayDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cycleStep\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dropdownState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"hidden\" | \"user\" | \"channel\"\n\n                    \n                \n                \n                    \n                        Default value : 'hidden'\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasScrolledOnChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | ArrayBuffer | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isChatChanging\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmojiPickerVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isImageModalOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTextareaExpanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        largeImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastOpenedChar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latestTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientAvatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        replyCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedMember\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showLargeImage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showUserDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipSenderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeEmojiListener\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromPrivateMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromThreadDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromThreadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeLiveReplyCounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeRecipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yesterdayDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                    \n                        \n                                Defined in src/app/private-messages/private-messages-base.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '../message.models'\n\n\nexport class PrivateMessagesBase {\n  parentMessage: any = null\n  imageUrl: string | ArrayBuffer | null = null\n  privateMessage: string = ''\n  currentUser: any\n  conversationId: string | undefined\n  recipientStatus: string = ''\n  recipientAvatarUrl: string = ''\n  isEmojiPickerVisible: boolean = false\n  isImageModalOpen = false\n  currentDate: Date = new Date()\n  yesterdayDate: Date = new Date()\n  isTextareaExpanded: boolean = false\n  message: string = ''\n  lastUsedEmojisReceived: string[] = []\n  lastUsedEmojisSent: string[] = []\n  showEditOptions: boolean = false\n  currentMessageId: string | null = null\n  originalMessage: any = null\n  tooltipVisible = false\n  tooltipPosition = { x: 0, y: 0 }\n  tooltipEmoji = ''\n  tooltipSenderName = ''\n  selectedThread: any = null\n  latestTimestamp: Date | null = null\n  selectedMember: any = null\n  allUsers: any[] = []\n  showUserDropdown: boolean = false\n  privateMessages: Message[] = []\n  showLargeImage = false\n  largeImageUrl: string | null = null\n  isDesktop = false\n  allChannels: any[] = []\n  dropdownState: 'hidden' | 'user' | 'channel' = 'hidden'\n  cycleStep = 1\n  lastOpenedChar = ''\n  userMap: { [uid: string]: { name: string; avatarUrl: string } | undefined } = {}\n\n  public replyCache: Map = new Map()\n  public unsubscribeFromThreadMessages: (() => void) | null = null\n  public unsubscribeLiveReplyCounts: (() => void) | null = null\n  public unsubscribeFromThreadDetails: (() => void) | null = null\n  public unsubscribeEmojiListener?: () => void\n  public unsubscribeFromPrivateMessages: (() => void) | null = null\n  public unsubscribeRecipient?: () => void\n  public unsubscribeChannels: (() => void) | null = null\n  public unsubscribeUsers: (() => void) | null = null\n  public hasScrolledOnChange: boolean = false\n  public isChatChanging: boolean = false\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ProfilDialogComponent.html":{"url":"components/ProfilDialogComponent.html","title":"component - ProfilDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ProfilDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/profil-dialog/profil-dialog.component.ts\n\n\n\n    \n        Description\n    \n    \n        The ProfilDialogComponent is displayed in a Material Dialog\nto show a user's profile data, including avatar, status, and email.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-profil-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n            \n                styleUrls\n                ./profil-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./profil-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                    Private\n                                    Optional\n                                unsubscribeRecipient\n                            \n                            \n                                userAvatarUrl\n                            \n                            \n                                userEmail\n                            \n                            \n                                userName\n                            \n                            \n                                userStatus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: ProfileData, messageService: MessageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:62\n                            \n                        \n\n                \n                    \n                            Constructor injecting the material dialog references and incoming data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReference to this dialog instance.\n\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ProfileData\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nData passed in when opening this dialog (user profile info).\n\n\n                                                        \n                                                \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/profil-dialog/profil-dialog.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Closes the dialog without taking additional action.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/profil-dialog/profil-dialog.component.ts:115\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/profil-dialog/profil-dialog.component.ts:79\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that copies relevant profile data to local variables on initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/profil-dialog/profil-dialog.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Closes the dialog and signals the parent that a private chat\nshould be opened with the given user ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProfileData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:72\n                        \n                    \n\n            \n                \n                    - Data passed in when opening this dialog (user profile info).\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:71\n                        \n                    \n\n            \n                \n                    - Reference to this dialog instance.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        unsubscribeRecipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:62\n                        \n                    \n\n            \n                \n                    Hier speichern wir später die unsubscribe-Funktion des Snapshot-Listeners,\ndamit wir ihn bei Bedarf beenden können.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userAvatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'assets/img/avatar.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:51\n                        \n                    \n\n            \n                \n                    Local copy of the user's avatar URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:56\n                        \n                    \n\n            \n                \n                    Local copy of user's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:41\n                        \n                    \n\n            \n                \n                    Local copy of user's name, used in the dialog display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Aktiv'\n                    \n                \n                    \n                        \n                                Defined in src/app/profil-dialog/profil-dialog.component.ts:46\n                        \n                    \n\n            \n                \n                    Local copy of user's status (e.g., 'Aktiv', 'Abwesend').\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MessageService } from '../message.service';\n\n/**\n * Data structure expected when opening ProfilDialogComponent via MatDialog.\n */\nexport interface ProfileData {\n  userId: string;\n  userName: string;\n  userStatus: string;\n  userAvatarUrl: string;\n  userEmail: string;\n}\n\n/**\n * The ProfilDialogComponent is displayed in a Material Dialog\n * to show a user's profile data, including avatar, status, and email.\n */\n@Component({\n  selector: 'app-profil-dialog',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './profil-dialog.component.html',\n  styleUrls: ['./profil-dialog.component.scss']\n})\nexport class ProfilDialogComponent implements OnInit {\n  /**\n   * Local copy of user's name, used in the dialog display.\n   */\n  userName: string = '';\n\n  /**\n   * Local copy of user's status (e.g., 'Aktiv', 'Abwesend').\n   */\n  userStatus: string = 'Aktiv';\n\n  /**\n   * Local copy of the user's avatar URL.\n   */\n  userAvatarUrl: string = 'assets/img/avatar.png';\n\n  /**\n   * Local copy of user's email address.\n   */\n  userEmail: string = '';\n  \n  /**\n   * Hier speichern wir später die unsubscribe-Funktion des Snapshot-Listeners,\n   * damit wir ihn bei Bedarf beenden können.\n   */\n  private unsubscribeRecipient?: () => void;\n\n  /**\n   * Constructor injecting the material dialog references and incoming data.\n   *\n   * @param {MatDialogRef} dialogRef - Reference to this dialog instance.\n   * @param {ProfileData} data - Data passed in when opening this dialog (user profile info).\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: ProfileData,\n    private messageService: MessageService\n  ) {}\n\n  /**\n   * Lifecycle hook that copies relevant profile data to local variables on initialization.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      this.userName = this.data.userName;\n      this.userStatus = this.data.userStatus;\n      this.userAvatarUrl = this.data.userAvatarUrl;\n      this.userEmail = this.data.userEmail;\n    }\n\n    if (this.data.userId) {\n      this.unsubscribeRecipient = this.messageService.onRecipientStatusChanged(\n        this.data.userId,\n        (result) => {\n          this.userStatus = result.isOnline ? 'Aktiv' : 'Abwesend';\n          this.userAvatarUrl = result.avatarUrl;\n          this.userName = result.name;\n          this.userEmail = result.email;\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the dialog without taking additional action.\n   */\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  /**\n   * Closes the dialog and signals the parent that a private chat \n   * should be opened with the given user ID.\n   */\n  sendMessage(): void {\n    this.dialogRef.close({ openChatWith: this.data.userId });\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeRecipient) {\n      this.unsubscribeRecipient();\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n    \n\n    \n        \n  \n    \n      Profil\n\n      \n        \n      \n    \n\n    \n      \n    \n\n    \n      \n        \n          \n            {{ data.userName }}\n          \n        \n\n        \n          \n          \n          \n          {{ userStatus }}\n        \n        \n        \n      \n\n      \n        \n          \n          E-Mail-Adresse\n        \n        {{ data.userEmail }}\n      \n    \n\n    \n      \n      Nachricht\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \n                \n                    ./profil-dialog.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.profile-card-container {\n  background-color: white;\n  box-shadow: -2px 0px 8px rgba(0, 0, 0, 0.1);\n  transition: right 0.3s ease;\n  z-index: 1001;\n  display: flex;\n  padding: 45px 40px;\n\n  &.show {\n    right: 20px;\n    border-radius: 30px 0px 30px 30px;\n    display: block;\n  }\n\n  .profile-card {\n    @include dFlex(space-between, center, 45px);\n    flex-direction: column;\n  }\n\n  .profile-avatar {\n    position: relative;\n    display: inline-block;\n    cursor: pointer;\n    border-radius: 50%;\n\n    img {\n      border-radius: 50%;\n      transition: 0.3s ease;\n      width: 200px;\n      height: 200px;\n      object-fit: cover;\n    }\n  }\n\n  .profile-info {\n    @include dFlex(null, null, 45px);\n    flex-direction: column;\n\n    p {\n      font-size: 20px;\n      font-weight: 700;\n      margin: 0;\n    }\n\n    .secondary-text {\n      font-size: 18px;\n      color: $hoverColor;\n      font-weight: 500;\n      float: left;\n      padding-left: 50px;\n      margin: 0;\n    }\n  }\n}\n\n\n.profil-container {\n  @include dFlex(space-between, center, 0);\n  width: 420px;\n  height: 40px;\n\n  .img-wrapper {\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    transition: background-color 0.3s ease, transform 0.3s ease;\n\n    &:hover {\n      background-color: $lightblue;\n      transform: scale(1.1);\n    }\n\n    img {\n      width: 40px;\n      height: 40px;\n      object-fit: cover;\n      border-radius: 50%;\n      transition: filter 0.3s ease;\n      cursor: pointer;\n\n      &:hover {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n.profil-settings {\n  @include dFlex(space-between, center, 0);\n  width: 420px;\n  height: 44px;\n\n  p {\n    font-size: 32px !important;\n    font-weight: 700 !important;\n  }\n}\n\n.email-container {\n  @include dFlex(null, center, 20px);\n\n  img {\n    width: 30px;\n    height: 30px;\n  }\n}\n\n.online-aktiv-passiv {\n  @include dFlex(null, center, 15px);\n  img {\n    width: 16px;\n    height: 16px;\n  }\n\n  p {\n    font-size: 20px !important;\n    font-weight: 400 !important;\n    color: #92c83e;\n  }\n}\n\n\n.button-anmelden {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  justify-content: center;\n}\n\n.profil-box,\n.profil-email-box {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n::ng-deep .mdc-dialog__surface {\n  border-radius: 30px !important;\n  overflow: hidden;\n  width: auto !important;\n  min-width: 0 !important;\n}\n\n@media (min-width: 1278px) {\n  .profil-settings img {\n    display: none;\n  }\n}\n\n@media (max-width: 1278px) {\n  .profil-settings {\n    width: unset;\n  }\n\n  .profil-container {\n    width: 100%;\n  }\n\n  .button-anmelden {\n    margin-top: 10px;\n    height: 25px;\n  }\n\n  .profile-card-container .profile-info {\n    gap: 20px;\n    width: 100%;\n  }\n\n  .profile-card-container .profile-card {\n    width: 100vw;\n    max-width: 358px;\n    gap: unset;\n  }\n\n  .profile-card-container {\n    padding: 40px 20px;\n  }\n\n  .profil-settings {\n    display: flex;\n    justify-content: space-between;\n\n    img {\n      width: 30px;\n      height: 30px;\n      object-fit: cover;\n      border-radius: 50%;\n      transition: filter 0.3s ease;\n\n      &:hover {\n        background-color: $lightblue;\n        transform: scale(1.1);\n        cursor: pointer;\n\n        img {\n          filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n            saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n        }\n      }\n    }\n  }\n}\n\n@media (max-width: 390px) {\n  .profil-container {\n    width: 100%;\n\n    h2 {\n      font-size: 18px;\n    }\n  }\n\n  .profil-settings p {\n    font-size: 26px !important;\n  }\n\n  .profil-email-box p {\n    font-size: 18px !important;\n  }\n\n  .profil-email-box .secondary-text {\n    font-size: 16px !important;\n  }\n\n  .online-aktiv-passiv p {\n    font-size: 18px !important;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Profil                                                                              {{ data.userName }}                                                                  {{ userStatus }}                                                                E-Mail-Adresse                {{ data.userEmail }}                          Nachricht      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ProfilDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileData.html":{"url":"interfaces/ProfileData.html","title":"interface - ProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/profil-dialog/profil-dialog.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Data structure expected when opening ProfilDialogComponent via MatDialog.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userAvatarUrl\n                                        \n                                \n                                \n                                        \n                                            userEmail\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            userName\n                                        \n                                \n                                \n                                        \n                                            userStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userAvatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userAvatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userEmail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userStatus:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MessageService } from '../message.service';\n\n/**\n * Data structure expected when opening ProfilDialogComponent via MatDialog.\n */\nexport interface ProfileData {\n  userId: string;\n  userName: string;\n  userStatus: string;\n  userAvatarUrl: string;\n  userEmail: string;\n}\n\n/**\n * The ProfilDialogComponent is displayed in a Material Dialog\n * to show a user's profile data, including avatar, status, and email.\n */\n@Component({\n  selector: 'app-profil-dialog',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './profil-dialog.component.html',\n  styleUrls: ['./profil-dialog.component.scss']\n})\nexport class ProfilDialogComponent implements OnInit {\n  /**\n   * Local copy of user's name, used in the dialog display.\n   */\n  userName: string = '';\n\n  /**\n   * Local copy of user's status (e.g., 'Aktiv', 'Abwesend').\n   */\n  userStatus: string = 'Aktiv';\n\n  /**\n   * Local copy of the user's avatar URL.\n   */\n  userAvatarUrl: string = 'assets/img/avatar.png';\n\n  /**\n   * Local copy of user's email address.\n   */\n  userEmail: string = '';\n  \n  /**\n   * Hier speichern wir später die unsubscribe-Funktion des Snapshot-Listeners,\n   * damit wir ihn bei Bedarf beenden können.\n   */\n  private unsubscribeRecipient?: () => void;\n\n  /**\n   * Constructor injecting the material dialog references and incoming data.\n   *\n   * @param {MatDialogRef} dialogRef - Reference to this dialog instance.\n   * @param {ProfileData} data - Data passed in when opening this dialog (user profile info).\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: ProfileData,\n    private messageService: MessageService\n  ) {}\n\n  /**\n   * Lifecycle hook that copies relevant profile data to local variables on initialization.\n   */\n  ngOnInit(): void {\n    if (this.data) {\n      this.userName = this.data.userName;\n      this.userStatus = this.data.userStatus;\n      this.userAvatarUrl = this.data.userAvatarUrl;\n      this.userEmail = this.data.userEmail;\n    }\n\n    if (this.data.userId) {\n      this.unsubscribeRecipient = this.messageService.onRecipientStatusChanged(\n        this.data.userId,\n        (result) => {\n          this.userStatus = result.isOnline ? 'Aktiv' : 'Abwesend';\n          this.userAvatarUrl = result.avatarUrl;\n          this.userName = result.name;\n          this.userEmail = result.email;\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the dialog without taking additional action.\n   */\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  /**\n   * Closes the dialog and signals the parent that a private chat \n   * should be opened with the given user ID.\n   */\n  sendMessage(): void {\n    this.dialogRef.close({ openChatWith: this.data.userId });\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeRecipient) {\n      this.unsubscribeRecipient();\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReplyCountService.html":{"url":"injectables/ReplyCountService.html","title":"injectable - ReplyCountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReplyCountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/reply-count.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                countFilteredReplies\n                            \n                            \n                                    Private\n                                    Async\n                                fetchReplyCountAndTime\n                            \n                            \n                                    Private\n                                getFilterField\n                            \n                            \n                                    Private\n                                getFilterFieldForReplies\n                            \n                            \n                                    Private\n                                    Async\n                                getParentDocData\n                            \n                            \n                                    Async\n                                getReplyCountsForMessages\n                            \n                            \n                                    Private\n                                getReplyFilterField\n                            \n                            \n                                loadReplyCountsLive\n                            \n                            \n                                    Private\n                                mapReplySnapshot\n                            \n                            \n                                    Private\n                                subscribeAllMessageIds\n                            \n                            \n                                    Async\n                                updateReplyCount\n                            \n                            \n                                    Private\n                                    Async\n                                updateReplyCountInParent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/reply-count.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        countFilteredReplies\n                        \n                    \n                \n            \n            \n                \n                        \n                    countFilteredReplies(field: string, parentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        fetchReplyCountAndTime\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchReplyCountAndTime(field: string, messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFilterField\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilterField(type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFilterFieldForReplies\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilterFieldForReplies(type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getParentDocData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getParentDocData(ref: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ref\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getReplyCountsForMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    getReplyCountsForMessages(messageIds: string[], type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getReplyFilterField\n                        \n                    \n                \n            \n            \n                \n                        \n                    getReplyFilterField(type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadReplyCountsLive\n                        \n                    \n                \n            \n            \n                \nloadReplyCountsLive(msgIds: string[], type: \"private\" | \"thread\" | \"thread-channel\", cb: (counts: ReplyCountsMap) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cb\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapReplySnapshot\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapReplySnapshot(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribeAllMessageIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribeAllMessageIds(msgIds: string[], type: \"private\" | \"thread\" | \"thread-channel\", agg: ReplyCountsMap, cb: (counts: ReplyCountsMap) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                agg\n                                            \n                                                            ReplyCountsMap\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cb\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateReplyCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateReplyCount(parentMessageId: string, type: \"private\" | \"thread\" | \"thread-channel\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"private\" | \"thread\" | \"thread-channel\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateReplyCountInParent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateReplyCountInParent(ref: any, replyCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/reply-count.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ref\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                replyCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  doc,\n  getDoc,\n  collection,\n  query,\n  where,\n  orderBy,\n  getDocs,\n  onSnapshot,\n  updateDoc,\n} from '@angular/fire/firestore';\nimport { ReplyCountsMap } from './message.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReplyCountService {\n  constructor(private firestore: Firestore) {}\n\n  async updateReplyCount(\n    parentMessageId: string,\n    type: 'private' | 'thread' | 'thread-channel'\n  ): Promise {\n    const parentRef = doc(this.firestore, 'messages', parentMessageId);\n    try {\n      const parentDoc = await this.getParentDocData(parentRef);\n      if (!parentDoc) return;\n      const oldReplyCount = parentDoc['replyCount'] || 0;\n      const filterField = this.getFilterField(type);\n      const newReplyCount = await this.countFilteredReplies(\n        filterField,\n        parentMessageId\n      );\n      await this.updateReplyCountInParent(parentRef, newReplyCount);\n    } catch {}\n  }\n\n  private async getParentDocData(ref: any): Promise {\n    const snapshot = await getDoc(ref);\n    return snapshot.exists() ? snapshot.data() : null;\n  }\n\n  private getFilterField(\n    type: 'private' | 'thread' | 'thread-channel'\n  ): string {\n    return type === 'thread-channel' ? 'threadChannelId' : 'parentId';\n  }\n\n  private async countFilteredReplies(\n    field: string,\n    parentId: string\n  ): Promise {\n    const q = query(\n      collection(this.firestore, 'messages'),\n      where(field, '==', parentId),\n      orderBy('timestamp', 'asc')\n    );\n    const snap = await getDocs(q);\n    return snap.size;\n  }\n\n  private async updateReplyCountInParent(\n    ref: any,\n    replyCount: number\n  ): Promise {\n    await updateDoc(ref, { replyCount });\n  }\n\n  async getReplyCountsForMessages(\n    messageIds: string[],\n    type: 'private' | 'thread' | 'thread-channel'\n  ): Promise {\n    const replyCounts: ReplyCountsMap = {};\n    const filterField = this.getFilterFieldForReplies(type);\n    for (const msgId of messageIds) {\n      const { count, lastResponseTime } = await this.fetchReplyCountAndTime(\n        filterField,\n        msgId\n      );\n      replyCounts[msgId] = { count, lastResponseTime };\n    }\n    return replyCounts;\n  }\n\n  private getFilterFieldForReplies(\n    type: 'private' | 'thread' | 'thread-channel'\n  ): string {\n    return type === 'thread-channel' ? 'threadChannelId' : 'parentId';\n  }\n\n  private async fetchReplyCountAndTime(\n    field: string,\n    messageId: string\n  ): Promise {\n    const q = query(\n      collection(this.firestore, 'messages'),\n      where(field, '==', messageId),\n      orderBy('timestamp', 'asc')\n    );\n    const snapshot = await getDocs(q);\n    const count = snapshot.size;\n    let lastResponseTime: Date | null = null;\n    if (count > 0) {\n      const lastDoc = snapshot.docs[count - 1];\n      const ts = lastDoc.data()?.['timestamp'];\n      if (ts?.toDate) lastResponseTime = ts.toDate();\n    }\n    return { count, lastResponseTime };\n  }\n\n  loadReplyCountsLive(\n    msgIds: string[],\n    type: 'private' | 'thread' | 'thread-channel',\n    cb: (counts: ReplyCountsMap) => void\n  ): () => void {\n    if (!msgIds.length) return () => {};\n    const agg: ReplyCountsMap = {};\n    const unsub = this.subscribeAllMessageIds(msgIds, type, agg, cb);\n    return () => unsub.forEach((fn) => fn());\n  }\n\n  private subscribeAllMessageIds(\n    msgIds: string[],\n    type: 'private' | 'thread' | 'thread-channel',\n    agg: ReplyCountsMap,\n    cb: (counts: ReplyCountsMap) => void\n  ): Array void> {\n    const unsubscribes: Array void> = [];\n    const filter = this.getReplyFilterField(type);\n    msgIds.forEach((id) => {\n      const q = query(\n        collection(this.firestore, 'messages'),\n        where(filter, '==', id),\n        orderBy('timestamp', 'asc')\n      );\n      const unsub = onSnapshot(q, (snap) => {\n        agg[id] = this.mapReplySnapshot(snap);\n        cb({ ...agg });\n      });\n      unsubscribes.push(unsub);\n    });\n    return unsubscribes;\n  }\n\n  private getReplyFilterField(\n    type: 'private' | 'thread' | 'thread-channel'\n  ): string {\n    return type === 'thread-channel' ? 'threadChannelId' : 'parentId';\n  }\n\n  private mapReplySnapshot(snapshot: any): {\n    count: number;\n    lastResponseTime: Date | null;\n  } {\n    const count = snapshot.size;\n    let lastResponseTime: Date | null = null;\n    if (count > 0) {\n      const lastDoc = snapshot.docs[count - 1];\n      const ts = lastDoc.data()?.['timestamp'];\n      if (ts?.toDate) lastResponseTime = ts.toDate();\n    }\n    return { count, lastResponseTime };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFieldBase.html":{"url":"classes/SearchFieldBase.html","title":"class - SearchFieldBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFieldBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/search-field/search-field-base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allChannels\n                            \n                            \n                                allMembers\n                            \n                            \n                                allUsers\n                            \n                            \n                                    Optional\n                                conversationId\n                            \n                            \n                                currentDate\n                            \n                            \n                                currentMessageId\n                            \n                            \n                                currentUser\n                            \n                            \n                                dropdownState\n                            \n                            \n                                filteredMembers\n                            \n                            \n                                filteredResults\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isDesktop\n                            \n                            \n                                isEmojiPickerVisible\n                            \n                            \n                                isImageModalOpen\n                            \n                            \n                                isTextareaExpanded\n                            \n                            \n                                lastUsedEmojisReceived\n                            \n                            \n                                lastUsedEmojisSent\n                            \n                            \n                                messageToAll\n                            \n                            \n                                noResultsFound\n                            \n                            \n                                originalMessage\n                            \n                            \n                                placeholderText\n                            \n                            \n                                privateMessage\n                            \n                            \n                                privateMessages\n                            \n                            \n                                recipientAvatarUrl\n                            \n                            \n                                recipientStatus\n                            \n                            \n                                searchQuery\n                            \n                            \n                                selectedRecipients\n                            \n                            \n                                showAtDropdown\n                            \n                            \n                                showEditOptions\n                            \n                            \n                                tooltipEmoji\n                            \n                            \n                                tooltipPosition\n                            \n                            \n                                tooltipSenderName\n                            \n                            \n                                tooltipVisible\n                            \n                            \n                                yesterdayDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getYesterdayDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dropdownState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"hidden\" | \"user\" | \"channel\"\n\n                    \n                \n                \n                    \n                        Default value : 'hidden'\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | ArrayBuffer | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmojiPickerVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isImageModalOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTextareaExpanded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageToAll\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'An: #channel, oder @jemand'\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noResultsFound\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeholderText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientAvatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedRecipients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAtDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipSenderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yesterdayDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : this.getYesterdayDate()\n                    \n                \n                    \n                        \n                                Defined in src/app/search-field/search-field-base.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getYesterdayDate\n                        \n                    \n                \n            \n            \n                \ngetYesterdayDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/search-field/search-field-base.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class SearchFieldBase {\n  searchQuery = '';\n  filteredMembers: any[] = [];\n  noResultsFound = false;\n  imageUrl: string | ArrayBuffer | null = null;\n  privateMessage = '';\n  currentUser: any = null;\n  privateMessages: any[] = [];\n  conversationId?: string;\n  recipientStatus = '';\n  recipientAvatarUrl = '';\n  isEmojiPickerVisible = false;\n  isImageModalOpen = false;\n  currentDate: Date = new Date();\n  yesterdayDate: Date = this.getYesterdayDate();\n  isTextareaExpanded = false;\n  lastUsedEmojisReceived: string[] = [];\n  lastUsedEmojisSent: string[] = [];\n  showEditOptions = false;\n  currentMessageId: string | null = null;\n  originalMessage: any = null;\n  tooltipVisible = false;\n  tooltipPosition = { x: 0, y: 0 };\n  tooltipEmoji = '';\n  tooltipSenderName = '';\n  selectedRecipients: any[] = [];\n  messageToAll = 'An: #channel, oder @jemand';\n  showAtDropdown = false;\n  allMembers: any[] = [];\n  isDesktop = false;\n  placeholderText = '';\n  filteredResults: any[] = [];\n  dropdownState: 'hidden' | 'user' | 'channel' = 'hidden';\n  allUsers: any[] = [];\n  allChannels: any[] = [];\n\n  getYesterdayDate(): Date {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return yesterday;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SelectedMembersDialogComponent.html":{"url":"components/SelectedMembersDialogComponent.html","title":"component - SelectedMembersDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SelectedMembersDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/selected-members-dialog/selected-members-dialog.component.ts\n\n\n\n    \n        Description\n    \n    \n        The SelectedMembersDialogComponent displays the list of currently\nselected members passed in via the dialog data context.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-selected-members-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./selected-members-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./selected-members-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                selectedMembers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                onCancel\n                            \n                            \n                                removeMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor for the SelectedMembersDialogComponent, injecting\nthe dialog reference and the members data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReference to this dialog instance.\n\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data object passed to the dialog, containing members.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:56\n                        \n                    \n\n\n            \n                \n                        Closes the dialog, optionally returning updated data if needed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Closes the dialog without any further action or changes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMember\n                        \n                    \n                \n            \n            \n                \nremoveMember(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Removes a member from the selectedMembers array at the specified index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the member to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:39\n                        \n                    \n\n            \n                \n                    - The data object passed to the dialog, containing members.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:38\n                        \n                    \n\n            \n                \n                    - Reference to this dialog instance.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/selected-members-dialog/selected-members-dialog.component.ts:28\n                        \n                    \n\n            \n                \n                    An array of selected members passed in through MAT_DIALOG_DATA.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The SelectedMembersDialogComponent displays the list of currently\n * selected members passed in via the dialog data context.\n */\n@Component({\n  selector: 'app-selected-members-dialog',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './selected-members-dialog.component.html',\n  styleUrls: ['./selected-members-dialog.component.scss']\n})\nexport class SelectedMembersDialogComponent {\n  /**\n   * An array of selected members passed in through `MAT_DIALOG_DATA`.\n   */\n  selectedMembers: any[];\n\n  /**\n   * Constructor for the SelectedMembersDialogComponent, injecting\n   * the dialog reference and the members data.\n   *\n   * @param {MatDialogRef} dialogRef - Reference to this dialog instance.\n   * @param {any} data - The data object passed to the dialog, containing members.\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.selectedMembers = data.members || [];\n  }\n\n  /**\n   * Removes a member from the selectedMembers array at the specified index.\n   *\n   * @param {number} index - The index of the member to remove.\n   */\n  removeMember(index: number): void {\n    this.selectedMembers.splice(index, 1);\n  }\n\n  /**\n   * Closes the dialog, optionally returning updated data if needed.\n   */\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  /**\n   * Closes the dialog without any further action or changes.\n   */\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Ausgewählte Mitglieder\n      \n    \n    \n      \n        \n        {{ member.name }}\n        ×\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./selected-members-dialog.component.scss\n                \n                @import \"./../../styles.scss\";\n\nul {\n  list-style-type: none;\n  padding: 0;\n  gap: 13px;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  padding: 0 20px;\n  gap: 20px;\n\n  &:hover {\n    background-color: $lightblue;\n    border-radius: 100px;\n    color: black;\n    transition: color 0.3s ease, font-size 0.3s ease;\n  }\n}\n\nspan {\n  font-size: 18px;\n  font-weight: 400;\n  color: black;\n}\n\n.avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.container {\n  padding: 40px;\n  gap: 20px;\n  border-radius: 40px 0px 0px 0px;\n  border: 1px 0px 0px 0px;\n  display: flex;\n  flex-direction: column;\n}\n\n.remove-btn {\n  background-color: transparent;\n  border: none;\n  color: gray;\n  cursor: pointer;\n  font-size: 20px;\n  margin-left: auto;\n\n  &:hover {\n    color: $hoverColor;\n  }\n}\n\n.close-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  h1 {\n    margin-right: 20px;\n    font-size: 24px;\n    font-weight: 700;\n    flex-grow: 1;\n  }\n\n  img {\n    cursor: pointer;\n    transition: filter 0.3s ease, background-color 0.3s ease;\n    border-radius: 50%;\n    margin-left: auto;\n    &:hover {\n      background-color: $lightblue;\n\n      img {\n        filter: brightness(0) saturate(100%) invert(34%) sepia(39%)\n          saturate(6834%) hue-rotate(230deg) brightness(100%) contrast(90%);\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Ausgewählte Mitglieder                                    {{ member.name }}        ×            '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SelectedMembersDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThreadChannelBase.html":{"url":"classes/ThreadChannelBase.html","title":"class - ThreadChannelBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThreadChannelBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/thread-channel/thread-channel-base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allChannels\n                            \n                            \n                                allUsers\n                            \n                            \n                                channelMessage\n                            \n                            \n                                currentDate\n                            \n                            \n                                currentMessageId\n                            \n                            \n                                currentUser\n                            \n                            \n                                cycleStep\n                            \n                            \n                                dropdownState\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isDesktop\n                            \n                            \n                                isEmojiPickerVisible\n                            \n                            \n                                isImageModalOpen\n                            \n                            \n                                isTextareaExpanded\n                            \n                            \n                                largeImageUrl\n                            \n                            \n                                lastOpenedChar\n                            \n                            \n                                lastUsedEmojisReceived\n                            \n                            \n                                lastUsedEmojisSent\n                            \n                            \n                                messages\n                            \n                            \n                                originalMessage\n                            \n                            \n                                originalParentMessage\n                            \n                            \n                                selectedChannel\n                            \n                            \n                                showEditOptions\n                            \n                            \n                                showLargeImage\n                            \n                            \n                                threadMessages\n                            \n                            \n                                tooltipEmoji\n                            \n                            \n                                tooltipPosition\n                            \n                            \n                                tooltipSenderName\n                            \n                            \n                                tooltipVisible\n                            \n                            \n                                    Public\n                                unsubscribeChannels\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeFromReplyCount\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeFromThreadMessages\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeParent\n                            \n                            \n                                    Public\n                                unsubscribeUsers\n                            \n                            \n                                userMap\n                            \n                            \n                                yesterdayDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cycleStep\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dropdownState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"hidden\" | \"user\" | \"channel\"\n\n                    \n                \n                \n                    \n                        Default value : 'hidden'\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmojiPickerVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isImageModalOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTextareaExpanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        largeImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastOpenedChar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalParentMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showLargeImage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipSenderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeFromReplyCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeFromThreadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeParent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yesterdayDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : getYesterdayDateHelper()\n                    \n                \n                    \n                        \n                                Defined in src/app/thread-channel/thread-channel-base.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '../message.models';\nimport { getYesterdayDateHelper } from './thread-channel.date-helpers';\n\nexport class ThreadChannelBase {\n  isTextareaExpanded: boolean = false;\n  selectedChannel: {\n    id: string;\n    name: string;\n    members: any[];\n    description?: string;\n    createdBy?: string;\n  } | null = null;\n  channelMessage: string = '';\n  currentUser: any;\n  imageUrl: string | null = null;\n  isEmojiPickerVisible: boolean = false;\n  isImageModalOpen: boolean = false;\n  tooltipVisible: boolean = false;\n  tooltipPosition = { x: 0, y: 0 };\n  tooltipEmoji: string = '';\n  tooltipSenderName: string = '';\n  lastUsedEmojisSent: string[] = [];\n  lastUsedEmojisReceived: string[] = [];\n  showEditOptions: boolean = false;\n  currentMessageId: string | null = null;\n  originalMessage: any = null;\n  messages: any[] = [];\n  currentDate: Date = new Date();\n  yesterdayDate: Date = getYesterdayDateHelper();\n  originalParentMessage: any = null;\n  threadMessages: Message[] = [];\n  showLargeImage = false;\n  largeImageUrl: string | null = null;\n  isDesktop = false;\n  allUsers: any[] = [];\n  allChannels: any[] = [];\n  dropdownState: 'hidden' | 'user' | 'channel' = 'hidden';\n  cycleStep = 1;\n  lastOpenedChar = '';\n\n  userMap: {\n    [key: string]:\n      | {\n          name: string;\n          avatarUrl: string;\n        }\n      | undefined;\n  } = {};\n\n  public unsubscribeFromThreadMessages?: () => void;\n  public unsubscribeFromReplyCount?: () => void;\n  public unsubscribeChannels: (() => void) | null = null;\n  public unsubscribeUsers: (() => void) | null = null;\n  public unsubscribeParent?: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThreadMessagesBase.html":{"url":"classes/ThreadMessagesBase.html","title":"class - ThreadMessagesBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThreadMessagesBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/thread/thread-messages-base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allChannels\n                            \n                            \n                                allUsers\n                            \n                            \n                                currentDate\n                            \n                            \n                                currentMessageId\n                            \n                            \n                                currentUser\n                            \n                            \n                                cycleStep\n                            \n                            \n                                dropdownState\n                            \n                            \n                                formattedMessageTime\n                            \n                            \n                                formattedParentMessageDate\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isDesktop\n                            \n                            \n                                isEmojiPickerVisible\n                            \n                            \n                                isImageModalOpen\n                            \n                            \n                                isTextareaExpanded\n                            \n                            \n                                largeImageUrl\n                            \n                            \n                                lastOpenedChar\n                            \n                            \n                                lastUsedEmojisReceived\n                            \n                            \n                                lastUsedEmojisSent\n                            \n                            \n                                originalMessage\n                            \n                            \n                                privateMessage\n                            \n                            \n                                    Public\n                                recipientCache\n                            \n                            \n                                replyCount\n                            \n                            \n                                showEditOptions\n                            \n                            \n                                showLargeImage\n                            \n                            \n                                threadId\n                            \n                            \n                                threadMessages\n                            \n                            \n                                tooltipEmoji\n                            \n                            \n                                tooltipPosition\n                            \n                            \n                                tooltipSenderName\n                            \n                            \n                                tooltipVisible\n                            \n                            \n                                    Public\n                                unsubscribeChannels\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeEmojiListener\n                            \n                            \n                                    Public\n                                unsubscribeFromThreadMessages\n                            \n                            \n                                    Public\n                                    Optional\n                                unsubscribeParent\n                            \n                            \n                                    Public\n                                unsubscribeReplyCount\n                            \n                            \n                                    Public\n                                unsubscribeUsers\n                            \n                            \n                                userMap\n                            \n                            \n                                yesterdayDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : new Date()\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cycleStep\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dropdownState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"hidden\" | \"user\" | \"channel\"\n\n                    \n                \n                \n                    \n                        Default value : 'hidden'\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formattedMessageTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formattedParentMessageDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmojiPickerVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isImageModalOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTextareaExpanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        largeImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastOpenedChar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUsedEmojisSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipientCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replyCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showLargeImage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipSenderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeEmojiListener\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeFromThreadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unsubscribeParent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeReplyCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yesterdayDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : getYesterdayDateComp()\n                    \n                \n                    \n                        \n                                Defined in src/app/thread/thread-messages-base.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '../message.models';\nimport { getYesterdayDateComp } from './thread.time.helpers';\n\nexport class ThreadMessagesBase {\n  isTextareaExpanded: boolean = false;\n  privateMessage: string = '';\n  currentUser: any;\n  imageUrl: string | null = null;\n  isEmojiPickerVisible: boolean = false;\n  isImageModalOpen: boolean = false;\n  tooltipVisible: boolean = false;\n  tooltipPosition = { x: 0, y: 0 };\n  tooltipEmoji: string = '';\n  tooltipSenderName: string = '';\n  lastUsedEmojisSent: string[] = [];\n  lastUsedEmojisReceived: string[] = [];\n  showEditOptions: boolean = false;\n  currentMessageId: string | null = null;\n  originalMessage: any = null;\n  yesterdayDate: Date = getYesterdayDateComp();\n  currentDate: Date = new Date();\n  formattedParentMessageDate: string = '';\n  formattedMessageTime: string = '';\n  threadId!: string;\n  replyCount: number = 0;\n  threadMessages: Message[] = [];\n  showLargeImage = false;\n  largeImageUrl: string | null = null;\n  isDesktop = false;\n  allUsers: any[] = [];\n  allChannels: any[] = [];\n  dropdownState: 'hidden' | 'user' | 'channel' = 'hidden';\n  cycleStep = 1;\n  lastOpenedChar = '';\n\n  userMap: {\n    [key: string]:\n      | {\n          name: string;\n          avatarUrl: string;\n        }\n      | undefined;\n  } = {};\n\n  public recipientCache: Map = new Map();\n  public unsubscribeFromThreadMessages: (() => void) | null = null;\n  public unsubscribeEmojiListener?: () => void;\n  public unsubscribeReplyCount: (() => void) | null = null;\n  public unsubscribeChannels: (() => void) | null = null;\n  public unsubscribeUsers: (() => void) | null = null;\n  public unsubscribeParent?: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThreadService.html":{"url":"injectables/ThreadService.html","title":"injectable - ThreadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThreadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/thread.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addEmojiToThreadMessage\n                            \n                            \n                                    Private\n                                buildThreadMessagesQuery\n                            \n                            \n                                    Private\n                                extractThreadEmojis\n                            \n                            \n                                    Private\n                                    Async\n                                fetchThreadEmojis\n                            \n                            \n                                    Private\n                                    Async\n                                getExistingThreadEmojis\n                            \n                            \n                                    Async\n                                getLastUsedThreadEmojis\n                            \n                            \n                                getThreadMessagesLive\n                            \n                            \n                                    Private\n                                incrementOrAddEmoji\n                            \n                            \n                                listenForThreadDetails\n                            \n                            \n                                listenForThreadEmojiUpdates\n                            \n                            \n                                    Private\n                                mapThreadSnapshot\n                            \n                            \n                                    Private\n                                mergeNewAndExistingEmojis\n                            \n                            \n                                    Private\n                                resolveFieldName\n                            \n                            \n                                    Async\n                                saveLastUsedThreadEmojis\n                            \n                            \n                                    Private\n                                    Async\n                                storeThreadEmojis\n                            \n                            \n                                    Private\n                                    Async\n                                updateThreadEmojisInDoc\n                            \n                            \n                                    Async\n                                updateThreadLastResponseTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/thread.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addEmojiToThreadMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addEmojiToThreadMessage(threadId: string, emoji: string, senderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                senderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildThreadMessagesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildThreadMessagesQuery(threadId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractThreadEmojis(data: any, type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        fetchThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchThreadEmojis(threadId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getExistingThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingThreadEmojis(threadId: string, field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLastUsedThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastUsedThreadEmojis(threadId: string, type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getThreadMessagesLive\n                        \n                    \n                \n            \n            \n                \ngetThreadMessagesLive(threadId: string, callback: (messages: any[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        incrementOrAddEmoji\n                        \n                    \n                \n            \n            \n                \n                        \n                    incrementOrAddEmoji(emojis: literal type[], newEmoji: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emojis\n                                            \n                                                        literal type[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenForThreadDetails\n                        \n                    \n                \n            \n            \n                \nlistenForThreadDetails(threadId: string, callback: (data: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenForThreadEmojiUpdates\n                        \n                    \n                \n            \n            \n                \nlistenForThreadEmojiUpdates(threadId: string, callback: (sentEmojis: string[],receivedEmojis: string[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapThreadSnapshot\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapThreadSnapshot(snapshot: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                snapshot\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     any[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mergeNewAndExistingEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    mergeNewAndExistingEmojis(newEmojis: string[], existing: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newEmojis\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                existing\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resolveFieldName\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveFieldName(type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveLastUsedThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveLastUsedThreadEmojis(threadId: string, newEmojis: string[], type: \"sent\" | \"received\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmojis\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"sent\" | \"received\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        storeThreadEmojis\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeThreadEmojis(threadId: string, field: string, emojis: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emojis\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateThreadEmojisInDoc\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateThreadEmojisInDoc(threadId: string, emojis: literal type[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                emojis\n                                            \n                                                        literal type[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateThreadLastResponseTime\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateThreadLastResponseTime(threadId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/thread.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                threadId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  doc,\n  getDoc,\n  updateDoc,\n  setDoc,\n  collection,\n} from '@angular/fire/firestore';\nimport { query, where, orderBy, onSnapshot } from '@angular/fire/firestore';\nimport { serverTimestamp } from 'firebase/firestore';\nimport { FirestoreMessageData } from './message.models';\nimport { getAuth } from 'firebase/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThreadService {\n  constructor(private firestore: Firestore) {}\n\n  listenForThreadDetails(\n    threadId: string,\n    callback: (data: any) => void\n  ): () => void {\n    const threadDocRef = doc(this.firestore, 'messages', threadId);\n    return onSnapshot(\n      threadDocRef,\n      (docSnap) => {\n        if (docSnap.exists()) {\n          callback(docSnap.data());\n        } else {\n        }\n      },\n      (error) => {}\n    );\n  }\n\n  async updateThreadLastResponseTime(threadId: string): Promise {\n    const messageRef = doc(this.firestore, 'messages', threadId);\n    await updateDoc(messageRef, {\n      lastResponseTime: serverTimestamp(),\n    });\n  }\n\n  async addEmojiToThreadMessage(\n    threadId: string,\n    emoji: string,\n    senderId: string\n  ): Promise {\n    const emojis = await this.fetchThreadEmojis(threadId);\n    this.incrementOrAddEmoji(emojis, emoji);\n    await this.updateThreadEmojisInDoc(threadId, emojis);\n\n    const type = senderId === getAuth().currentUser?.uid ? 'sent' : 'received';\n    await this.saveLastUsedThreadEmojis(threadId, [emoji], type);\n  }\n\n  private async fetchThreadEmojis(\n    threadId: string\n  ): Promise {\n    const ref = doc(this.firestore, 'messages', threadId);\n    const snap = await getDoc(ref);\n    if (!snap.exists()) return [];\n    const data = snap.data() as FirestoreMessageData;\n    return data.content?.emojis || [];\n  }\n\n  private incrementOrAddEmoji(\n    emojis: { emoji: string; count: number }[],\n    newEmoji: string\n  ): void {\n    const existing = emojis.find((e) => e.emoji === newEmoji);\n    existing\n      ? (existing.count += 1)\n      : emojis.push({ emoji: newEmoji, count: 1 });\n  }\n\n  private async updateThreadEmojisInDoc(\n    threadId: string,\n    emojis: { emoji: string; count: number }[]\n  ): Promise {\n    const ref = doc(this.firestore, 'messages', threadId);\n    await updateDoc(ref, { 'content.emojis': emojis });\n  }\n\n  getThreadMessagesLive(\n    threadId: string,\n    callback: (messages: any[]) => void\n  ): () => void {\n    if (!threadId) return () => {};\n    const queryRef = this.buildThreadMessagesQuery(threadId);\n    const unsubscribe = onSnapshot(\n      queryRef,\n      (snap) => callback(this.mapThreadSnapshot(snap)),\n      () => {}\n    );\n    return unsubscribe;\n  }\n\n  private buildThreadMessagesQuery(threadId: string) {\n    const ref = collection(this.firestore, 'messages');\n    return query(\n      ref,\n      where('type', '==', 'thread'),\n      where('threadId', '==', threadId),\n      orderBy('timestamp', 'asc')\n    );\n  }\n\n  private mapThreadSnapshot(snapshot: any): any[] {\n    return snapshot.docs.map((docSnap: any) => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        ...data,\n        parentId:\n          data['parentId'] !== data['threadId'] ? data['parentId'] : null,\n      };\n    });\n  }\n\n  async saveLastUsedThreadEmojis(\n    threadId: string,\n    newEmojis: string[],\n    type: 'sent' | 'received'\n  ): Promise {\n    if (!threadId) return;\n    const field = this.resolveFieldName(type);\n    const existing = await this.getExistingThreadEmojis(threadId, field);\n    const updated = this.mergeNewAndExistingEmojis(newEmojis, existing);\n    await this.storeThreadEmojis(threadId, field, updated);\n  }\n\n  private resolveFieldName(type: 'sent' | 'received'): string {\n    return type === 'sent' ? 'lastUsedEmojisSent' : 'lastUsedEmojisReceived';\n  }\n\n  private async getExistingThreadEmojis(\n    threadId: string,\n    field: string\n  ): Promise {\n    const ref = doc(this.firestore, 'messages', threadId);\n    const snap = await getDoc(ref);\n    if (!snap.exists()) return [];\n    const data = snap.data() || {};\n    return data[field] || [];\n  }\n\n  private mergeNewAndExistingEmojis(\n    newEmojis: string[],\n    existing: string[]\n  ): string[] {\n    return [...new Set([...newEmojis, ...existing])].slice(0, 2);\n  }\n\n  private async storeThreadEmojis(\n    threadId: string,\n    field: string,\n    emojis: string[]\n  ): Promise {\n    const ref = doc(this.firestore, 'messages', threadId);\n    await setDoc(ref, { [field]: emojis }, { merge: true });\n  }\n\n  async getLastUsedThreadEmojis(\n    threadId: string,\n    type: 'sent' | 'received'\n  ): Promise {\n    if (!threadId) return [];\n    try {\n      const ref = doc(this.firestore, 'messages', threadId);\n      const snap = await getDoc(ref);\n      if (!snap.exists()) return [];\n      return this.extractThreadEmojis(snap.data(), type);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private extractThreadEmojis(data: any, type: 'sent' | 'received'): string[] {\n    const field =\n      type === 'sent' ? 'lastUsedEmojisSent' : 'lastUsedEmojisReceived';\n    const emojis = data[field] || [];\n    return emojis.slice(0, 2);\n  }\n\n  listenForThreadEmojiUpdates(\n    threadId: string,\n    callback: (sentEmojis: string[], receivedEmojis: string[]) => void\n  ): () => void {\n    if (!threadId) return () => {};\n    const docRef = doc(this.firestore, 'messages', threadId);\n\n    return onSnapshot(docRef, (docSnapshot) => {\n      if (docSnapshot.exists()) {\n        const data = docSnapshot.data() || {};\n        const updatedEmojisSent = data['lastUsedEmojisSent']?.slice(0, 2) || [];\n        const updatedEmojisReceived =\n          data['lastUsedEmojisReceived']?.slice(0, 2) || [];\n        callback(updatedEmojisSent, updatedEmojisReceived);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                getAllUsersLive\n                            \n                            \n                                getAllUsersRealTime\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                getCurrentUserId\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsersByFirstLetter\n                            \n                            \n                                    Private\n                                    Async\n                                handleLogout\n                            \n                            \n                                    Private\n                                    Async\n                                handleNoUserSignedIn\n                            \n                            \n                                    Private\n                                    Async\n                                handleSignedInUser\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Private\n                                    Async\n                                performEmailUpdate\n                            \n                            \n                                    Private\n                                    Async\n                                reauthenticateUser\n                            \n                            \n                                    Private\n                                    Async\n                                sendVerificationEmail\n                            \n                            \n                                    Async\n                                updateEmailInFirestore\n                            \n                            \n                                    Async\n                                updateUserAvatar\n                            \n                            \n                                    Async\n                                updateUserEmail\n                            \n                            \n                                    Async\n                                updateUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, storage: Storage, router: Router, appStateService: AppStateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/user.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                    Storage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appStateService\n                                                  \n                                                        \n                                                                        AppStateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:170\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUsersLive\n                        \n                    \n                \n            \n            \n                \ngetAllUsersLive(callback: (users: any[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUsersRealTime\n                        \n                    \n                \n            \n            \n                \ngetAllUsersRealTime(callback: (users: any[]) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:215\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserId\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:199\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsersByFirstLetter\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsersByFirstLetter(firstLetter: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                firstLetter\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogout(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleNoUserSignedIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoUserSignedIn(user: User | null, reject: (reason: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reject\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleSignedInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSignedInUser(user: User, resolve: (value: any) => void, reject: (reason: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resolve\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reject\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:239\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        performEmailUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    performEmailUpdate(user: User, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        reauthenticateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    reauthenticateUser(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendVerificationEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendVerificationEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEmailInFirestore\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEmailInFirestore(uid: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserAvatar(avatarDataUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                avatarDataUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserEmail(newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserName(newName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/user.service.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  updateDoc,\n  doc,\n  getDoc,\n  collection,\n  getDocs,\n  query,\n  where,\n  onSnapshot,\n  deleteDoc,\n} from '@angular/fire/firestore';\nimport {\n  getAuth,\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  User,\n  onAuthStateChanged,\n  sendEmailVerification,\n  updateEmail,\n  signOut,\n} from 'firebase/auth';\nimport { Storage } from '@angular/fire/storage';\nimport { Router } from '@angular/router';\nimport { AppStateService } from './app-state.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(\n    private firestore: Firestore,\n    private storage: Storage,\n    private router: Router,\n    private appStateService: AppStateService\n  ) {}\n\n  async getCurrentUserData(): Promise {\n    const auth = getAuth();\n    return new Promise((resolve, reject) => {\n      onAuthStateChanged(auth, async (user) => {\n        if (user && user.uid) {\n          await this.handleSignedInUser(user, resolve, reject);\n        } else {\n          await this.handleNoUserSignedIn(user, reject);\n        }\n      });\n    });\n  }\n\n  private async handleSignedInUser(\n    user: User,\n    resolve: (value: any) => void,\n    reject: (reason?: any) => void\n  ): Promise {\n    try {\n      const userDocRef = doc(this.firestore, 'users', user.uid);\n      const userDocSnap = await getDoc(userDocRef);\n\n      if (!userDocSnap.exists()) {\n        return reject(new Error('User not found.'));\n      }\n      await updateDoc(userDocRef, { isOnline: true });\n      resolve({ ...userDocSnap.data(), id: user.uid });\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  private async handleNoUserSignedIn(\n    user: User | null,\n    reject: (reason?: any) => void\n  ): Promise {\n    try {\n      if (user?.uid) {\n        const userRef = doc(this.firestore, 'users', user.uid);\n        await updateDoc(userRef, { isOnline: false });\n      }\n    } catch (error) {}\n    reject(new Error('No user signed in.'));\n  }\n\n  async updateUserEmail(newEmail: string): Promise {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    if (!user || !user.uid) throw new Error('No user signed in.');\n\n    try {\n      await this.reauthenticateUser(user);\n      await this.performEmailUpdate(user, newEmail);\n      localStorage.setItem('newEmail', newEmail);\n      await this.updateEmailInFirestore(user.uid, newEmail);\n      await this.sendVerificationEmail(user);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error(String(error));\n      }\n    }\n  }\n\n  private async performEmailUpdate(\n    user: User,\n    newEmail: string\n  ): Promise {\n    await updateEmail(user, newEmail);\n  }\n\n  private async sendVerificationEmail(user: User): Promise {\n    const actionCodeSettings = {\n      url: 'http://localhost:4200/verify-email',\n      handleCodeInApp: true,\n    };\n    await sendEmailVerification(user, actionCodeSettings);\n  }\n\n  async updateEmailInFirestore(uid: string, newEmail: string): Promise {\n    const userDocRef = doc(this.firestore, 'users', uid);\n    await updateDoc(userDocRef, { email: newEmail });\n  }\n\n  private async reauthenticateUser(user: User): Promise {\n    const password = prompt(\n      'Bitte geben Sie Ihr Passwort ein, um fortzufahren:'\n    );\n    if (password) {\n      const credential = EmailAuthProvider.credential(user.email!, password);\n      try {\n        await reauthenticateWithCredential(user, credential);\n      } catch (error) {\n        throw new Error(\n          'Reauthentifizierung fehlgeschlagen. Bitte überprüfen Sie Ihr Passwort.'\n        );\n      }\n    } else {\n      throw new Error('Passwort erforderlich für die Reauthentifizierung.');\n    }\n  }\n\n  async updateUserAvatar(avatarDataUrl: string): Promise {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (user && user.uid) {\n      const userDocRef = doc(this.firestore, 'users', user.uid);\n      await updateDoc(userDocRef, {\n        avatarUrl: avatarDataUrl,\n      });\n    } else {\n      throw new Error('Kein Benutzer angemeldet.');\n    }\n  }\n\n  async updateUserName(newName: string): Promise {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (user && user.uid) {\n      const userDocRef = doc(this.firestore, 'users', user.uid);\n      await updateDoc(userDocRef, {\n        name: newName,\n      });\n    } else {\n      throw new Error('Kein Benutzer angemeldet.');\n    }\n  }\n\n  async getAllUsers(): Promise {\n    const usersCollection = collection(this.firestore, 'users');\n    const querySnapshot = await getDocs(usersCollection);\n    const users: any[] = [];\n    querySnapshot.forEach((doc) => {\n      users.push({ id: doc.id, ...doc.data() });\n    });\n    return users;\n  }\n\n  async getUsersByFirstLetter(firstLetter: string): Promise {\n    const usersCollection = collection(this.firestore, 'users');\n\n    const q = query(\n      usersCollection,\n      where('name', '>=', firstLetter),\n      where('name', ' {\n      users.push(doc.data());\n    });\n\n    return users;\n  }\n\n  getCurrentUserId(): string | null {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    return user ? user.uid : null;\n  }\n\n  async getUserById(userId: string): Promise {\n    const userDocRef = doc(this.firestore, 'users', userId);\n    const userDocSnap = await getDoc(userDocRef);\n    if (userDocSnap.exists()) {\n      return userDocSnap.data();\n    } else {\n      throw new Error('Benutzer nicht gefunden.');\n    }\n  }\n\n  getAllUsersRealTime(callback: (users: any[]) => void): void {\n    const usersCollection = collection(this.firestore, 'users');\n    onSnapshot(usersCollection, (snapshot) => {\n      const users = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      callback(users);\n    });\n  }\n\n  getAllUsersLive(callback: (users: any[]) => void): () => void {\n    const usersCollection = collection(this.firestore, 'users');\n\n    const unsubscribe = onSnapshot(usersCollection, (snapshot) => {\n      const users = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      callback(users);\n    });\n    return unsubscribe;\n  }\n\n  async logout(): Promise {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    if (!user) return;\n\n    try {\n      await this.handleLogout(user);\n      this.appStateService.setShowWelcomeContainer(true);\n      this.router.navigate(['/login']);\n    } catch {}\n  }\n\n  private async handleLogout(user: User): Promise {\n    const auth = getAuth();\n    const userDocRef = doc(this.firestore, 'users', user.uid);\n    const userDocSnap = await getDoc(userDocRef);\n\n    if (!userDocSnap.exists()) {\n      await signOut(auth);\n      return;\n    }\n\n    const userData = userDocSnap.data() as any;\n    if (userData.name && userData.name.startsWith('Guest')) {\n      await deleteDoc(userDocRef);\n    } else {\n      await updateDoc(userDocRef, { isOnline: false });\n    }\n\n    await signOut(auth);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VerifyEmailComponent.html":{"url":"components/VerifyEmailComponent.html","title":"component - VerifyEmailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  VerifyEmailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/verify-email/verify-email.component.ts\n\n\n\n    \n        Description\n    \n    \n        The VerifyEmailComponent listens for email verification links from Firebase,\nattempts to verify the user's email, and updates the email in Firebase Auth.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-verify-email\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                                HeaderComponent\n                            RouterModule\n                                FooterComponent\n                \n            \n\n            \n                styleUrls\n                ./verify-email.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./verify-email.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editableUserEmail\n                            \n                            \n                                email\n                            \n                            \n                                errorMessage\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                    Private\n                                    Async\n                                submitSignInLink\n                            \n                            \n                                    Private\n                                    Async\n                                verifySignInLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/verify-email/verify-email.component.ts:59\n                            \n                        \n\n                \n                    \n                            Constructs the component, injecting the Router for navigation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/verify-email/verify-email.component.ts:70\n                        \n                    \n\n\n            \n                \n                        OnInit checks if the current URL is a valid sign-in link, attempts to verify the email,\nand if successful, updates the email in Firebase and redirects to chat.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/verify-email/verify-email.component.ts:90\n                        \n                    \n\n\n            \n                \n                        onSubmit can be triggered if there's a form for manually entering the email.\nIt will similarly verify the email link and update the user's email address.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        submitSignInLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitSignInLink(firebaseAuth: any, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/verify-email/verify-email.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Signs in with the provided editableUserEmail, sets a success message, updates the email in Firebase,\nremoves it from localStorage, and navigates to the chat page.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                firebaseAuth\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifySignInLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifySignInLink(firebaseAuth: any, storedEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/verify-email/verify-email.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Signs in with the existing email link, sets a success message, updates the email in Firebase,\nremoves it from localStorage, and navigates to the chat page.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                firebaseAuth\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storedEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        editableUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/verify-email/verify-email.component.ts:44\n                        \n                    \n\n            \n                \n                    A variable for editing the user's email in a form (if needed).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/verify-email/verify-email.component.ts:49\n                        \n                    \n\n            \n                \n                    Stores the email retrieved from localStorage if the user was updating it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/verify-email/verify-email.component.ts:59\n                        \n                    \n\n            \n                \n                    An error message displayed if verification fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/verify-email/verify-email.component.ts:54\n                        \n                    \n\n            \n                \n                    A success message displayed after successful verification.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport {\n  getAuth,\n  isSignInWithEmailLink,\n  signInWithEmailLink,\n  updateEmail,\n} from 'firebase/auth';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from '../header/header.component';\nimport { RouterModule } from '@angular/router';\nimport { FooterComponent } from '../footer/footer.component';\n\n/**\n * The VerifyEmailComponent listens for email verification links from Firebase,\n * attempts to verify the user's email, and updates the email in Firebase Auth.\n */\n@Component({\n  selector: 'app-verify-email',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    HeaderComponent,\n    RouterModule,\n    FooterComponent,\n  ],\n  templateUrl: './verify-email.component.html',\n  styleUrls: ['./verify-email.component.scss'],\n})\nexport class VerifyEmailComponent implements OnInit {\n  /**\n   * A variable for editing the user's email in a form (if needed).\n   */\n  editableUserEmail: string = '';\n\n  /**\n   * Stores the email retrieved from localStorage if the user was updating it.\n   */\n  email: string | null = null;\n\n  /**\n   * A success message displayed after successful verification.\n   */\n  successMessage: string = '';\n\n  /**\n   * An error message displayed if verification fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Constructs the component, injecting the Router for navigation.\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * OnInit checks if the current URL is a valid sign-in link, attempts to verify the email,\n   * and if successful, updates the email in Firebase and redirects to chat.\n   */\n  async ngOnInit() {\n    const firebaseAuth = getAuth();\n    const storedEmail = localStorage.getItem('newEmail');\n    this.email = storedEmail;\n    if (!isSignInWithEmailLink(firebaseAuth, window.location.href)) {\n      this.errorMessage = 'Invalid verification link.';\n      return;\n    }\n    if (!storedEmail) return;\n    try {\n      await this.verifySignInLink(firebaseAuth, storedEmail);\n    } catch (error) {\n      this.errorMessage = 'Error verifying the email.';\n    }\n  }\n\n  /**\n   * onSubmit can be triggered if there's a form for manually entering the email.\n   * It will similarly verify the email link and update the user's email address.\n   */\n  async onSubmit() {\n    const firebaseAuth = getAuth();\n    if (!isSignInWithEmailLink(firebaseAuth, window.location.href)) return;\n    try {\n      await this.submitSignInLink(firebaseAuth, this.editableUserEmail);\n    } catch (error) {\n      this.errorMessage = 'Error verifying the email.';\n    }\n  }\n\n  /**\n   * Signs in with the existing email link, sets a success message, updates the email in Firebase,\n   * removes it from localStorage, and navigates to the chat page.\n   */\n  private async verifySignInLink(\n    firebaseAuth: any,\n    storedEmail: string\n  ): Promise {\n    await signInWithEmailLink(firebaseAuth, storedEmail, window.location.href);\n    this.successMessage = 'E-Mail successfully verified.';\n    const user = firebaseAuth.currentUser;\n    if (!user) return;\n    await updateEmail(user, storedEmail);\n    localStorage.removeItem('newEmail');\n    this.router.navigate(['/chat']);\n  }\n\n  /**\n   * Signs in with the provided editableUserEmail, sets a success message, updates the email in Firebase,\n   * removes it from localStorage, and navigates to the chat page.\n   */\n  private async submitSignInLink(\n    firebaseAuth: any,\n    email: string\n  ): Promise {\n    await signInWithEmailLink(firebaseAuth, email, window.location.href);\n    this.successMessage = 'Email successfully verified.';\n    const user = firebaseAuth.currentUser;\n    if (!user) return;\n    await updateEmail(user, email);\n    localStorage.removeItem('newEmail');\n    this.router.navigate(['/chat']);\n  }\n}\n  \n\n    \n\n    \n        \n\n  Verifizierung der E-Mail-Adresse\n  \n    Bitte geben Sie Ihre E-Mail-Adresse ein, um den Verifizierungsprozess\n    abzuschließen:\n  \n  Verifiziere E-Mail für: {{ email }}\n\n  \n    E-Mail-Adresse:\n    \n    E-Mail bestätigen\n  \n\n  {{ errorMessage }}\n  {{ successMessage }}\n\n\n\n    \n\n    \n                \n                    ./verify-email.component.scss\n                \n                @import \"./../../styles.scss\";\n\n.container {\n  @include dFlex(center, center, null);\n  width: 100%;\n  background-color: $lightblue;\n  padding: 160px 0;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.login-container {\n  text-align: center;\n  background-color: white;\n  border-radius: 30px;\n  box-shadow: 0px 2px 10px 0px #00000014;\n  max-width: 606px;\n  width: 100%;\n  position: relative;\n\n  .errorMessage {\n    width: 100%;\n    display: flex;\n    align-items: center;\n  }\n\n  .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 40px 40px;\n\n    .box {\n      @include dFlex(null, null, 20px);\n      flex-direction: column;\n      max-width: 512px;\n      width: 100%;\n    }\n\n    .konto-container {\n      @include dFlex(null, center, null);\n      flex-direction: row-reverse;\n    }\n\n    .image-container {\n      position: absolute;\n      top: 45px;\n      left: 32px;\n      border-radius: 50%;\n      width: 40px;\n      height: 40px;\n      transition: background-color 0.3s;\n      overflow: hidden;\n      z-index: 1;\n      align-content: center;\n\n      &:hover {\n        filter: brightness(100%);\n        background-color: $lightblue;\n      }\n\n      img {\n        object-fit: cover;\n        border-radius: 50%;\n        transition: transform 0.3s;\n        cursor: pointer;\n\n        &:hover {\n          filter: brightness(0) saturate(100%) invert(35%) sepia(62%)\n            saturate(2733%) hue-rotate(225deg) brightness(93%) contrast(104%);\n        }\n      }\n    }\n\n    h2 {\n      color: $button-blue;\n      font-size: 46px;\n      font-weight: 700;\n      margin: 0;\n      flex-grow: 1;\n      text-align: center;\n      max-width: 491px;\n      width: 100%;\n      line-height: 55.2px;\n    }\n\n    p {\n      color: black;\n      font-size: 20px;\n      font-weight: 400;\n      margin: 0;\n    }\n\n    a {\n      color: $middleblue;\n      font-size: 18px;\n      font-weight: 400;\n      text-decoration: none;\n      transition: background-color 0.3s, border-radius 0.3s, padding 0.3s;\n    }\n\n    .button-container {\n      @include dFlex(flex-end, null, null);\n      max-width: 500px;\n      width: 100%;\n\n      .error-message p {\n        color: red !important;\n        font-weight: bold;\n        width: 70%;\n      }\n\n      .success-message p {\n        color: green;\n        font-weight: bold;\n      }\n    }\n\n    form {\n      max-width: 500px;\n      width: 100%;\n\n      input {\n        background: $lightblue;\n        border-radius: 100px;\n        color: #686868;\n        font-size: 18px;\n        font-weight: 500;\n        height: 60px;\n        width: 100%;\n        border: 1px solid transparent;\n        cursor: pointer;\n        box-sizing: border-box;\n        max-width: 500px;\n\n        &:hover {\n          border-color: #686868;\n          transition: border-color 0.3s;\n        }\n\n        &:focus,\n        &:focus-within {\n          outline: none;\n          border-color: $button-blue;\n        }\n\n        &:not(:focus) {\n          &:has(+ input:focus) {\n            border-color: blue;\n          }\n        }\n      }\n\n      .privacy-box {\n        @include dFlex(center, center, 8px);\n        width: 100%;\n\n        p {\n          @include dFlex(null, center, 4px);\n          color: #686868;\n          font-size: 20px;\n          font-weight: 400;\n          width: 100%;\n          max-width: 354px;\n          margin-top: 40px;\n        }\n      }\n\n      .error-message {\n        font-size: 14px;\n        color: #ed1e79;\n        font-weight: 400;\n        text-align: left;\n        text-align: center;\n        width: 100%;\n        max-width: 320px;\n        align-items: flex-end;\n        display: flex;\n      }\n\n      .input-container {\n        margin-top: 40px;\n      }\n\n      .email-icon {\n        background-image: url(\"/assets/img/mail.png \");\n        background-repeat: no-repeat;\n        background-position: 15px center;\n        background-size: 24px 24px;\n        color: black;\n        transition: background-image 0.3s ease;\n        padding-left: 70px;\n      }\n\n      .filled {\n        &.email-icon {\n          background-image: url(\"/assets/img/black-mail.png\");\n        }\n      }\n    }\n  }\n}\n\n.button-anmelden {\n  width: 170px;\n  font-size: 16px;\n  margin-top: 40px;\n}\n\n.registration-ok {\n  max-width: 441px;\n  gap: 28px;\n}\n\n@media (max-width: 780px) {\n  .login-container .login {\n    form {\n      .privacy-box p {\n        margin-top: 20px;\n        font-size: 14px;\n      }\n    }\n  }\n\n  .login-container .login .image-container {\n    width: unset;\n  }\n\n  .box {\n    @include dFlex(null, null, 10px);\n    flex-direction: column;\n    max-width: 345px;\n    width: 100px;\n  }\n\n  .login-container .login .image-container {\n    left: 22px;\n  }\n\n  .login-container {\n    width: unset;\n  }\n\n  .container {\n    padding: 10rem 2rem;\n    box-sizing: border-box;\n  }\n\n  .login-container .login p {\n    margin: 0 auto;\n    padding: unset;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    max-width: 320px;\n  }\n\n  .login-container .login form .error-message {\n    font-size: 11px;\n  }\n\n  .login-container .login form .input-container input {\n    font-size: 14px;\n  }\n\n  .login-container .login form .input-container {\n    margin-top: 20px;\n  }\n\n  .button-container {\n    gap: 30px;\n  }\n\n  .login-container .login .box {\n    gap: 20px;\n    max-width: 346px;\n  }\n\n  .login-container .login form {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .login-container .login {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .login-container .login h2 {\n    line-height: 35.2px;\n  }\n\n  .login-container .login h2 {\n    font-size: 36px;\n  }\n\n  .button-anmelden {\n    margin-top: 20px;\n  }\n}\n\n@media (max-width: 520px) {\n  .login-container .login .image-container {\n    top: unset;\n  }\n\n  .registration-ok {\n    padding: unset;\n  }\n\n  .login-container .login h2 {\n    font-size: 30px;\n    width: 100%;\n    max-width: 300px;\n    line-height: 35.2px;\n  }\n\n  .login-container .login .box {\n    gap: 10px;\n  }\n\n  .login-container .login .image-container {\n    height: 30px;\n  }\n\n  .login-container .login .konto-container {\n    flex-direction: column;\n  }\n\n  .login-container .login p {\n    width: 300px;\n    justify-content: center;\n  }\n\n  .login-container .login .button-container {\n    gap: 10px;\n  }\n\n  .login-container .login {\n    overflow: hidden;\n    padding: unset;\n  }\n\n  .login-container {\n    padding: 20px;\n    overflow: hidden;\n  }\n\n  .login-container .login form .input-container input {\n    height: 40px;\n  }\n\n  .login-container .login form {\n    max-width: 300px;\n  }\n}\n\n@media (max-width: 390px) {\n  .login-container .login {\n    width: 260px;\n  }\n\n  .login-container .login p {\n    width: 260px;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Verifizierung der E-Mail-Adresse      Bitte geben Sie Ihre E-Mail-Adresse ein, um den Verifizierungsprozess    abzuschließen:    Verifiziere E-Mail für: {{ email }}      E-Mail-Adresse:        E-Mail bestätigen    {{ errorMessage }}  {{ successMessage }}'\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'VerifyEmailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WelcomeScreenComponent.html":{"url":"components/WelcomeScreenComponent.html","title":"component - WelcomeScreenComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  WelcomeScreenComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/welcome-screen/welcome-screen.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-welcome-screen\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./welcome-screen.component.html\n            \n\n\n\n            \n                styleUrl\n                ./welcome-screen.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome-screen',\n  standalone: true,\n  imports: [],\n  templateUrl: './welcome-screen.component.html',\n  styleUrl: './welcome-screen.component.scss'\n})\nexport class WelcomeScreenComponent {\n\n}\n\n    \n\n    \n        \n  \n    Willkommen bei DAbubble!\n    Deine Features im Überblick:\n\n    \n      Direkt-Nachrichten schreiben\n      Channels erstellen und beitreten\n      Auf Channel-Nachrichten in Threads antworten\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Willkommen bei DAbubble!    Deine Features im Überblick:          Direkt-Nachrichten schreiben      Channels erstellen und beitreten      Auf Channel-Nachrichten in Threads antworten      '\n    var COMPONENTS = [{'name': 'AddMembersDialogComponent', 'selector': 'app-add-members-dialog'},{'name': 'AddMembersDialogMobileComponent', 'selector': 'app-add-members-dialog-mobile'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthActionComponent', 'selector': 'app-auth-action'},{'name': 'AvatarComponent', 'selector': 'app-avatar'},{'name': 'ChannelDialogComponent', 'selector': 'app-channel-dialog'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChatHeaderComponent', 'selector': 'app-chat-header'},{'name': 'DevspaceComponent', 'selector': 'app-devspace'},{'name': 'DirectMessagesComponent', 'selector': 'app-direct-messages'},{'name': 'EditChannelDialogComponent', 'selector': 'app-edit-channel-dialog'},{'name': 'EntwicklerteamComponent', 'selector': 'app-entwicklerteam'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'InnerChannelComponent', 'selector': 'app-inner-channel'},{'name': 'IntroComponent', 'selector': 'app-intro'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MemberListDialogComponent', 'selector': 'app-member-list-dialog'},{'name': 'MembersDialogComponent', 'selector': 'app-mitglieder-dialog'},{'name': 'MemberSectionDialogComponent', 'selector': 'app-member-section-dialog'},{'name': 'NewPasswortComponent', 'selector': 'app-new-passwort'},{'name': 'PasswortResetComponent', 'selector': 'app-passwort-reset'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'PrivateMessagesComponent', 'selector': 'app-private-messages'},{'name': 'ProfilDialogComponent', 'selector': 'app-profil-dialog'},{'name': 'SearchFieldComponent', 'selector': 'app-search-field'},{'name': 'SelectedMembersDialogComponent', 'selector': 'app-selected-members-dialog'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'ThreadChannelComponent', 'selector': 'app-thread-channel'},{'name': 'ThreadComponent', 'selector': 'app-thread'},{'name': 'VerifyEmailComponent', 'selector': 'app-verify-email'},{'name': 'WelcomeScreenComponent', 'selector': 'app-welcome-screen'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'WelcomeScreenComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.0\n        \n            @angular/cdk : ^17.3.10\n        \n            @angular/common : ^17.3.0\n        \n            @angular/compiler : ^17.3.0\n        \n            @angular/core : ^17.3.0\n        \n            @angular/fire : ^17.1.0\n        \n            @angular/forms : ^17.3.0\n        \n            @angular/material : ^17.3.10\n        \n            @angular/platform-browser : ^17.3.0\n        \n            @angular/platform-browser-dynamic : ^17.3.0\n        \n            @angular/router : ^17.3.0\n        \n            @ctrl/ngx-emoji-mart : ^9.2.0\n        \n            cors : ^2.8.5\n        \n            firebase : ^10.12.5\n        \n            perfect-scrollbar : ^1.5.5\n        \n            rxjs : ~7.8.0\n        \n            simplebar : ^6.2.7\n        \n            simplebar-angular : ^3.2.6\n        \n            tslib : ^2.3.0\n        \n            validator : ^13.12.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDABubble\nDABubble is an Angular-based chat application (TypeScript + SCSS) that uses Firebase (Firestore & Auth) as its backend. It enables real-time communication in channels (Channels), threads, and private messages (direct messages). Additionally, users can customize their profile (avatar, name, email address).\nTable of Contents\n\nOverview  \nFeatures  \nTechnologies  \nInstallation  \nUsage  \nTests  \nScreenshots (Optional)  \nProject Structure  \nContributing  \nLicense\nDocumentation (Optional, using Compodoc)\n\n\nOverview\nThe DABubble app was created to provide an intuitive and responsive chat experience. Users can write messages in channels or thread-channels and invite other members. Additionally, there are private messages (1:1 chats) and threads for in-depth conversations.\nThere is also a guest mode for those who prefer not to register. Users can personalize their profiles by adjusting their avatar, display name, and email address.\n\nFeatures\n\nChannels & Threads  \n\nChannels with multiple participants and real-time updates  \nThreads or thread-channels for structured, topic-specific discussions\n\n\nPrivate Messages (DM)  \n\n1:1 communication  \nThread support in private chats\n\n\nProfile Management  \n\nEdit avatar/profile picture, name, and email  \nOnline/offline status in real time\n\n\nMessage Editing  \n\nEdit or delete messages, add emojis, upload images\n\n\nAuthentication  \n\nEmail/password registration or guest login  \nPassword reset  \nLegal notice (Impressum) and privacy policy\n\n\nResponsive Design  \n\nDesktop and mobile support  \nNo separate mobile app required\n\n\n\n\nTechnologies\n\nAngular (TypeScript + SCSS)  \nFirebase  \nFirestore (real-time database)  \nFirebase Auth (registration & login)  \nOptional: Firebase Storage (images)\n\n\nAngular CLI (e.g., version 17.x)\n\n(Adjust the version number to match your actual environment.)\n\nInstallation\nPrerequisites\n\nNode.js (version 16 or higher)  \nNPM or Yarn  \nAngular CLI (optional)  \nFirebase account (for Firestore/Auth)\n\nSteps\n\nClone the repository  Example :git clone https://github.com/Seldir193/DABubble.git\ncd dabubble\nnpm install\n\nScreenshots (Optional)\nBelow are some sample screenshots of the application:\n\n1. Channel Overview\n\nThis screenshot shows an overview of the channels in which multiple members can chat in real time.\n\n\n\n2. Thread-Channel Feature\n\nThis example illustrates how to start a sub-discussion (thread) within a channel—helpful for separating topics from the main chat.\n\n\n\n3. Private Messages\n\nHere you can see direct (1:1) messages where you can also use emojis, images, and threads.\n\n\n\n4. Thread Messages\n\nThis example shows how you can hold a sub-discussion (thread) within a channel, separate from the main chat.\n\n\n\nUsage\n\nStarting the Application  \n\nRun ng serve or start it in your IDE (e.g., Visual Studio Code) using an Angular CLI command.  \nOpen http://localhost:4200 in your browser.  \nThe application automatically recompiles and reloads when you make changes to the source files.\n\n\nRegistration or Guest Login  \n\nOn first launch, you can create an account (email/password) or log in as a guest.  \nGuest users have limited profile features.\n\n\nChannels & Threads  \n\nClick the “+” icon to create a new channel, invite members, and start chatting.  \nClick on a message to start a thread or to attach images/emojis.\n\n\nPrivate Messages  \n\nSelect a user to start a direct (1:1) message. You can also use threads here for more in-depth discussions.\n\n\nEdit Your Profile  \n\nClick your avatar icon (top right) to change your name, email, or avatar, and to manage your online status.\n\n\nPrivacy Policy & Legal Notice  \n\nAccessible via the footer link or the menu, containing legal notices and contact info.\n\n\nPassword Reset  \n\nUse “Forgot Password?” to request a new password (email verification required).\n\n\n\n\nTests\nUnit Tests (Jasmine/Karma)\nTo run the unit tests (using Jasmine/Karma), ensure that you have installed all required dependencies. Then execute:\nng test\nProject Structure\nDABubble/├─ src/│  ├─ app/│  │  ├─ components/│  │  │  ├─ chat-component.html│  │  │  ├─ add-members-dialog.html│  │  │  ├─ add-members-dialog-mobile.html│  │  │  ├─ auth-action.html│  │  │  ├─ avatar.html│  │  │  ├─ channel-dialog.html│  │  │  ├─ chat-header.html│  │  │  ├─ devspace.html│  │  │  ├─ direct-messages.html│  │  │  ├─ edit-channel-dialog.html│  │  │  ├─ entwicklerteam.html│  │  │  ├─ footer.html│  │  │  ├─ header.html│  │  │  ├─ imprint.html│  │  │  ├─ inner-channel.html│  │  │  ├─ intro.html│  │  │  ├─ login.html│  │  │  ├─ members-list-dialog.html│  │  │  ├─ member-section-dialog.html│  │  │  ├─ members-dialog.html│  │  │  ├─ new-passwort.html│  │  │  ├─ passwort-reset.html│  │  │  ├─ privacy.html│  │  │  ├─ private-messages.html│  │  │  ├─ profil-dialog.html│  │  │  ├─ search-field.html│  │  │  ├─ search-result-dialog.html│  │  │  ├─ selected-mebers-dialog.html│  │  │  ├─ signup.html│  │  │  ├─ thread.html│  │  │  ├─ thread-channel.html│  │  │  ├─ verify-email.html│  │  │  └─ welcome-screen.html│  │  ││  │  │  /* Note:\n│  │  │     Each .html file has a corresponding .ts & .scss,\n│  │  │     e.g. \"chat-component.ts\" and \"chat-component.scss\" */\n│  │  ├─ services/\n│  │  │  ├─ user.service.ts\n│  │  │  ├─ message.service.ts\n│  │  │  ├─ channel.service.ts\n│  │  │  └─ app-state.service.ts\n│  │  ├─ pages/\n│  │  │  ├─ app.component.html\n│  │  │  ├─ app.component.scss\n│  │  │  ├─ app.component.spec.ts\n│  │  │  └─ app.component.ts\n│  │  ├─ app.config.ts\n│  │  ├─ app.routes.ts\n│  │  ├─ message.model.ts\n│  │  └─ member.models.ts\n│  ├─ environments/\n│  │  ├─ environment.ts\n│  │  └─ environment.prod.ts\n│  ├─ main.ts\n│  ├─ index.html\n│  └─ ...\n├─ angular.json\n├─ package.json\n├─ README.md\n└─ ...\n\nContributing\nContributions are welcome! Fork the repository, create a new branch, and submit a pull request.\nPlease ensure that your code follows these guidelines:\n\nClean Code principles: Write simple, understandable, and maintainable code.\n\n\nLicense\nThis project is licensed under the MIT License. For more details, see the LICENSE file.\n\nDocumentation (Optional, using Compodoc)\nIf you want to generate code documentation for the DABubble project, Compodoc can produce an interactive HTML site based on your Angular components, services, and JSDoc comments.\n\nInstall DependenciesMake sure you have installed all dependencies, including dev dependencies:Example :npm install\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    33 Components\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReplyCountsMap   (src/.../message.models.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/message.models.ts\n    \n    \n        \n            \n                \n                    \n                    ReplyCountsMap\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            generateConversationId   (src/.../conversation.helpers.ts)\n                        \n                        \n                            initializeDirectConversation   (src/.../conversation.helpers.ts)\n                        \n                        \n                            loadCurrentUserHelper   (src/.../search-field.user.helpers.ts)\n                        \n                        \n                            loadRecipientDataHelper   (src/.../search-field.user.helpers.ts)\n                        \n                        \n                            POSITIONS   (src/.../positions-const.ts)\n                        \n                        \n                            POSITIONS_ADD_MEMBERS   (src/.../positions-const.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes),\n    provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\n    provideFirestore(() => getFirestore()),\n    provideAuth(() => getAuth()),\n    provideStorage(() => getStorage()),\n    ReactiveFormsModule, provideAnimationsAsync(),\n    MatInputModule, MatFormFieldModule, MatDialogModule,BrowserAnimationsModule,\n    MatButtonModule,\n    provideAnimations(),\n    { provide: LOCALE_ID, useValue: 'de-DE' }\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  firebaseConfig: {\n    apiKey: 'AIzaSyAgxRDY1OkM0C4HTChULxB0cf3oiyTG7Go',\n    authDomain: 'dabubble-3b22e.firebaseapp.com',\n    projectId: 'dabubble-3b22e',\n    storageBucket: 'dabubble-3b22e.appspot.com',\n    messagingSenderId: '837671090070',\n    appId: '1:837671090070:web:f294fc70edfcf2caeccfb7',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  firebaseConfig: {\n    apiKey: 'AIzaSyAgxRDY1OkM0C4HTChULxB0cf3oiyTG7Go',\n    authDomain: 'dabubble-3b22e.firebaseapp.com',\n    projectId: 'dabubble-3b22e',\n    storageBucket: 'dabubble-3b22e.appspot.com',\n    messagingSenderId: '837671090070',\n    appId: '1:837671090070:web:f294fc70edfcf2caeccfb7',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/app/search-field/conversation.helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateConversationId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  userId1: string,\n  userId2: string\n): string => [userId1, userId2].sort().join('_')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeDirectConversation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  currentUser: any,\n  recipientId: string,\n  messageService: {\n    generateConversationId: (userId1: string, userId2: string) => string;\n    getMessagesOnce: (\n      mode: 'private',\n      conversationId: string\n    ) => Promise;\n  },\n  updateMessages: (msgs: Message[]) => void,\n  scrollToBottomFn: () => void,\n  loadLastUsedEmojisFn: (\n    context: any,\n    getMessages: (mode: string, convId: string) => Promise,\n    convId: string\n  ) => void,\n  getEmojiContextFn: () => any\n): string => {\n  const conversationId = messageService.generateConversationId(\n    currentUser.id,\n    recipientId\n  );\n\n  messageService\n    .getMessagesOnce('private', conversationId)\n    .then((messages: Message[]) => {\n      const msgs = messages.map((msg) => ({\n        ...msg,\n        content: { ...msg.content, emojis: msg.content?.emojis || [] },\n      }));\n      updateMessages(msgs);\n      scrollToBottomFn();\n    })\n    .catch(() => {});\n\n  loadLastUsedEmojisFn(\n    getEmojiContextFn(),\n    (mode, convId) => messageService.getMessagesOnce(mode as 'private', convId),\n    conversationId\n  );\n\n  return conversationId;\n}\n                    \n                \n\n\n        \n    \n\n    src/app/search-field/search-field.user.helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadCurrentUserHelper\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  userService: { getCurrentUserData: () => Promise },\n  updateUser: (user: any) => void\n): Promise => {\n  return userService\n    .getCurrentUserData()\n    .then((user) => {\n      updateUser(user);\n    })\n    .catch(() => {});\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadRecipientDataHelper\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  recipientId: string,\n  userService: { getUserById: (id: string) => Promise },\n  updateRecipientStatus: (status: string) => void,\n  updateRecipientAvatar: (avatarUrl: string) => void\n): void => {\n  if (recipientId) {\n    userService\n      .getUserById(recipientId)\n      .then((userData) => {\n        updateRecipientStatus(userData.isOnline ? 'Aktiv' : 'Abwesend');\n        updateRecipientAvatar(userData.avatarUrl || '');\n      })\n      .catch(() => {});\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/app/entwicklerteam/positions-const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POSITIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConnectionPositionPair[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 0,\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 0,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSITIONS_ADD_MEMBERS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConnectionPositionPair[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 0,\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 0,\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
